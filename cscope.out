cscope 15 $HOME/projects/nwm               0000449143
	@atoms.c

1 
	~"zwm.h
"

3 
	#INIT_ATOM
(
«me
Ë
Atom
 
	)
name

4 
	~"©oms.h
"

5 #unde‡
INIT_ATOM


7 
	#NATOMS
 (((*)&
ZWM_LAST
 - (*)&
ZWM_FIRST
))

	)

10 
	$zwm_öô_©oms
() {

11 
	#INIT_ATOM
(
«me
Ë«mê
	`XI¡înAtom
(
dpy
, #«me, 
FÆ£
)

	)

12 
	~"©oms.h
"

13 #unde‡
INIT_ATOM


15 
	`XCh™gePr›îty
(
dpy
, 
roŸ
,

16 
_NET_SUPPORTED
, 
XA_ATOM
, 32,

17 
Pr›ModeRïœ˚
, (*Ë&
WM_NAME
,

18 
NATOMS
);

19 
	}
}

21 
Atom


22 
	$zwm_x11_gë_wödow_ty≥
(
Wödow
 
wö
)

24 
Atom
 
ªÆ
, *
©oms
;

25 
f‹m©
;

26 *
d©a
 = 
NULL
;

27 
i
, 
n
, 
exåa
;

28 
Atom
 
ªt
 = 0;

29 if(
	`XGëWödowPr›îty
(
dpy
, 
wö
, 
_NET_WM_WINDOW_TYPE
, 0L, 
LONG_MAX
, 
FÆ£
,

30 
XA_ATOM
, &
ªÆ
, &
f‹m©
, &
n
, &
exåa
,

31 (**Ë&
d©a
Ë=
Suc˚ss
 && data){

32 
Atom
 *
©oms
 = (Atom *Ë
d©a
;

33 
i
 = 0; i < 
n
; i++){

34 i‡(
©oms
[
i
] =
_NET_WM_WINDOW_TYPE_DND
 ||

35 
©oms
[
i
] =
_NET_WM_WINDOW_TYPE_DESKTOP
 ||

36 
©oms
[
i
] =
_NET_WM_WINDOW_TYPE_DOCK
 ||

37 
©oms
[
i
] =
_NET_WM_WINDOW_TYPE_TOOLBAR
 ||

38 
©oms
[
i
] =
_NET_WM_WINDOW_TYPE_MENU
 ||

39 
©oms
[
i
] =
_NET_WM_WINDOW_TYPE_DIALOG
 ||

40 
©oms
[
i
] =
_NET_WM_WINDOW_TYPE_NORMAL
 ||

41 
©oms
[
i
] =
_NET_WM_WINDOW_TYPE_UTILITY
 ||

42 
©oms
[
i
] =
_NET_WM_WINDOW_TYPE_SPLASH
 ||

43 
©oms
[
i
] =
_NET_WM_WINDOW_TYPE_DROPDOWN_MENU
 ||

44 
©oms
[
i
] =
_NET_WM_WINDOW_TYPE_TOOLTIP
) {

45 
ªt
 = 
©oms
[
i
];

49 
	`‰ì
(
d©a
);

51  
ªt
;

52 
	}
}

54 
Boﬁ


55 
	$zwm_x11_check_©om
(
Wödow
 
wö
, 
Atom
 
big©om
, Atom 
smÆœtom
){

56 
Atom
 
ªÆ
, *
°©e
;

57 
f‹m©
;

58 *
d©a
 = 
NULL
;

59 
i
, 
n
, 
exåa
;

60 if(
	`XGëWödowPr›îty
(
dpy
, 
wö
, 
big©om
, 0L, 
LONG_MAX
, 
FÆ£
,

61 
XA_ATOM
, &
ªÆ
, &
f‹m©
, &
n
, &
exåa
,

62 (**Ë&
d©a
Ë=
Suc˚ss
 && data){

63 
°©e
 = (
Atom
 *Ë
d©a
;

64 
i
 = 0; i < 
n
; i++){

65 if(
°©e
[
i
] =
smÆœtom
) {

66 
	`‰ì
(
d©a
);

67  
True
;

70 
	`‰ì
(
d©a
);

72  
FÆ£
;

73 
	}
}

75 
Boﬁ


76 
	$zwm_x11_£t_©oms
(
Wödow
 
w
, 
Atom
 
a
, Atom 
ty≥
, *
vÆ
,

77 
nôems
)

79  (
	`XCh™gePr›îty
(
dpy
, 
w
, 
a
, 
ty≥
, 32, 
Pr›ModeRïœ˚
,

80 (*)
vÆ
, 
nôems
Ë=
Suc˚ss
);

81 
	}
}

84 
	$zwm_x11_gë_©oms
(
Wödow
 
w
, 
Atom
 
a
, Atom 
ty≥
, 
off
,

85 *
ªt
, 
nôems
, *
À·
)

87 
Atom
 
ªÆ_ty≥
;

88 
i
, 
ªÆ_f‹m©
 = 0;

89 
ôems_ªad
 = 0;

90 
byãs_À·
 = 0;

91 *
p
;

92 *
d©a
;

94 
	`XGëWödowPr›îty
(
dpy
, 
w
, 
a
, 
off
, 
nôems
, 
FÆ£
, 
ty≥
,

95 &
ªÆ_ty≥
, &
ªÆ_f‹m©
, &
ôems_ªad
, &
byãs_À·
, &
d©a
);

97 i‡(
ªÆ_f‹m©
 =32 && 
ôems_ªad
) {

98 
p
 = (*)
d©a
;

99 
i
 = 0; i < 
ôems_ªad
; i++Ë*
ªt
++ = *
p
++;

100 
	`XFªe
(
d©a
);

101 i‡(
À·
Ë*À· = 
byãs_À·
;

102  
ôems_ªad
;

106 
	}
}

108 
Boﬁ


109 
	$zwm_x11_≠≥nd_©oms
(
Wödow
 
w
, 
Atom
 
a
, Atom 
ty≥
, *
vÆ
,

110 
nôems
)

112  (
	`XCh™gePr›îty
(
dpy
, 
w
, 
a
, 
ty≥
, 32, 
Pr›ModeAµíd
,

113 (*)
vÆ
, 
nôems
Ë=
Suc˚ss
);

114 
	}
}

116 
Boﬁ


117 
	$zwm_x11_gë_ãxt_¥›îty
(
Wödow
 
w
, 
Atom
 
©om
, *
ãxt
, 
size
)

119 **
li°
 = 
NULL
;

120 
n
;

121 
XTextPr›îty
 
«me
;

123 if(!
ãxt
 || 
size
 == 0)

124  
FÆ£
;

125 
ãxt
[0] = '\0';

126 
	`XGëTextPr›îty
(
dpy
, 
w
, &
«me
, 
©om
);

127 if(!
«me
.
nôems
)

128  
FÆ£
;

129 if(
«me
.
ícodög
 =
XA_STRING
)

130 
	`°∫˝y
(
ãxt
, (*)
«me
.
vÆue
, 
size
 - 1);

132 if(
	`XmbTextPr›îtyToTextLi°
(
dpy
, &
«me
, &
li°
, &
n
Ë>
Suc˚ss


133 && 
n
 > 0 && *
li°
)

135 
	`°∫˝y
(
ãxt
, *
li°
, 
size
 - 1);

136 
	`XFªeSåögLi°
(
li°
);

139 
ãxt
[
size
 - 1] = '\0';

140 
	`XFªe
(
«me
.
vÆue
);

141  
True
;

142 
	}
}

	@atoms.h

1 
INIT_ATOM
(
ZWM_FIRST
);

2 
INIT_ATOM
(
_NET_ACTIVE_WINDOW
);

3 
INIT_ATOM
(
_NET_CLIENT_LIST
);

4 
INIT_ATOM
(
_NET_CLIENT_LIST_STACKING
);

5 
INIT_ATOM
(
_NET_CURRENT_DESKTOP
);

6 
INIT_ATOM
(
_NET_DESKTOP_NAMES
);

7 
INIT_ATOM
(
_NET_NUMBER_OF_DESKTOPS
);

8 
INIT_ATOM
(
_NET_SUPPORTED
);

9 
INIT_ATOM
(
_NET_WM_DESKTOP
);

10 
INIT_ATOM
(
_NET_WM_NAME
);

11 
INIT_ATOM
(
_NET_WM_STATE
);

12 
INIT_ATOM
(
_NET_WM_STATE_FULLSCREEN
);

13 
INIT_ATOM
(
_NET_WM_STATE_MODAL
);

14 
INIT_ATOM
(
_NET_WM_WINDOW_TYPE
);

15 
INIT_ATOM
(
_NET_WM_WINDOW_TYPE_DND
);

16 
INIT_ATOM
(
_NET_WM_WINDOW_TYPE_DESKTOP
);

17 
INIT_ATOM
(
_NET_WM_WINDOW_TYPE_DOCK
);

18 
INIT_ATOM
(
_NET_WM_WINDOW_TYPE_TOOLBAR
);

19 
INIT_ATOM
(
_NET_WM_WINDOW_TYPE_MENU
);

20 
INIT_ATOM
(
_NET_WM_WINDOW_TYPE_DIALOG
);

21 
INIT_ATOM
(
_NET_WM_WINDOW_TYPE_NORMAL
);

22 
INIT_ATOM
(
_NET_WM_WINDOW_TYPE_UTILITY
);

23 
INIT_ATOM
(
_NET_WM_WINDOW_TYPE_SPLASH
);

24 
INIT_ATOM
(
_NET_WM_WINDOW_TYPE_DROPDOWN_MENU
);

25 
INIT_ATOM
(
_NET_WM_WINDOW_TYPE_TOOLTIP
);

26 
INIT_ATOM
(
UTF8_STRING
);

27 
INIT_ATOM
(
WM_CHANGE_STATE
);

28 
INIT_ATOM
(
WM_DELETE_WINDOW
);

29 
INIT_ATOM
(
WM_NAME
);

30 
INIT_ATOM
(
WM_PROTOCOLS
);

31 
INIT_ATOM
(
WM_STATE
);

32 
INIT_ATOM
(
ZWM_LAST
);

	@client.c

1 
	~"zwm.h
"

3 
DEFINE_GLOBAL_LIST_DEFINE
(
zwm_˛õ¡
,
Clõ¡
,
node
);

4 
DEFINE_GLOBAL_LIST_HEAD
(
zwm_˛õ¡
,
Clõ¡
,
node
);

5 
DEFINE_GLOBAL_LIST_TAIL
(
zwm_˛õ¡
,
Clõ¡
,
node
);

6 
DEFINE_GLOBAL_LIST_NEXT
(
zwm_˛õ¡
,
Clõ¡
,
node
);

7 
DEFINE_GLOBAL_LIST_PREV
(
zwm_˛õ¡
,
Clõ¡
,
node
);

9 
DEFINE_GLOBAL_LIST_INSERT_AFTER
(
zwm_˛õ¡
,
Clõ¡
,
node
);

10 
DEFINE_GLOBAL_LIST_PUSH_HEAD
(
zwm_˛õ¡
,
Clõ¡
,
node
);

11 
DEFINE_GLOBAL_LIST_PUSH_TAIL
(
zwm_˛õ¡
,
Clõ¡
,
node
);

12 
DEFINE_GLOBAL_LIST_REMOVE
(
zwm_˛õ¡
,
Clõ¡
,
node
);

14 
	gnum_Êﬂtög
 = 0;

15 
	g¥ivcou¡
 = 0;

16 
gøbbuâ⁄s
(
Clõ¡
 *
c
, 
Boﬁ
 
focu£d
);

18 
Clõ¡
 *
	g£l
 = 
NULL
;

20 
zwm_auto_võw
(
v
);

26 
	$zwm_˛õ¡_£nd_c⁄figuª
(
Clõ¡
 *
c
) {

27 
XC⁄figuªEvít
 
˚
;

28 if(
c
->
ty≥
 !
ZíN‹mÆWödow
)

30 
˚
.
ty≥
 = 
C⁄figuªNŸify
;

31 
˚
.
di•œy
 = 
dpy
;

32 
˚
.
evít
 = 
c
->
wö
;

33 
˚
.
wödow
 = 
c
->
wö
;

34 
˚
.
x
 = 
c
->x;

35 
˚
.
y
 = 
c
->y;

36 
˚
.
width
 = 
c
->
w
;

37 
˚
.
height
 = 
c
->
h
;

38 
˚
.
b‹dî_width
 = 
c
->
b‹dî
;

39 
˚
.
above
 = 
N⁄e
;

40 
˚
.
ovîride_ªdúe˘
 = 
FÆ£
;

41 
	`XSídEvít
(
dpy
, 
c
->
wö
, 
FÆ£
, 
Såu˘uªNŸifyMask
, (
XEvít
 *)&
˚
);

43 
˚
.
y
 = 
c
->y-20;

44 
˚
.
height
 = 20;

45 
	`XSídEvít
(
dpy
, 
c
->
‰ame
, 
FÆ£
, 
Såu˘uªNŸifyMask
, (
XEvít
 *)&
˚
);

46 
	}
}

52 
	$xîr‹
(
Di•œy
 *
dpy
, 
XEº‹Evít
 *
ì
) {

55 if(
ì
->
îr‹_code
 =
BadWödow


56 || (
ì
->
ªque°_code
 =
X_SëI≈utFocus
 &&Ée->
îr‹_code
 =
BadM©ch
)

57 || (
ì
->
ªque°_code
 =
X_PﬁyText8
 &&Ée->
îr‹_code
 =
BadDøwabÀ
)

58 || (
ì
->
ªque°_code
 =
X_PﬁyFûlRe˘™gÀ
 &&Ée->
îr‹_code
 =
BadDøwabÀ
)

59 || (
ì
->
ªque°_code
 =
X_PﬁySegmít
 &&Ée->
îr‹_code
 =
BadDøwabÀ
)

60 || (
ì
->
ªque°_code
 =
X_C⁄figuªWödow
 &&Ée->
îr‹_code
 =
BadM©ch
)

61 || (
ì
->
ªque°_code
 =
X_GøbKey
 &&Ée->
îr‹_code
 =
BadAc˚ss
)

62 || (
ì
->
ªque°_code
 =
X_C›yAªa
 &&Ée->
îr‹_code
 =
BadDøwabÀ
))

64 
	`Ârötf
(
°dîr
, "dwm: fatalÉrror:Ñequest code=%d,Érror code=%d\n",

65 
ì
->
ªque°_code
,Ée->
îr‹_code
);

69 
	}
}

73 
	$gë_ty≥
(
Wödow
 
w
)

75 
Atom
 
t
 = 
	`zwm_x11_gë_wödow_ty≥
(
w
);

76 
	#CHECK_RET
(
a
, 
b
Ëdo{if(
t
 =a){ b;}}0)

	)

78 
	`CHECK_RET
(
_NET_WM_WINDOW_TYPE_DOCK
, 
ZíDockWödow
);

79 
	`CHECK_RET
(
_NET_WM_WINDOW_TYPE_NORMAL
, 
ZíN‹mÆWödow
);

80 
	`CHECK_RET
(
_NET_WM_WINDOW_TYPE_DIALOG
, 
ZíDülogWödow
);

81 
	`CHECK_RET
(
_NET_WM_WINDOW_TYPE_DESKTOP
, 
ZíDeskt›Wödow
);

82 if(
	`zwm_x11_check_©om
(
w
, 
_NET_WM_WINDOW_TYPE
, 
_NET_WM_STATE_MODAL
)){

83  
ZíDülogWödow
;

85  
ZíN‹mÆWödow
;

86 
	}
}

89 
	$check_∑√l
(
Wödow
 
w
)

91 
XWödowCh™ges
 
wc
;

92 if(
	`zwm_x11_check_©om
(
w
, 
_NET_WM_WINDOW_TYPE
,

93 
_NET_WM_WINDOW_TYPE_DOCK
)

96 
	`XSñe˘I≈ut
(
dpy
, 
w
, 
Pr›îtyCh™geMask
);

97 
wc
.
b‹dî_width
 = 0;

98 
	`XC⁄figuªWödow
(
dpy
, 
w
, 
CWB‹dîWidth
, &
wc
);

99 
	`XM≠Wödow
(
dpy
, 
w
);

103 
	}
}

106 
	$check_deskt›
(
Wödow
 
w
)

108 if(
	`zwm_x11_check_©om
(
w
, 
_NET_WM_WINDOW_TYPE
,

109 
_NET_WM_WINDOW_TYPE_DESKTOP
)){

113 
	}
}

116 
	$check_dülog
(
Wödow
 
w
)

119 
	`zwm_x11_check_©om
(
w
, 
_NET_WM_WINDOW_TYPE
, 
_NET_WM_WINDOW_TYPE_DIALOG
) ||

120 
	`zwm_x11_check_©om
(
w
, 
_NET_WM_WINDOW_TYPE
, 
_NET_WM_STATE_MODAL
) ||

121 
	`zwm_x11_check_©om
(
w
, 
_NET_WM_WINDOW_TYPE
, 
_NET_WM_WINDOW_TYPE_SPLASH
)

126 
	}
}

129 
	$zwm_˛õ¡_unb™
(
Clõ¡
 *
c
) {

130 i‡(
c
->
isb™√d
) {

131 
c
->
isb™√d
 = 
FÆ£
;

132 
	`XMoveWödow
(
dpy
, 
c
->
wö
, c->
x
, c->
y
);

134 
	}
}

137 
	$zwm_˛õ¡_b™
(
Clõ¡
 *
c
) {

138 i‡(
c
->
ty≥
 =
ZíN‹mÆWödow
 && !c->
isb™√d
) {

139 
c
->
isb™√d
 = 
True
;

140 
	`XMoveWödow
(
dpy
, 
c
->
wö
, c->
x
 + 2 * 
s¸ìn
[0].
w
, c->
y
 );

142 
	}
}

145 
	$zwm_˛õ¡_ic⁄ify
(
Clõ¡
 *
c
) {

146 if(
c
 =
NULL
) {

147 
c
 = 
£l
;

150 if(!
c
){

154 
c
->
°©e
 = 
Ic⁄icSèã
;

155 
	`zwm_evít_emô
(
ZíClõ¡Sèã
, 
c
);

156 
	`zwm_˛õ¡_b™
(
c
);

157 
	`zwm_˛õ¡_focus
(
NULL
);

158 
	`zwm_œyout_¨ønge
();

159 
	`XMoveWödow
(
dpy
, 
c
->
wö
, c->
x
 + 2 * 
s¸ìn
[0].
w
, c->
y
 );

160 
	}
}

163 
	$zwm_˛õ¡_£t°©e
(
Clõ¡
 *
c
, 
°©e
)

165 
c
->
°©e
 = state;

166 
	`zwm_evít_emô
(
ZíClõ¡Sèã
, 
c
);

167 if(
	`zwm_˛õ¡_visibÀ
(
c
))

169 
	`zwm_˛õ¡_unb™
(
c
);

171 
	`zwm_˛õ¡_b™
(
c
);

173 
	`zwm_œyout_¨ønge
();

174 
	`zwm_˛õ¡_focus
(
NULL
);

175 
	}
}

177 
	$zwm_˛õ¡_sˇn
()

179 
Wödow
 *
wös
 = 
NULL
, 
d1
, 
d2
;

180 
XWödowAâribuãs
 
wa
;

181 
num
;

182 
i
;

184 
	`XQuîyTªe
(
dpy
, 
roŸ
, &
d1
, &
d2
, &
wös
, &
num
);

185 
i
 = 0; i < 
num
; i++) {

186 
	`XGëWödowAâribuãs
(
dpy
, 
wös
[
i
], &
wa
);

187 i‡(
wa
.
m≠_°©e
 =
IsVõwabÀ
) {

188 
	`zwm_˛õ¡_m™age
(
wös
[
i
], &
wa
);

191 if(
wös
)

192 
	`XFªe
(
wös
);

193 
	}
}

195 
Clõ¡
 *
	$zwm_Æloc_˛õ¡
(
Wödow
 
w
, 
XWödowAâribuãs
 *
wa
)

197 
Clõ¡
 *
c
 = 
	`zwm_mÆloc
((Clõ¡Ë+ ((*)*
¥ivcou¡
));

198 
c
->
wö
 = 
w
;

199 
c
->
isÊﬂtög
 = 
FÆ£
;

200 
c
->
x
 = 
wa
->x;

201 
c
->
y
 = 
wa
->y;

202 
c
->
w
 = 
wa
->
width
;

203 
c
->
h
 = 
wa
->
height
;

204 
c
->
°©e
 = 
N‹mÆSèã
;

205 
c
->
võw
 = 
cuºít_võw
;

206 
c
->
b‹dî
 = 
c⁄fig
.
b‹dî_width
;

207 
c
->
cﬁ‹
 = 
xcﬁ‹_n‹mÆ
;

208 
c
->
ty≥
 = 
ZíN‹mÆWödow
;

209 
	`zí_li°_node_öô
(&
c
->
node
);

210 
	`zwm_˛õ¡_upd©e_«me
(
c
);

211  
c
;

212 
	}
}

215 
	$¸óã_‰ame_wödow
(
Clõ¡
 *
c
)

217 
XCœssHöt
 
höt
 = {"zwm", "ZWM"};

218 
s¸
 = 
	`DeÁu…S¸ìn
(
dpy
);

219 
XSëWödowAâribuãs
 
∑âr
;

220 
∑âr
.
ovîride_ªdúe˘
 = 
True
;

221 
∑âr
.
evít_mask
 = 
Såu˘uªNŸifyMask
 | 
Sub°ru˘uªRedúe˘Mask
 | 
Sub°ru˘uªNŸifyMask
 |

222 
Buâ⁄PªssMask
 | 
Buâ⁄Rñó£Mask
 | 
PoöãrMŸi⁄Mask
 | 
ExposuªMask
 |

223 
E¡îWödowMask
;

224 
c
->
‰ame
 = 
	`XCª©eWödow
(
dpy
, 
roŸ
, c->
x
, c->
y
, c->
w
, 20, 1,

225 
	`DeÁu…Dïth
(
dpy
, 
s¸
), 
C›yFromP¨ít
, 
	`DeÁu…VisuÆ
(dpy, scr),

226 
CWOvîrideRedúe˘
|
CWBackPixñ
|
CWB‹dîPixñ
|
CWEvítMask
, &
∑âr
);

227 if(
c⁄fig
.
show_tôÀ
)
	`XM≠Wödow
(
dpy
,
c
->
‰ame
);

228 
	`XSëCœssHöt
(
dpy
, 
c
->
‰ame
, &
höt
);

230 
	}
}

233 
	$zwm_˛õ¡_upd©e_dec‹©i⁄
(
Clõ¡
 *
c
)

235 
cﬁ‹
 = 
xcﬁ‹_focus
;

236 
fûl
 = 
xcﬁ‹_focus
;

237 if(
c
->
ty≥
 !
ZíN‹mÆWödow
 && c->ty≥ !
ZíDülogWödow
){

241 if(
c
->
focu£d
 =
FÆ£
){

242 
cﬁ‹
 = 
c
->color;

243 
fûl
 = 
xcﬁ‹_n‹mÆ
;

246 
	`XSëWödowB‹dî
(
dpy
, 
c
->
wö
, 
cﬁ‹
);

247 
	`XSëWödowBackground
(
dpy
, 
c
->
‰ame
, 
fûl
);

248 
	`XSëWödowB‹dî
(
dpy
, 
c
->
‰ame
, 
cﬁ‹
);

249 
	`XSëF‹eground
(
dpy
, 
gc
, 
fûl
);

250 
	`XFûlRe˘™gÀ
 (
dpy
, 
c
->
‰ame
, 
gc
, 0, 0, c->
w
, 20);

251 
	`XSëF‹eground
(
dpy
, 
gc
, 
	`WhôePixñ
(dpy,0));

252 
	`XDøwSåög
(
dpy
, 
c
->
‰ame
, 
gc
, 5, 
f⁄t
->
as˚¡
+f⁄t->
des˚¡
-2, c->
«me
, 
	`°æí
(c->name));

253 
	`XSëF‹eground
(
dpy
, 
gc
, 
	`BœckPixñ
(dpy,0));

254 
	`XDøwSåög
(
dpy
, 
c
->
‰ame
, 
gc
, 4, 
f⁄t
->
as˚¡
+f⁄t->
des˚¡
-2-1, c->
«me
, 
	`°æí
(c->name));

255 
	}
}

259 
	$zwm_˛õ¡_m™age
(
Wödow
 
w
, 
XWödowAâribuãs
 *
wa
)

261 
XWödowCh™ges
 
wc
;

263 
Clõ¡
* 
ﬁd
 = 
	`zwm_˛õ¡_gë
(
w
);

264 if(
ﬁd
 && old->
wö
 =
w
 ){

268 if(
wa
->
ovîride_ªdúe˘
){

272 
Clõ¡
 *
c
 = 
	`zwm_Æloc_˛õ¡
(
w
, 
wa
);

276 
c
->
ty≥
 = 
	`gë_ty≥
(
w
);

277 
c
->
ty≥
) {

278 
ZíDeskt›Wödow
:

281 
ZíDockWödow
:

282 
	`XSñe˘I≈ut
(
dpy
, 
w
, 
Pr›îtyCh™geMask
);

283 
wc
.
b‹dî_width
 = 0;

284 
	`XC⁄figuªWödow
(
dpy
, 
w
, 
CWB‹dîWidth
, &
wc
);

285 
	`XM≠Wödow
(
dpy
, 
w
);

295 
ZíN‹mÆWödow
:

296 
wc
.
b‹dî_width
 = 
c
->
b‹dî
;

297 
	`XC⁄figuªWödow
(
dpy
, 
w
, 
CWB‹dîWidth
, &
wc
);

299 
	`zwm_˛õ¡_£nd_c⁄figuª
(
c
);

300 
	`XSñe˘I≈ut
(
dpy
, 
w
, 
Såu˘uªNŸifyMask
 | 
Pr›îtyCh™geMask
 | 
E¡îWödowMask
);

301 
	`XMoveResizeWödow
(
dpy
, 
c
->
wö
, c->
x
, c->
y
, c->
w
, c->
h
);

302 
	`XM≠Wödow
(
dpy
, 
c
->
wö
);

303 
	`¸óã_‰ame_wödow
(
c
);

304 
c
->
focu£d
 = 
True
;

305 
	`gøbbuâ⁄s
(
c
, 
True
);

306 
	`zwm_˛õ¡_£nd_c⁄figuª
(
c
);

307 
	`zwm_˛õ¡_upd©e_dec‹©i⁄
(
c
);

311 if(
	`check_∑√l
(
w
))

313 
c
->
ty≥
 = 
ZíDockWödow
;

314 } if(
	`check_deskt›
(
w
))

316 
c
->
ty≥
 = 
ZíDeskt›Wödow
;

320 
c
->
ty≥
) {

321 
ZíDeskt›Wödow
:

324 
ZíDockWödow
:

325 
	`XSñe˘I≈ut
(
dpy
, 
w
, 
Pr›îtyCh™geMask
);

326 
wc
.
b‹dî_width
 = 0;

327 
	`XC⁄figuªWödow
(
dpy
, 
w
, 
CWB‹dîWidth
, &
wc
);

328 
	`XM≠Wödow
(
dpy
, 
w
);

332 if(
	`check_dülog
(
w
)){

333 
c
->
isÊﬂtög
 = 
True
;

334 
c
->
x
 = 
wa
->x?wa->x:((
s¸ìn
[0].
w
 - wa->
width
)/2);

335 
c
->
y
 = 
wa
->y?wa->y:((
s¸ìn
[0].
h
 - wa->
height
)/2);

336 
c
->
w
 = 
wa
->
width
?wa->width:(
s¸ìn
[0].w/2);

337 
c
->
h
 = 
wa
->
height
?wa->height:(
s¸ìn
[0].h/2);

338 
num_Êﬂtög
++;

341 if(
c
->
ty≥
 =
ZíN‹mÆWödow
) {

343 
wc
.
b‹dî_width
 = 
c
->
b‹dî
;

344 
	`XC⁄figuªWödow
(
dpy
, 
w
, 
CWB‹dîWidth
, &
wc
);

346 
	`zwm_˛õ¡_£nd_c⁄figuª
(
c
);

347 
	`XSñe˘I≈ut
(
dpy
, 
w
, 
Såu˘uªNŸifyMask
 | 
Pr›îtyCh™geMask
 | 
E¡îWödowMask
);

348 
	`XMoveResizeWödow
(
dpy
, 
c
->
wö
, c->
x
, c->
y
, c->
w
, c->
h
);

349 
	`XM≠Wödow
(
dpy
, 
c
->
wö
);

350 
	`¸óã_‰ame_wödow
(
c
);

351 
c
->
focu£d
 = 
True
;

352 
	`gøbbuâ⁄s
(
c
, 
True
);

353 
	`zwm_˛õ¡_£nd_c⁄figuª
(
c
);

354 
	`zwm_˛õ¡_upd©e_dec‹©i⁄
(
c
);

357 
	`¥ötf
("m™agê%†%∞%p\n",
c
->
«me
, c->
wö
, c->
‰ame
);

360 
	`zwm_˛õ¡_push_hód
(
c
);

361 
	`zwm_evít_emô
(
ZíClõ¡M≠
, 
c
);

362 
	`zwm_œyout_¨ønge
();

363 
	`zwm_˛õ¡_focus
(
c
);

364 
	`zwm_˛õ¡_w¨p
(
c
);

366 
	}
}

368 
	$xîr‹dummy
 (
Di•œy
 *
dpy
, 
XEº‹Evít
 *
ì
)

371 
	}
}

374 
	$zwm_˛õ¡_unm™age
(
Clõ¡
 *
c
) {

375 
	`zwm_evít_emô
(
ZíClõ¡Unm≠
, 
c
);

376 
	`XGøbSîvî
(
dpy
);

377 
	`XSëEº‹H™dÀr
(
xîr‹dummy
);

378 
	`XUnm≠Wödow
(
dpy
, 
c
->
‰ame
);

379 
	`XDe°royWödow
(
dpy
, 
c
->
wö
);

380 
	`zwm_˛õ¡_ªmove
(
c
);

381 if(
c
->
isÊﬂtög
){

382 
num_Êﬂtög
--;

384 if(
£l
 =
c
) {

385 
	`zwm_˛õ¡_focus
(
NULL
);

388 
	`XUngøbBuâ⁄
(
dpy
, 
AnyBuâ⁄
, 
AnyModifõr
, 
c
->
wö
);

390 
	`‰ì
(
c
);

392 
	`XSync
(
dpy
, 
FÆ£
);

393 
	`XSëEº‹H™dÀr
(
xîr‹
);

394 
	`XUngøbSîvî
(
dpy
);

395 
	`zwm_œyout_¨ønge
();

396 
	`zwm_auto_võw
(0);

397 
	}
}

400 
Clõ¡
 *

401 
	$zwm_˛õ¡_gë
(
Wödow
 
w
) {

402 
Clõ¡
 *
c
;

404 
c
 = 
	`zwm_˛õ¡_hód
();

405 
c
 && (c->
wö
 !
w
 && c->
‰ame
 != w);

406 
c
 = 
	`zwm_˛õ¡_√xt
(c));

407  
c
;

408 
	}
}

411 
	$zwm_˛õ¡_cou¡
(){

412  (
zwm_˛õ¡
->
cou¡
);

413 
	}
}

415 
Boﬁ


416 
	$zwm_˛õ¡_visibÀ
(
Clõ¡
 *
c
)

418  
c
->
°©e
 =
N‹mÆSèã
 &&

419 
c
->
võw
 =
cuºít_võw
 &&

420 
c
->
ty≥
 =
ZíN‹mÆWödow
;

421 
	}
}

428 
	$zwm_˛õ¡_w¨p
(
Clõ¡
 *
c
)

430 if(
c
) {

431 
	`XSñe˘I≈ut
(
dpy
, 
c
->
wö
, 
Såu˘uªNŸifyMask
 | 
Pr›îtyCh™geMask
 );

432 
	`XW¨pPoöãr
(
dpy
, 
N⁄e
, 
c
->
wö
, 0, 0, 0, 0, c->
w
 / 2, c->
h
 / 2);

434 
	`zwm_evít_Êush_x11
(
E¡îWödowMask
);

435 
	`XSñe˘I≈ut
(
dpy
, 
c
->
wö
, 
Såu˘uªNŸifyMask
 | 
Pr›îtyCh™geMask
 | 
E¡îWödowMask
);

437 
	}
}

440 
	$zwm_˛õ¡_focus
(
Clõ¡
 *
c
)

442 if(!
c
 || (¯&& !
	`zwm_˛õ¡_visibÀ
(c))){

444 
c
 = 
	`zwm_˛õ¡_hód
();

445 
c
 && !
	`zwm_˛õ¡_visibÀ
(c))

447 
c
 = 
	`zwm_˛õ¡_√xt
(c);

452 i‡(
£l
 && sñ !
c
) {

453 
£l
->
focu£d
 = 
FÆ£
;

454 
	`gøbbuâ⁄s
(
£l
, 
FÆ£
);

455 
	`zwm_˛õ¡_upd©e_dec‹©i⁄
(
£l
);

456 
	`zwm_evít_emô
(
ZíClõ¡UnFocus
, 
£l
);

460 if(
c
) {

461 
	`gøbbuâ⁄s
(
c
, 
True
);

462 
£l
 = 
c
;

463 
c
->
focu£d
 = 
True
;

465 
	`XSëI≈utFocus
(
dpy
, 
c
->
wö
, 
RevîtToPoöãrRoŸ
, 
CuºítTime
);

466 
	`zwm_˛õ¡_upd©e_dec‹©i⁄
(
c
);

467 
	`zwm_evít_emô
(
ZíClõ¡Focus
, 
c
);

469 
	`XSëI≈utFocus
(
dpy
, 
roŸ
, 
RevîtToPoöãrRoŸ
, 
CuºítTime
);

471 
	}
}

474 
	$zwm_˛õ¡_øi£
(
Clõ¡
 *
c
)

476 
	`XRai£Wödow
(
dpy
, 
c
->
‰ame
);

477 
	`XRai£Wödow
(
dpy
, 
c
->
wö
);

478 
c
->
°©e
 = 
N‹mÆSèã
;

479 
c
->
võw
 = 
cuºít_võw
;

480 
	`zwm_˛õ¡_unb™
(
c
);

481 
	`zwm_œyout_¨ønge
();

482 
	`zwm_˛õ¡_upd©e_dec‹©i⁄
(
c
);

483 
	`zwm_evít_emô
(
ZíClõ¡Sèã
, 
c
);

484 
	}
}

487 
	$gøb_⁄e_buâ⁄
(
Wödow
 
wö
, 
buâ⁄
)

489 
modifõrs
[] = { 0, 
LockMask
, 
numlockmask
,Çumlockmask|LockMask };

490 
j
;

492 
j
 = 0; j < (
modifõrs
)/(); j++) {

493 
	`XGøbBuâ⁄
(
dpy
, 
buâ⁄
, 
MODKEY
 | 
modifõrs
[
j
], 
wö
, 
FÆ£
,

494 
BUTTONMASK
, 
GøbModeAsync
, 
GøbModeSync
,

495 
N⁄e
, None);

497 
	}
}

500 
	$gøbbuâ⁄s
(
Clõ¡
 *
c
, 
Boﬁ
 
focu£d
) {

501 if(
focu£d
) {

502 
	`XUngøbBuâ⁄
(
dpy
, 
AnyBuâ⁄
, 
AnyModifõr
, 
c
->
wö
);

503 
	`gøb_⁄e_buâ⁄
(
c
->
wö
, 
Buâ⁄1
);

504 
	`gøb_⁄e_buâ⁄
(
c
->
wö
, 
Buâ⁄2
);

505 
	`gøb_⁄e_buâ⁄
(
c
->
wö
, 
Buâ⁄3
);

507 
	`XGøbBuâ⁄
(
dpy
, 
AnyBuâ⁄
, 
AnyModifõr
, 
c
->
wö
, 
FÆ£
, 
BUTTONMASK
,

508 
GøbModeAsync
, 
GøbModeSync
, 
N⁄e
, None);

510 
	}
}

513 
	$zwm_˛õ¡_movîesize
(
Clõ¡
 *
c
, 
x
, 
y
, 
w
, 
h
)

515 
XWödowCh™ges
 
wc
;

518 if(
w
 <0 || 
h
 <= 0)

523 
c
->
x
 = 
wc
.x = x;

524 
c
->
y
 = 
wc
.y = y;

525 
c
->
w
 = 
wc
.
width
 = w;

526 
c
->
h
 = 
wc
.
height
 = h;

527 
wc
.
b‹dî_width
 = 
c
->
b‹dî
;

529 
	`XC⁄figuªWödow
(
dpy
, 
c
->
wö
, 
CWX
 | 
CWY
 | 
CWWidth
 | 
CWHeight
 | 
CWB‹dîWidth
, &
wc
);

531 
wc
.
height
 = 
h
 + 20;

532 
wc
.
height
 = 
y
 - 20;

533 
	`XC⁄figuªWödow
(
dpy
, 
c
->
‰ame
, 
CWX
 | 
CWY
 | 
CWWidth
 | 
CWHeight
 | 
CWB‹dîWidth
, &
wc
);

535 
	`zwm_˛õ¡_£nd_c⁄figuª
(
c
);

537 
	`zwm_evít_emô
(
ZíClõ¡Resize
, 
c
);

538 
	`XMoveResizeWödow
(
dpy
, 
c
->
‰ame
, c->
x
, c->
y
-20, c->
w
, 20);

539 
	`XSync
(
dpy
, 
FÆ£
);

541 
	}
}

544 
	$zwm_˛õ¡_fuŒs¸ìn
(
Clõ¡
 *
c
)

546 
c
->
isÊﬂtög
 = 
True
;

547 
num_Êﬂtög
++;

548 
	`zwm_˛õ¡_movîesize
(
c
, 
s¸ìn
[0].
x
 - c->
b‹dî
,

549 
s¸ìn
[0].
y
 - 
c
->
b‹dî
,

550 
s¸ìn
[0].
w
 ,

551 
s¸ìn
[0].
h
 );

552 
	}
}

555 
	$zwm_˛õ¡_Êﬂt
(
Clõ¡
 *
c
)

557 
c
->
isÊﬂtög
 = 
True
;

558 
num_Êﬂtög
++;

559 
c
->
cﬁ‹
 = 
xcﬁ‹_Êﬂtög
;

560 
	}
}

564 
	$zwm_˛õ¡_mou£move
(
Clõ¡
 *
c
) {

565 
x1
, 
y1
, 
ocx
, 
ocy
, 
di
, 
nx
, 
ny
;

566 
dui
;

567 
Wödow
 
dummy
;

568 
XEvít
 
ev
;

569 
	`DBG_ENTER
();

571 
ocx
 = 
c
->
x
;

572 
ocy
 = 
c
->
y
;

573 if(
	`XGøbPoöãr
(
dpy
, 
roŸ
, 
FÆ£
, 
MOUSEMASK
, 
GøbModeAsync
, GrabModeAsync,

574 
N⁄e
, 
	`zwm_gë_curs‹
(
CurMove
), 
CuºítTime
Ë!
GøbSuc˚ss
)

578 
	`zwm_˛õ¡_Êﬂt
(
c
);

580 
	`XQuîyPoöãr
(
dpy
, 
roŸ
, &
dummy
, &dummy, &
x1
, &
y1
, &
di
, &di, &
dui
);

583 
	`XMaskEvít
(
dpy
, 
MOUSEMASK
 | 
ExposuªMask
 | 
Sub°ru˘uªRedúe˘Mask
, &
ev
);

584 
ev
.
ty≥
) {

585 
C⁄figuªReque°
:

586 
Expo£
:

587 
M≠Reque°
:

588 
	`zwm_evít_emô
(
ev
.
ty≥
, &ev);

590 
MŸi⁄NŸify
:

591 
	`XSync
(
dpy
, 
FÆ£
);

592 
nx
 = 
ocx
 + (
ev
.
xmŸi⁄
.
x
 - 
x1
);

593 
ny
 = 
ocy
 + (
ev
.
xmŸi⁄
.
y
 - 
y1
);

594 
	`zwm_˛õ¡_movîesize
(
c
, 
nx
, 
ny
, c->
w
, c->
h
);

597 } 
ev
.
ty≥
 !
Buâ⁄Rñó£
);

598 
	`XUngøbPoöãr
(
dpy
, 
CuºítTime
);

599 
	}
}

602 
	$zwm_˛õ¡_mou£ªsize
(
Clõ¡
 *
c
) {

603 
ocx
, 
ocy
;

604 
nw
, 
nh
;

605 
XEvít
 
ev
;

606 
	`DBG_ENTER
();

608 
ocx
 = 
c
->
x
;

609 
ocy
 = 
c
->
y
;

610 if(
	`XGøbPoöãr
(
dpy
, 
roŸ
, 
FÆ£
, 
MOUSEMASK
, 
GøbModeAsync
, GrabModeAsync,

611 
N⁄e
, 
	`zwm_gë_curs‹
(
CurResize
), 
CuºítTime
Ë!
GøbSuc˚ss
)

614 
	`zwm_˛õ¡_Êﬂt
(
c
);

616 
	`XW¨pPoöãr
(
dpy
, 
N⁄e
, 
c
->
wö
, 0, 0, 0, 0, c->
w
 + c->
b‹dî
 - 1, c->
h
 + c->border - 1);

618 
	`XMaskEvít
(
dpy
, 
MOUSEMASK
 | 
ExposuªMask
 | 
Sub°ru˘uªRedúe˘Mask
, &
ev
);

619 
ev
.
ty≥
) {

620 
C⁄figuªReque°
:

621 
Expo£
:

622 
M≠Reque°
:

623 
	`zwm_evít_emô
(
ev
.
ty≥
, &ev);

625 
MŸi⁄NŸify
:

626 
	`XSync
(
dpy
, 
FÆ£
);

627 if((
nw
 = 
ev
.
xmŸi⁄
.
x
 - 
ocx
 - 2 * 
c
->
b‹dî
 + 1) <= 0)

628 
nw
 = 1;

629 if((
nh
 = 
ev
.
xmŸi⁄
.
y
 - 
ocy
 - 2 * 
c
->
b‹dî
 + 1) <= 0)

630 
nh
 = 1;

631 
	`zwm_˛õ¡_movîesize
(
c
, c->
x
, c->
y
, 
nw
, 
nh
);

634 } 
ev
.
ty≥
 !
Buâ⁄Rñó£
);

635 
	`XW¨pPoöãr
(
dpy
, 
N⁄e
, 
c
->
wö
, 0, 0, 0, 0, c->
w
 + c->
b‹dî
 - 1,

636 
c
->
h
 + c->
b‹dî
 - 1);

637 
	`XUngøbPoöãr
(
dpy
, 
CuºítTime
);

638 
	`XCheckMaskEvít
(
dpy
, 
E¡îWödowMask
, &
ev
));

639 
	}
}

641 
Boﬁ


642 
	$i•rŸodñ
(
Clõ¡
 *
c
) {

643 
i
, 
n
;

644 
Atom
 *
¥Ÿocﬁs
;

645 
Boﬁ
 
ªt
 = 
FÆ£
;

647 if(
	`XGëWMPrŸocﬁs
(
dpy
, 
c
->
wö
, &
¥Ÿocﬁs
, &
n
)) {

648 
i
 = 0; !
ªt
 && i < 
n
; i++)

649 if(
¥Ÿocﬁs
[
i
] =
WM_DELETE_WINDOW
)

650 
ªt
 = 
True
;

651 
	`XFªe
(
¥Ÿocﬁs
);

653  
ªt
;

654 
	}
}

657 
	$zwm_˛õ¡_kûl
(
Clõ¡
 *
c
)

659 
XEvít
 
ev
;

661 if(!
c
) {

662 
c
 = 
£l
;

664 if(!
c
) {

669 if(
	`i•rŸodñ
(
c
)) {

670 
ev
.
ty≥
 = 
Clõ¡Mesßge
;

671 
ev
.
x˛õ¡
.
wödow
 = 
c
->
wö
;

672 
ev
.
x˛õ¡
.
mesßge_ty≥
 = 
WM_PROTOCOLS
;

673 
ev
.
x˛õ¡
.
f‹m©
 = 32;

674 
ev
.
x˛õ¡
.
d©a
.
l
[0] = 
WM_DELETE_WINDOW
;

675 
ev
.
x˛õ¡
.
d©a
.
l
[1] = 
CuºítTime
;

676 
	`XSídEvít
(
dpy
, 
c
->
wö
, 
FÆ£
, 
NoEvítMask
, &
ev
);

680 
	`XKûlClõ¡
(
dpy
, 
c
->
wö
);

682 
	}
}

685 
	$zwm_cuºít_võw
(
v
)

687 i‡(
v
 < 
num_võws
 && v !
cuºít_võw
) {

688 
cuºít_võw
 = 
v
;

689 
	`zwm_œyout_¨ønge
();

690 
	`zwm_˛õ¡_focus
(
NULL
);

691 
	`zwm_evít_emô
(
ZíVõw
, (*)
cuºít_võw
);

693 
	}
}

695 
	$zwm_auto_võw
(
v
)

697 
Clõ¡
 *
c
;

698 
max_võw
 = 0;

699 
mö_võw
 = 
v
;

700 
cuºít_cou¡
 = 0;

702 i‡(
c⁄fig
.
auto_võw
) {

703 
c
 = 
	`zwm_˛õ¡_hód
();

704 
c
 ;

705 
c
 = 
	`zwm_˛õ¡_√xt
(c))

707 
max_võw
 = 
c
->
võw
 > max_view ? c->view: max_view;

708 
mö_võw
 = 
c
->
võw
 < min_view ? c->view: min_view;

709 if(
c
->
võw
 =
cuºít_võw
)

711 
cuºít_cou¡
++;

715 
num_võws
 = 
max_võw
 + 1;

716 if(!
cuºít_cou¡
)

717 
	`zwm_cuºít_võw
(
mö_võw
);

719 
	}
}

722 
	$zwm_˛õ¡_£t_võw
(
Clõ¡
 *
c
, 
v
)

724 
c
->
võw
 = 
v
;

725 
	`zwm_˛õ¡_focus
(
NULL
);

726 
	`zwm_auto_võw
(
v
);

727 
	`zwm_œyout_¨ønge
();

728 
	`zwm_evít_emô
(
ZíClõ¡Võw
, 
c
);

729 
	}
}

732 
	$zwm_˛õ¡_upd©e_«me
(
Clõ¡
 *
c
)

734 if(!
	`zwm_x11_gë_ãxt_¥›îty
(
c
->
wö
, 
_NET_WM_NAME
, c->
«me
,  c->name))

735 
	`zwm_x11_gë_ãxt_¥›îty
(
c
->
wö
, 
WM_NAME
, c->
«me
,  c->name);

736 
	`zwm_evít_emô
(
ZíClõ¡Pr›îty
, 
c
);

737 
	`zwm_˛õ¡_upd©e_dec‹©i⁄
(
c
);

739 
	}
}

741 
Clõ¡
 *
	$zwm_˛õ¡_√xt_visibÀ
(
Clõ¡
 *
c
)

743 ; 
c
; c = 
	`zwm_˛õ¡_√xt
(c)) {

744 if(
	`zwm_˛õ¡_visibÀ
(
c
Ë&& !c->
isÊﬂtög
){

745  
c
;

748  
c
;

749 
	}
}

752 
	$zwm_˛õ¡_toggÀ_Êﬂtög
(
Clõ¡
 *
c
) {

753 if(!
c
){

754 
c
 = 
£l
;

755 i‡(!
c
) {

759 
c
->
isÊﬂtög
 = !c->isfloating;

760 
	`zwm_evít_emô
(
ZíClõ¡Flﬂtög
, 
c
);

762 if(
c
->
isÊﬂtög
){

763 
num_Êﬂtög
++;

764 
c
->
cﬁ‹
 = 
xcﬁ‹_Êﬂtög
;

765 
	`zwm_˛õ¡_movîesize
(
c
, c->
x
, c->
y
, c->
w
, c->
h
);

767 
num_Êﬂtög
--;

768 
c
->
cﬁ‹
 = 
xcﬁ‹_n‹mÆ
;

770 
	`zwm_œyout_¨ønge
();

771 
	}
}

773 
	$zwm_˛õ¡_¥iv©e_key
()

775  
¥ivcou¡
++;

776 
	}
}

778 
	$zwm_˛õ¡_£t_¥iv©e
(
Clõ¡
 *
c
, 
key
, *
d©a
)

780 
c
->
¥iv
[
key
] = 
d©a
;

781 
	}
}

783 *
	$zwm_˛õ¡_gë_¥iv©e
(
Clõ¡
 *
c
, 
key
)

785  
c
->
¥iv
[
key
];

786 
	}
}

788 
	$zwm_˛õ¡_num_Êﬂtög
()

790  
num_Êﬂtög
;

791 
	}
}

793 
	$zwm_˛õ¡_zoom
(c⁄° *
¨g
) {

794 
Clõ¡
 *
c
 = 
£l
;

795 if–
c
 =
	`zwm_˛õ¡_hód
()) {

796 
c
 = 
	`zwm_˛õ¡_√xt_visibÀ
(
	`zwm_˛õ¡_√xt
(c));

799 if(
c
) {

800 
	`zwm_evít_emô
(
ZíClõ¡Unm≠
, 
c
);

801 
	`zwm_˛õ¡_ªmove
(
c
);

802 
	`zwm_˛õ¡_push_hód
(
c
);

803 
	`zwm_œyout_¨ønge
();

804 
	`zwm_˛õ¡_focus
(
c
);

805 
	`zwm_˛õ¡_øi£
(
c
);

806 
	`zwm_˛õ¡_w¨p
(
c
);

807 
	`zwm_evít_emô
(
ZíClõ¡M≠
, 
c
);

809 
	}
}

812 
	$zwm_focus_¥ev
(c⁄° *
¨g
) {

813 
Clõ¡
 *
c
;

815 if(!
£l
) {

816 
	`zwm_˛õ¡_focus
(
NULL
);

820 
c
 = 
	`zwm_˛õ¡_¥ev
(
£l
);

821 
c
 && !
	`zwm_˛õ¡_visibÀ
(c);

822 
c
 = 
	`zwm_˛õ¡_¥ev
(c));

823 if(!
c
) {

824 
c
 = 
	`zwm_˛õ¡_èû
();

825 
c
 && !
	`zwm_˛õ¡_visibÀ
(c);

826 
c
 = 
	`zwm_˛õ¡_¥ev
(c));

829 if(
c
) {

830 
	`zwm_˛õ¡_øi£
(
c
);

831 
	`zwm_˛õ¡_focus
(
c
);

832 
	`zwm_˛õ¡_w¨p
(
c
);

834 
	}
}

837 
	$zwm_focus_√xt
(c⁄° *
¨g
) {

838 
Clõ¡
 *
c
;

840 if(!
£l
) {

841 
	`zwm_˛õ¡_focus
(
NULL
);

845 
c
 = 
	`zwm_˛õ¡_√xt
(
£l
);

846 
c
 && !
	`zwm_˛õ¡_visibÀ
(c);

847 
c
 = 
	`zwm_˛õ¡_√xt
(c));

848 if(!
c
) {

849 
c
 = 
	`zwm_˛õ¡_hód
();

850 
c
 && !
	`zwm_˛õ¡_visibÀ
(c); c = 
	`zwm_˛õ¡_√xt
(c));

853 if(
c
) {

854 
	`zwm_˛õ¡_øi£
(
c
);

855 
	`zwm_˛õ¡_focus
(
c
);

856 
	`zwm_˛õ¡_w¨p
(
c
);

858 
	}
}

	@cursor.c

2 
	~"zwm.h
"

4 
Curs‹
 
	gcurs‹
[
CurLa°
];

7 
	$zwm_öô_curs‹
(
Di•œy
 *
dpy
)

9 
curs‹
[
CurN‹mÆ
] = 
	`XCª©eF⁄tCurs‹
(
dpy
, 
XC_À·_±r
);

10 
curs‹
[
CurResize
] = 
	`XCª©eF⁄tCurs‹
(
dpy
, 
XC_sizög
);

11 
curs‹
[
CurMove
] = 
	`XCª©eF⁄tCurs‹
(
dpy
, 
XC_Êeur
);

12 
	}
}

15 
	$zwm_‰ì_curs‹s
(
Di•œy
 *
dpy
)

17 
	`XFªeCurs‹
(
dpy
, 
curs‹
[
CurN‹mÆ
]);

18 
	`XFªeCurs‹
(
dpy
, 
curs‹
[
CurResize
]);

19 
	`XFªeCurs‹
(
dpy
, 
curs‹
[
CurMove
]);

20 
	}
}

22 
Curs‹


23 
	$zwm_gë_curs‹
(
ZíCurs‹
 
c
)

25  
curs‹
[
c
];

26 
	}
}

	@events.c

1 
	~"zwm.h
"

3 
	#SNAP
 1

	)

6 
	$buâ⁄¥ess
(
XEvít
 *
e
) {

7 
Clõ¡
 *
c
;

8 
XBuâ⁄Pªs£dEvít
 *
ev
 = &
e
->
xbuâ⁄
;

9 
	`DBG_ENTER
();

11 if((
c
 = 
	`zwm_˛õ¡_gë
(
ev
->
wödow
))) {

12 
	`zwm_˛õ¡_focus
(
c
);

16 if(
ev
->
buâ⁄
 =
Buâ⁄1
) {

17 
	`zwm_˛õ¡_øi£
(
c
);

18 
	`zwm_˛õ¡_mou£move
(
c
);

20 if(
ev
->
buâ⁄
 =
Buâ⁄2
) {

21 
	`zwm_˛õ¡_toggÀ_Êﬂtög
(
c
);

23 if(
ev
->
buâ⁄
 =
Buâ⁄3
 ) {

24 
	`zwm_˛õ¡_mou£ªsize
(
c
);

27 
	}
}

30 
	$m≠pögnŸify
(
XEvít
 *
e
) {

31 
XM≠pögEvít
 *
ev
 = &
e
->
xm≠pög
;

32 
	`DBG_ENTER
();

34 
	`XRe‰eshKeybﬂrdM≠pög
(
ev
);

37 
	}
}

40 
	$m≠ªque°
(
XEvít
 *
e
) {

41 
XWödowAâribuãs
 
wa
;

42 
XM≠Reque°Evít
 *
ev
 = &
e
->
xm≠ªque°
;

43 
	`DBG_ENTER
();

45 if(!
	`XGëWödowAâribuãs
(
dpy
, 
ev
->
wödow
, &
wa
))

47 if(
wa
.
ovîride_ªdúe˘
)

49 if(!
	`zwm_˛õ¡_gë
(
ev
->
wödow
)) {

50 
	`zwm_˛õ¡_m™age
(
ev
->
wödow
, &
wa
);

52 
Clõ¡
 *
c
;

53 
c
 = 
	`zwm_˛õ¡_gë
(
ev
->
wödow
);

54 
	`zwm_˛õ¡_focus
(
c
);

56 
	}
}

59 
	$c⁄figuªnŸify
(
XEvít
 *
e
) {

60 
XC⁄figuªEvít
 *
ev
 = &
e
->
xc⁄figuª
;

62 if(
ev
->
wödow
 =
roŸ
 &&

63 (
ev
->
width
 !
s¸ìn
[0].
w
 ||Év->
height
 !s¸ìn[0].
h
)) {

64 
	`DBG_ENTER
();

65 
s¸ìn
[0].
w
 = 
ev
->
width
;

66 
s¸ìn
[0].
h
 = 
ev
->
height
;

67 
	`zwm_upd©e_s¸ìn_geomëry
();

69 
	}
}

72 
	$c⁄figuªªque°
(
XEvít
 *
e
) {

73 
Clõ¡
 *
c
;

74 
XC⁄figuªReque°Evít
 *
ev
 = &
e
->
xc⁄figuªªque°
;

75 
XWödowCh™ges
 
wc
;

76 
	`DBG_ENTER
();

78 
c
 = 
	`zwm_˛õ¡_gë
(
ev
->
wödow
);

79 if(
c
 && c->
ty≥
 =
ZíN‹mÆWödow
) {

81 if–
c
->
isÊﬂtög
 ) {

83 if(
ev
->
vÆue_mask
 & 
CWX
)

84 
c
->
x
 = 
ev
->x;

85 if(
ev
->
vÆue_mask
 & 
CWY
)

86 
c
->
y
 = 
ev
->y;

87 if(
ev
->
vÆue_mask
 & 
CWWidth
)

88 
c
->
w
 = 
ev
->
width
;

89 if(
ev
->
vÆue_mask
 & 
CWHeight
)

90 
c
->
h
 = 
ev
->
height
;

91 if((
c
->
x
 + c->
w
Ë> 
s¸ìn
[0].w && c->
isÊﬂtög
)

92 
c
->
x
 = 
s¸ìn
[0].
w
 / 2 - c->w / 2;

93 if((
c
->
y
 + c->
h
Ë> 
s¸ìn
[0].h && c->
isÊﬂtög
)

94 
c
->
y
 = 
s¸ìn
[0].
h
 / 2 - c->h / 2;

96 if((
ev
->
vÆue_mask
 & (
CWX
 | 
CWY
))

97 && !(
ev
->
vÆue_mask
 & (
CWWidth
 | 
CWHeight
)))

98 
	`zwm_˛õ¡_£nd_c⁄figuª
(
c
);

100 if(
	`zwm_˛õ¡_visibÀ
(
c
))

101 
	`XMoveResizeWödow
(
dpy
, 
c
->
wö
, c->
x
, c->
y
, c->
w
, c->
h
);

103 
	`zwm_˛õ¡_£nd_c⁄figuª
(
c
);

104 if(!
	`zwm_˛õ¡_visibÀ
(
c
))

105 
	`zwm_˛õ¡_øi£
(
c
);

109 
wc
.
x
 = 
ev
->x;

110 
wc
.
y
 = 
ev
->y;

111 
wc
.
width
 = 
ev
->width;

112 
wc
.
height
 = 
ev
->height;

113 
wc
.
b‹dî_width
 = 
ev
->border_width;

114 
wc
.
siblög
 = 
ev
->
above
;

115 
wc
.
°ack_mode
 = 
ev
->
dëaû
;

116 
	`XC⁄figuªWödow
(
dpy
, 
ev
->
wödow
,Év->
vÆue_mask
, &
wc
);

119 if(
c
)

121 
	`zwm_evít_emô
(
ZíClõ¡C⁄figuª
,
c
);

124 
	`XSync
(
dpy
, 
FÆ£
);

126 
	}
}

129 
	$de°roynŸify
(
XEvít
 *
e
) {

130 
Clõ¡
 *
c
;

131 
XDe°royWödowEvít
 *
ev
 = &
e
->
xde°roywödow
;

132 
	`DBG_ENTER
();

134 if((
c
 = 
	`zwm_˛õ¡_gë
(
ev
->
wödow
)))

135 
	`zwm_˛õ¡_unm™age
(
c
);

136 
	}
}

139 
	$ÀavíŸify
(
XEvít
 *
e
) {

140 
XCrossögEvít
 *
ev
 = &
e
->
x¸ossög
;

141 
	`DBG_ENTER
();

143 if((
ev
->
wödow
 =
roŸ
Ë&& !ev->
ßme_s¸ìn
) {

146 
	}
}

149 
	$íã∫Ÿify
(
XEvít
 *
e
) {

150 
Clõ¡
 *
c
;

151 
XCrossögEvít
 *
ev
 = &
e
->
x¸ossög
;

152 
	`DBG_ENTER
();

154 if(
ev
->
mode
 !
NŸifyN‹mÆ
 ||Év->
dëaû
 =
NŸifyIn„ri‹
)

157 if((
c
 = 
	`zwm_˛õ¡_gë
(
ev
->
wödow
)))

158 
	`zwm_˛õ¡_focus
(
c
);

159 
	}
}

162 
	$¥›îtynŸify
(
XEvít
 *
e
) {

163 
Clõ¡
 *
c
;

164 
Wödow
 
å™s
;

165 
XPr›îtyEvít
 *
ev
 = &
e
->
x¥›îty
;

166 
	`DBG_ENTER
();

168 if(
ev
->
°©e
 =
Pr›îtyDñëe
)

170 if((
c
 = 
	`zwm_˛õ¡_gë
(
ev
->
wödow
))){

171 
ev
->
©om
) {

173 
XA_WM_TRANSIENT_FOR
:

174 
	`XGëTønsõ¡F‹Höt
(
dpy
, 
ev
->
wödow
, &
å™s
);

176 if((
	`zwm_˛õ¡_gë
(
å™s
Ë!
NULL
))

177 
	`zwm_œyout_¨ønge
();

179 
XA_WM_NORMAL_HINTS
:

183 if(
ev
->
©om
 =
_NET_WM_NAME
 ||

184 
ev
->
©om
 =
WM_NAME
)

185 
	`zwm_˛õ¡_upd©e_«me
(
c
);

188 
	}
}

192 
	$unm≠nŸify
(
XEvít
 *
e
) {

193 
Clõ¡
 *
c
;

194 
XUnm≠Evít
 *
ev
 = &
e
->
xunm≠
;

195 
	`DBG_ENTER
();

197 if((
c
 = 
	`zwm_˛õ¡_gë
(
ev
->
wödow
)))

198 
	`zwm_˛õ¡_unm™age
(
c
);

200 
	}
}

202 
key¥ess
(
XEvít
 *
e
);

203 
Boﬁ
 
	gru¬ög
 = 
True
;

206 
	$zwm_evít_Êush_x11
(
mask
)

208 
XEvít
 
ev
;

209 
	`XCheckMaskEvít
(
dpy
, 
mask
, &
ev
));

210 
	}
}

212 
	$zwm_evít
(
fd
, 
mode
, *
d©a
)

214 
XEvít
 
ev
;

215 
	`XPídög
(
dpy
)) {

216 
	`XNextEvít
(
dpy
, &
ev
);

217 if(
ev
.
ty≥
 < 
LASTEvít
) {

218 
	`zwm_evít_emô
(
ev
.
ty≥
, &ev);

220 
	`zwm_evít_emô
(
ZíX11Evít
, &
ev
);

223 
	`XSync
(
dpy
, 
FÆ£
);

224 
	}
}

226 
	$zwm_evít_lo›
() {

227 
	`XSync
(
dpy
, 
FÆ£
);

228 
	`zí_evíts_add
(
	`C⁄√˘i⁄Numbî
(
dpy
),
ZEN_EVT_READ
,
zwm_evít
, 
NULL
);

229 
	`zí_evíts_waô
();

230 
	}
}

232 
ZíEvítH™dÀr
 *
	gh™dÀrs
[
ZíMaxEvíts
];

234 
	$zwm_evít_öô
()

236 
i
;

237 
i
 = 0; i < 
ZíMaxEvíts
; i++)

239 
h™dÀrs
[
i
] = 
NULL
;

241 
	`zí_evíts_öô
();

242 
	`zwm_evít_ªgi°î
(
Buâ⁄Pªss
, (
ZíEFunc
)
buâ⁄¥ess
, 
NULL
);

243 
	`zwm_evít_ªgi°î
(
LóveNŸify
, (
ZíEFunc
)
ÀavíŸify
, 
NULL
);

244 
	`zwm_evít_ªgi°î
(
E¡îNŸify
, (
ZíEFunc
)
íã∫Ÿify
, 
NULL
);

245 
	`zwm_evít_ªgi°î
(
C⁄figuªReque°
, (
ZíEFunc
)
c⁄figuªªque°
, 
NULL
);

246 
	`zwm_evít_ªgi°î
(
C⁄figuªNŸify
, (
ZíEFunc
)
c⁄figuªnŸify
, 
NULL
);

247 
	`zwm_evít_ªgi°î
(
De°royNŸify
, (
ZíEFunc
)
de°roynŸify
, 
NULL
);

249 
	`zwm_evít_ªgi°î
(
M≠Reque°
, (
ZíEFunc
)
m≠ªque°
, 
NULL
);

250 
	`zwm_evít_ªgi°î
(
Unm≠NŸify
, (
ZíEFunc
)
unm≠nŸify
, 
NULL
);

251 
	`zwm_evít_ªgi°î
(
Pr›îtyNŸify
, (
ZíEFunc
)
¥›îtynŸify
, 
NULL
);

252 
	}
}

254 
	$zwm_evít_emô
(
ZíEvít
 
e
, *
p
)

256 
ZíEvítH™dÀr
 *
h
 = 
h™dÀrs
[
e
];

257 
h
){

258 
	`ZWM_DEBUG
("ZíEvíà%d h™dÀ∏%p\n",
e
, 
h
->
h™dÀr
);

259 
h
->
	`h™dÀr
(
p
, h->
¥iv
);

260 
h
 = h->
√xt
;

262 
	}
}

264 
	$zwm_evít_ªgi°î
(
ZíEvít
 
e
, 
ZíEFunc
 
f
, *
¥iv
)

266 
ZíEvítH™dÀr
 *
h
 = 
	`zwm_mÆloc
( (ZenEventHandler));

267 
h
->
h™dÀr
 =
f
 ;

268 
h
->
¥iv
 =Öriv;

269 
h
->
√xt
 = 
h™dÀrs
[
e
];

270 
h™dÀrs
[
e
] = 
h
;

271 
	}
}

	@ewmh.c

9 
	~"zwm.h
"

12 
˛õ¡mesßge
(
XEvít
 *
e
, *
p
) ;

16 
	$zwm_ewmh_£t_a˘ive_wödow
(
Clõ¡
 *
c
) {

18 
Wödow
 
wö
 = 
c
->win;

20 
	`zwm_x11_£t_©oms
(
roŸ
, 
_NET_ACTIVE_WINDOW
, 
XA_WINDOW
, &
wö
, 1);

21 
	}
}

25 
	$zwm_ewmh_£t_˛õ¡_li°
(*
p
, *
p2
) {

26 
Wödow
 
wös
[
	`zwm_˛õ¡_cou¡
()];

27 
Clõ¡
 *
c
;

28 
n
 ;

29 
	`zwm_x11_£t_©oms
(
roŸ
, 
_NET_CLIENT_LIST
, 
XA_WINDOW
, 
wös
, 0);

30 
n
 = 0, 
c
 = 
	`zwm_˛õ¡_hód
();

31 
c
;

32 
c
 = 
	`zwm_˛õ¡_√xt
(c))

34 
wös
[
n
++] = 
c
->
wö
;

36 
	`zwm_x11_£t_©oms
(
roŸ
, 
_NET_CLIENT_LIST
, 
XA_WINDOW
, 
wös
, 
n
);

37 
	`zwm_x11_£t_©oms
(
roŸ
, 
_NET_CLIENT_LIST_STACKING
, 
XA_WINDOW
, 
wös
, 
n
);

38 
	`XFlush
(
dpy
);

39 
	}
}

42 
	$zwm_ewmh_˛õ¡_unm≠
(
Clõ¡
 *
˛i
, *
p2
) {

43 
Wödow
 
wös
[
	`zwm_˛õ¡_cou¡
()-1];

44 
Clõ¡
 *
c
;

45 
n
;

47 
n
 = 0, 
c
 = 
	`zwm_˛õ¡_hód
();

48 
c
;

49 
c
 = 
	`zwm_˛õ¡_√xt
(c))

51 if(
c
 !
˛i
)

52 
wös
[
n
++] = 
c
->
wö
;

54 
	`zwm_x11_£t_©oms
(
roŸ
, 
_NET_CLIENT_LIST
, 
XA_WINDOW
, 
wös
, 
n
);

55 
	`zwm_x11_£t_©oms
(
roŸ
, 
_NET_CLIENT_LIST_STACKING
, 
XA_WINDOW
, 
wös
, 
n
);

56 
	`XFlush
(
dpy
);

57 
	}
}

61 
	$zwm_ewmh_£t_deskt›s
(*
p1
, *
p2
) {

62 
buf
[1024], *
pos
;

63 
i
;

64 
Àn
 = 0;

66 
	`zwm_x11_£t_©oms
(
roŸ
, 
_NET_NUMBER_OF_DESKTOPS
, 
XA_CARDINAL
, &
num_võws
, 1);

68 
pos
 = 
buf
;

69 
i
 = 0; i < 
num_võws
; i++) {

70 
pos
 +
	`•rötf
’os, "%d", 
i
);

71 
pos
++;

74 
Àn
 = 
pos
 - 
buf
;

76 
	`zwm_x11_£t_©oms
(
roŸ
,
_NET_DESKTOP_NAMES
, 
UTF8_STRING
,

77 (*Ë
buf
, 
Àn
);

79 
	`zwm_x11_£t_©oms
(
roŸ
, 
_NET_CURRENT_DESKTOP
, 
XA_CARDINAL
,

80 (*Ë&
cuºít_võw
, 1);

82 
	}
}

86 
	$zwm_ewmh_£t_wödow_deskt›
(
Clõ¡
 *
c
, *
p
) {

87 
Wödow
 
wö
 = 
c
->win;

88 
võw
 = 
c
->view;

89 
	`zwm_x11_£t_©oms
(
wö
,

90 
_NET_WM_DESKTOP
, 
XA_CARDINAL
,

91 &
võw
, 1);

92 
	}
}

96 
	$zwm_ewmh_˛õ¡_°©e
(
Clõ¡
 *
c
 , *
p
) {

97 
Wödow
 
wö
 = 
c
->win;

98 
d©a
[] = {
c
->
°©e
, 
N⁄e
};

100 
	`zwm_x11_£t_©oms
(
wö
, 
WM_STATE
, WM_STATE,

101 (*)
d©a
, 2);

102 
	}
}

106 
	$zwm_ewmh_£t_wödow_›acôy
(
Wödow
 
wö
, 
›acôy
) {

107 
o
 =()–
›acôy
 * 0xFFFFFFFF);

108 i‡(
›acôy
 == 1)

109 
	`XDñëePr›îty
 (
dpy
, 
wö
, 
_NET_WM_WINDOW_OPACITY
);

111 
	`zwm_x11_£t_©oms
(
wö
, 
_NET_WM_WINDOW_OPACITY
,

112 
XA_CARDINAL
, (*Ë&
o
, 1L);

113 
	}
}

117 
	$ewmh_¥o˚ss_°©e_©om
(
Clõ¡
 *
c
, 
Atom
 
°©e
, 
£t
) {

118 if(
°©e
 =
_NET_WM_STATE_FULLSCREEN
) {

119 if(
£t
) {

120 
	`zwm_˛õ¡_fuŒs¸ìn
(
c
);

122 
c
->
isÊﬂtög
 = 
FÆ£
;

123 
	`zwm_œyout_movîesize
(
c
, c->
x
, c->
y
, c->
w
, c->
h
);

125 
	`zwm_œyout_¨ønge
();

126 
	`zwm_˛õ¡_øi£
(
c
);

127 
	`zwm_˛õ¡_focus
(
c
);

130 
	}
}

133 
	$˛õ¡mesßge
(
XEvít
 *
e
, *
p
) {

134 
XClõ¡MesßgeEvít
 *
ev
 = &
e
->
x˛õ¡
;

135 
Clõ¡
 *
c
;

137 if(
e
->
ty≥
 !
Clõ¡Mesßge
)

140 if(
ev
->
mesßge_ty≥
 =
_NET_ACTIVE_WINDOW
) {

141 
	#ZOOM_ON_ACTIVE


	)

142 #ifde‡
ZOOM_ON_ACTIVE


143 
c
 = 
	`zwm_˛õ¡_gë
(
ev
->
wödow
);;

144 if(
c
) {

145 
	`zwm_˛õ¡_ªmove
(
c
);

146 
	`zwm_˛õ¡_push_hód
(
c
);

147 
	`zwm_œyout_¨ønge
();

148 
	`zwm_˛õ¡_focus
(
c
);

149 
	`zwm_˛õ¡_øi£
(
c
);

150 
	`zwm_˛õ¡_w¨p
(
c
);

155 
c
 = 
	`zwm_˛õ¡_gë
(
ev
->
wödow
);

156 if(
c
) {

157 
	`zwm_˛õ¡_£t°©e
(
c
, 
N‹mÆSèã
);

158 
	`zwm_˛õ¡_øi£
(
c
);

159 
	`zwm_˛õ¡_focus
(
c
);

160 
Clõ¡
 *
ma°î
 = 
	`zwm_˛õ¡_√xt_visibÀ
(
	`zwm_˛õ¡_hód
());

161 if(
c
 !
ma°î
){

162 
	`zwm_˛õ¡_ªmove
(
c
);

163 
	`zwm_˛õ¡_ö£π_a·î
(
ma°î
,
c
);

167 } if(
ev
->
mesßge_ty≥
 =
WM_CHANGE_STATE
) {

169 
c
 = 
	`zwm_˛õ¡_gë
(
ev
->
wödow
);

170 if(
c
) {

171 
	`zwm_˛õ¡_£t°©e
(
c
, 
ev
->
d©a
.
l
[0]);

173 } if(
ev
->
mesßge_ty≥
 =
_NET_CURRENT_DESKTOP
) {

175 
cuºít_võw
 = 
ev
->
d©a
.
l
[0];

176 
	`zwm_œyout_¨ønge
();

177 
	`zwm_ewmh_£t_deskt›s
(
NULL
, NULL);

178 } if(
ev
->
mesßge_ty≥
 =
_NET_WM_DESKTOP
) {

180 
c
 = 
	`zwm_˛õ¡_gë
(
ev
->
wödow
);

181 if(
c
) {

182 
	`zwm_˛õ¡_£t_võw
(
c
, 
ev
->
d©a
.
l
[0]);

183 
	`zwm_ewmh_£t_wödow_deskt›
(
c
, 
NULL
);

185 } if(
ev
->
mesßge_ty≥
 =
_NET_WM_STATE
) {

187 if((
c
 = 
	`zwm_˛õ¡_gë
(
ev
->
wödow
))){

188 
	`ewmh_¥o˚ss_°©e_©om
(
c
, (
Atom
Ë
ev
->
d©a
.
l
[1],Év->data.l[0]);

189 if(
ev
->
d©a
.
l
[2])

190 
	`ewmh_¥o˚ss_°©e_©om
(
c
, (
Atom
Ë
ev
->
d©a
.
l
[2],Év->data.l[0]);

194 
	}
}

197 
	$zwm_ewmh_öô
() {

198 
	`zwm_evít_ªgi°î
(
ZíClõ¡Focus
, (
ZíEFunc
)
zwm_ewmh_£t_a˘ive_wödow
, 
NULL
);

199 
	`zwm_evít_ªgi°î
(
ZíClõ¡M≠
, (
ZíEFunc
)
zwm_ewmh_£t_˛õ¡_li°
, 
NULL
);

200 
	`zwm_evít_ªgi°î
(
ZíClõ¡Unm≠
, (
ZíEFunc
)
zwm_ewmh_˛õ¡_unm≠
, 
NULL
);

201 
	`zwm_evít_ªgi°î
(
ZíVõw
, (
ZíEFunc
)
zwm_ewmh_£t_deskt›s
, 
NULL
);

202 
	`zwm_evít_ªgi°î
(
ZíClõ¡Võw
, (
ZíEFunc
)
zwm_ewmh_£t_wödow_deskt›
, 
NULL
);

203 
	`zwm_evít_ªgi°î
(
ZíClõ¡Võw
, (
ZíEFunc
)
zwm_ewmh_£t_deskt›s
, 
NULL
);

205 
	`zwm_evít_ªgi°î
(
Clõ¡Mesßge
, (
ZíEFunc
)
˛õ¡mesßge
, 
NULL
);

206 
	`zwm_ewmh_£t_deskt›s
(
NULL
, NULL);

207 
	}
}

	@keypress.c

1 
	~"zwm.h
"

7 c⁄° * 
	g©ãm±ög_to_gøb
 = 0;

8 
HŸKey
 
	tHŸKey
;

9 
	sHŸKey
 {

10 
KeySym
 
	mkeysym
;

11 
	mmodifõrs
;

12 
KeyFunc
 
	mfunc
;

13 c⁄° * 
	m¨gs
;

14 
HŸKey
 *
	m√xt
;

17 
HŸKey
 *
	gli°
 = 
NULL
;

20 
	$ªp‹t_key_gøb_îr‹
(
Di•œy
* 
d
, 
XEº‹Evít
* 
e
) {

21 c⁄° * 
ªas⁄
 = "unknownÑeason";

22 i‡(
e
->
îr‹_code
 =
BadAc˚ss
) {

23 
ªas⁄
 = "the key/button combination isálready in use byánother client";

24 } i‡(
e
->
îr‹_code
 =
BadVÆue
) {

25 
ªas⁄
 = "the key code was out ofÑange for XGrabKey";

26 } i‡(
e
->
îr‹_code
 =
BadWödow
) {

27 
ªas⁄
 = "theÑoot window weÖassedÅo XGrabKey was incorrect";

29 (Ë
d
;

30 
	`Ârötf
(
°dîr
, " couldn'àgøb key \"%s\": %†(XÉº‹ codê%i)\n", 
©ãm±ög_to_gøb
, 
ªas⁄
, 
e
->
îr‹_code
);

32 
	}
}

35 
	$∑r£_modifõrs
(* 
«me
, c⁄° * 
fuŒ_•ec
)

37 * 
£∑øt‹
 = 
	`°rchr
(
«me
, '-');

38 
modifõrs
 = 0;

39 i‡(
£∑øt‹
 !
NULL
) {

40 *
£∑øt‹
 = 0;

41 
modifõrs
 |
	`∑r£_modifõrs
(
£∑øt‹
+1, 
fuŒ_•ec
);

43 i‡(!
	`°rcmp
(
«me
, "Shift")) {

44 
modifõrs
 |
Shi·Mask
;

45 } i‡(!
	`°rcmp
(
«me
, "Control") || !strcmp(name, "Ctrl")) {

46 
modifõrs
 |
C⁄åﬁMask
;

47 } i‡(!
	`°rcmp
(
«me
, "Alt") || !strcmp(name, "Mod1")) {

48 
modifõrs
 |
Mod1Mask
;

49 } i‡(!
	`°rcmp
(
«me
, "Mod2")) {

50 
modifõrs
 |
Mod2Mask
;

51 } i‡(!
	`°rcmp
(
«me
, "Mod3")) {

52 
modifõrs
 |
Mod3Mask
;

53 } i‡(!
	`°rcmp
(
«me
, "Super") || !strcmp(name, "Mod4")) {

54 
modifõrs
 |
Mod4Mask
;

56 
	`Ârötf
(
°dîr
, "ign‹ög unknow¿modifõ∏\"%s\" i¿\"%s\"\n", 
«me
, 
fuŒ_•ec
);

58  
modifõrs
;

59 
	}
}

62 
	$key¥ess
(
XEvít
 *
e
, *
p
) {

63 
KeySym
 
keysym
;

64 
XKeyEvít
 *
ev
;

65 
HŸKey
* 
h
;

67 if(
e
->
ty≥
 !
KeyPªss
) {

71 
ev
 = &
e
->
xkey
;

73 
keysym
 = 
	`XKeycodeToKeysym
(
dpy
, (
KeyCode
)
ev
->
keycode
, 0);

75 
h
 = 
li°
; h !
NULL
; h = h->
√xt
) {

76 i‡(
h
->
keysym
 == keysym

77 && 
	`CLEANMASK
(
ev
->
°©e
Ë=CLEANMASK(
h
->
modifõrs
)) {

78 
h
->
	`func
(h->
¨gs
);

79 #ifde‡
DEBUG


84 
	}
}

86 
	$zwm_bödkey
(c⁄° * 
key«me
, *
f
, c⁄° *
¨g
)

88 * 
c›y
 = 
	`°rdup
(
key«me
);

89 
HŸKey
* 
√w_key
;

90 * 
unmodifõd
;

91 *
p
;

92 
modifõrs
 = 0;

93 
keymods
[] = { 0, 
LockMask
, 
numlockmask
,Çumlockmask|LockMask };

94 
i
;

96 
unmodifõd
 = 
	`°ºchr
(
c›y
, '-');

97 i‡(
unmodifõd
 =
NULL
) {

98 
unmodifõd
 = 
c›y
;

100 *
unmodifõd
 = 0;

101 ++ 
unmodifõd
;

102 
modifõrs
 = 
	`∑r£_modifõrs
(
c›y
, 
key«me
);

105 
√w_key
 = (
HŸKey
*Ë
	`zwm_mÆloc
((HotKey));

106 
√w_key
->
keysym
 = 
	`XSåögToKeysym
(
unmodifõd
);

107 
√w_key
->
modifõrs
 = modifiers;

108 
√w_key
->
func
 = 
f
;

109 
√w_key
->
¨gs
 = 
¨g
;

110 
√w_key
->
√xt
 = 
li°
;

111 
li°
 = 
√w_key
;

113 
p
 = 
	`XSëEº‹H™dÀr
(
ªp‹t_key_gøb_îr‹
);

115 
KeyCode
 
code
 = 
	`XKeysymToKeycode
(
dpy
, 
√w_key
->
keysym
);

116 
i
 = 0; i < (
keymods
)/(); i++) {

117 
	`XGøbKey
(
dpy
, 
code
, 
keymods
[
i
] | 
modifõrs
, 
roŸ
, 
True
,

118 
GøbModeAsync
, GrabModeAsync);

120 
	`‰ì
(
c›y
);

121 
	`XSëEº‹H™dÀr
(
p
);

122 
	}
}

124 
	$zwm_key¥ess_öô
()

126 
	`zwm_evít_ªgi°î
(
KeyPªss
, (
ZíEFunc
)
key¥ess
, 
NULL
);

127 
	`zwm_bödkey
("A…-Dñëe", 
zwm_˛õ¡_kûl
, 
NULL
);

128 
	`zwm_bödkey
("A…-g", 
zwm_•awn
, "browser");

129 
	`zwm_bödkey
("A…-j", 
zwm_focus_√xt
, 
NULL
);

130 
	`zwm_bödkey
("A…-k", 
zwm_focus_¥ev
, 
NULL
);

131 
	`zwm_bödkey
("A…-m", 
zwm_•awn
, "mail");

132 
	`zwm_bödkey
("A…-n", 
zwm_•awn
, "news");

133 
	`zwm_bödkey
("A…-p", 
zwm_•awn
, "dwmenu");

134 
	`zwm_bödkey
("A…-Rëu∫", 
zwm_˛õ¡_zoom
, 
NULL
);

135 
	`zwm_bödkey
("A…-Shi·-m", 
zwm_•awn
, "mixer");

136 
	`zwm_bödkey
("A…-Shi·-Rëu∫", 
zwm_•awn
, "shell");

137 
	`zwm_bödkey
("A…-Shi·-•a˚", 
zwm_˛õ¡_toggÀ_Êﬂtög
, 
NULL
);

138 
	`zwm_bödkey
("A…-•a˚", 
zwm_œyout_£t
, 
NULL
);

139 
	`zwm_bödkey
("A…-Tab", 
zwm_œyout_cy˛e
, 
NULL
);

140 
	`zwm_bödkey
("Cål-A…-Dñëe", 
zwm_•awn
, "sudo halt");

141 
	`zwm_bödkey
("Cål-A…-l", 
zwm_•awn
, "standby");

142 
	`zwm_bödkey
("Cål-A…-q", 
exô
, 
NULL
);

143 
	`zwm_bödkey
("Cål-A…-Rëu∫", 
zwm_˛õ¡_ic⁄ify
, 
NULL
);

144 
	`zwm_bödkey
("Cål-A…-r", 
zwm_ª°¨t
, 
NULL
);

145 
	`zwm_bödkey
("Cål-Shi·-Rëu∫", 
zwm_•awn
, "simshell");

146 
	`zwm_bödkey
("A…-F11", 
zwm_∑√l_toggÀ
, 
NULL
);

147 
	`zwm_bödkey
("A…-F10", 
zwm_exec
, "windowlab");

148 
	}
}

	@layouts.c

2 
	~"zwm.h
"

4 
	gZíLayout
;

5 
ZíLayout
 
	tZíLayout
;

7 
	sZíLayout


9 
ZíLFunc
 
	mh™dÀr
;

10 
	m«me
[64];

11 
ZíLayout
 *
	m√xt
;

14 
ZíLayout
 *
	gœyouts
 = 
NULL
;

15 
ZíLayout
 *
	g£l_œyout
 = 
NULL
;

17 c⁄° *
	$zwm_cuºít_œyout
()

19  
£l_œyout
->
«me
;

20 
	}
}

22 
	$zwm_œyout_movîesize
(
Clõ¡
 *
c
, 
x
, 
y
, 
w
, 
h
)

24 
c
->
x
 = x;

25 
c
->
y
 = y;

26 
c
->
w
 = w;

27 
c
->
h
 = h;

28 
	}
}

30 
	$zwm_œyout_™im©e
()

32 
i
;

33 
Clõ¡
 *
c
;

34 
c
 = 
	`zwm_˛õ¡_hód
();

35 
c
;

36 
c
 = 
	`zwm_˛õ¡_√xt
(c)) {

38 if(
c⁄fig
.
™im_°ïs
 && !
c
->
nﬂnim
 && 
	`zwm_˛õ¡_visibÀ
(c) ){

39 
c
->
dx
 = (c->
x
 - c->
ox
)/
c⁄fig
.
™im_°ïs
;

40 
c
->
dy
 = (c->
y
 - c->
oy
)/
c⁄fig
.
™im_°ïs
;

41 
c
->
dw
 = (c->
w
 - c->
ow
)/
c⁄fig
.
™im_°ïs
;

42 
c
->
dh
 = (c->
h
 - c->
oh
)/
c⁄fig
.
™im_°ïs
;

44 
	`XMoveResizeWödow
(
dpy
, 
c
->
wö
, c->
ox
, c->
oy
, c->
w
, c->
h
);

45 
	`XMoveResizeWödow
(
dpy
, 
c
->
‰ame
, c->
ox
, c->
oy
-20, c->
w
, 20);

46 
	`XSync
(
dpy
, 
FÆ£
);

49 
i
 = 0; i<
c⁄fig
.
™im_°ïs
; i++){

50 
c
 = 
	`zwm_˛õ¡_hód
();

51 
c
;

52 
c
 = 
	`zwm_˛õ¡_√xt
(c)) {

53 if(!
c
->
nﬂnim
 && 
	`zwm_˛õ¡_visibÀ
(c)){

54 
c
->
ox
 +c->
dx
;

55 
c
->
oy
 +c->
dy
;

56 
c
->
ow
 +c->
dw
;

57 
c
->
oh
 +c->
dh
;

58 
	`XMoveWödow
(
dpy
, 
c
->
wö
, c->
ox
, c->
oy
);

59 
	`XMoveWödow
(
dpy
, 
c
->
‰ame
, c->
ox
, c->
oy
-20);

60 
	`XSync
(
dpy
, 
FÆ£
);

65 
c
 = 
	`zwm_˛õ¡_hód
();

66 
c
;

67 
c
 = 
	`zwm_˛õ¡_√xt
(c)) {

68 i‡(
c
->
nﬂnim
) {

69 
	`XMoveResizeWödow
(
dpy
, 
c
->
wö
, c->
x
, c->
y
, c->
w
, c->
h
);

70 
	`XSync
(
dpy
, 
FÆ£
);

72 
	`XMoveResizeWödow
(
dpy
, 
c
->
‰ame
, c->
x
, c->
y
-20, c->
w
, 20);

73 
	`zwm_˛õ¡_upd©e_dec‹©i⁄
(
c
);

76 
	}
}

78 
	$zwm_œyout_¨ønge
()

80 
Clõ¡
 *
c
;

81 
i
 = 0;

82 
c
 = 
	`zwm_˛õ¡_hód
();

83 
c
;

84 
c
 = 
	`zwm_˛õ¡_√xt
(c)) {

85 
c
->
nﬂnim
 = 1;

86 
c
->
™im_°ïs
 = 
c⁄fig
.anim_steps;

87 
c
->
ox
 = c->
x
;

88 
c
->
oy
 = c->
y
;

89 
c
->
ow
 = c->
w
;

90 
c
->
oh
 = c->
h
;

91 if(
	`zwm_˛õ¡_visibÀ
(
c
)) {

92 
	`zwm_˛õ¡_unb™
(
c
);

93 
c
->
sid
 = 
i
++;

95 
c
->
sid
 = 0;

99 
£l_œyout
->
	`h™dÀr
();

100 
	#DOANIM


	)

101 #ifde‡
DOANIM


102 
	`zwm_œyout_™im©e
();

104 
c
 = 
	`zwm_˛õ¡_hód
();

105 
c
;

106 
c
 = 
	`zwm_˛õ¡_√xt
(c)) {

107 
	`zwm_˛õ¡_movîesize
(
c
, c->
x
, c->
y
, c->
w
, c->
h
);

108 
	`zwm_˛õ¡_upd©e_dec‹©i⁄
(
c
);

111 
	}
}

113 
	$zwm_œyout_ªgi°î
(
ZíLFunc
 
f
, *
«me
)

115 
ZíLayout
 *
l
 = 
	`zwm_mÆloc
( (ZenLayout));

116 
l
->
h™dÀr
 = 
f
 ;

117 
	`°r˝y
(
l
->
«me
 ,Çame);

118 
l
->
√xt
 = 
œyouts
;

119 
œyouts
 = 
l
;

120 
£l_œyout
 = 
l
;

121 
	}
}

123 
	$zwm_œyout_√xt
()

125 if(
£l_œyout
)

126 
£l_œyout
 = sñ_œyout->
√xt
;

128 if(!
£l_œyout
 || !£l_œyout->
√xt
){

129 
£l_œyout
 = 
œyouts
;

131 
	}
}

133 
	$zwm_œyout_£t
(c⁄° *
«me
)

135 
ZíLayout
 *
l
 = 
NULL
;

136 i‡(
«me
) {

137 
l
 = 
œyouts
;

138 
l
)

140 if(
	`°rcmp
(
l
->
«me
,Çame) == 0)

142 
l
 =Ü->
√xt
;

146 if(
l
)

148 
£l_œyout
 = 
l
;

150 
	`zwm_œyout_√xt
();

152 
	`zwm_evít_emô
(
ZíLayoutCh™ge
, 
£l_œyout
->
«me
);

153 
	`zwm_œyout_¨ønge
();

154 
	}
}

157 
	$œyout_Êﬂtög
() {

158 
Clõ¡
 *
c
;

159 
c
 = 
	`zwm_˛õ¡_hód
();

160 
c
;

161 
c
 = 
	`zwm_˛õ¡_√xt
(c)) {

162 if(
	`zwm_˛õ¡_visibÀ
(
c
)) {

163 
	`zwm_˛õ¡_unb™
(
c
);

164 
	`zwm_˛õ¡_movîesize
(
c
, c->
x
, c->
y
, c->
w
, c->
h
);

166 
	`zwm_˛õ¡_b™
(
c
);

169 
	}
}

171 
	gmb
 = 0;

173 
	#ZWMBORDER
 (
mb
 * 
s¸ìn
[0].
w
)

	)

176 
	$max_¨ønge
() {

177 
Clõ¡
 *
c
;

178 
Clõ¡
 *
£c⁄d
 = 
NULL
;

179 
i
 = 0, 
j
 = 0;

181  
c
 = 
	`zwm_˛õ¡_hód
(); c && 
j
 =0; c = 
	`zwm_˛õ¡_√xt
(c)) {

182 if(
	`zwm_˛õ¡_visibÀ
(
c
Ë&& !c->
isÊﬂtög
 && !c->
isb™√d
){

183 
w
 = 
s¸ìn
[
i
].w - ()(
ZWMBORDER
*2Ë- 2*
c
->
b‹dî
 ;

184 
h
 = 
s¸ìn
[
i
].h - ()(
ZWMBORDER
*2Ë- 2*
c
->
b‹dî
 -(20*
c⁄fig
.
show_tôÀ
) ;

185 
x
 = 
s¸ìn
[
i
].x + 
ZWMBORDER
;

186 
y
 = 
s¸ìn
[
i
].y + 
ZWMBORDER
 + (20*
c⁄fig
.
show_tôÀ
);

187 
c
->
nﬂnim
 = 0;

188 
	`zwm_œyout_movîesize
(
c
, 
x
, 
y
 , 
w
, 
h
);

189 
j
++;

190 if(
i
 < 
s¸ìn_cou¡
-1)i++;

195 
i
 = 0; 
c
; c = 
	`zwm_˛õ¡_√xt
(c)) {

196 if(
	`zwm_˛õ¡_visibÀ
(
c
Ë&& !c->
isÊﬂtög
 && !c->
isb™√d
){

197 if(!
£c⁄d
) {

198 
£c⁄d
 = 
c
;

201 
c
->
nﬂnim
 = 0;

202 
w
 = 
s¸ìn
[
i
].w - ()(
ZWMBORDER
*2Ë- 2*
c
->
b‹dî
 ;

203 
h
 = 
s¸ìn
[
i
].h - ()(
ZWMBORDER
*2Ë- 2*
c
->
b‹dî
 - (20*
c⁄fig
.
show_tôÀ
) ;

204 
x
 = 
s¸ìn
[
i
].x + 
ZWMBORDER
;

205 
y
 = 
s¸ìn
[
i
].y + 
ZWMBORDER
 + (20*
c⁄fig
.
show_tôÀ
);

206 
	`zwm_œyout_movîesize
(
c
, 
x
 + 
s¸ìn
[
i
].
w
, 
y
, w, 
h
 );

208 if(
i
 < 
s¸ìn_cou¡
-1)i++;

211 if(
£c⁄d
){

212 
£c⁄d
->
nﬂnim
 = 1;

213 
w
 = 
s¸ìn
[
i
].w - ()(
ZWMBORDER
*2Ë- 2*
£c⁄d
->
b‹dî
 ;

214 
h
 = 
s¸ìn
[
i
].h - ()(
ZWMBORDER
*2Ë- 2*
£c⁄d
->
b‹dî
 - (20*
c⁄fig
.
show_tôÀ
);

215 
x
 = 
s¸ìn
[
i
].x + 
ZWMBORDER
;

216 
y
 = 
s¸ìn
[
i
].y + 
ZWMBORDER
 + (20*
c⁄fig
.
show_tôÀ
);

219 
	`zwm_œyout_movîesize
(
£c⁄d
, 
x
 - 
s¸ìn
[
i
].
w
, 
y
 - 0*s¸ìn[i].
h
, w, h );

221 
	}
}

224 
	$grid
() {

225 
i
, 
cx
, 
cy
, 
cw
, 
ch
, 
aw
, 
ah
, 
ax
=0, 
cﬁs
, 
rows
;

226 
Clõ¡
 *
c
;

227 
n
 = 0;

229 
c
 = 
	`zwm_˛õ¡_√xt_visibÀ
(
	`zwm_˛õ¡_hód
());

230 
c
;

231 
c
 = 
	`zwm_˛õ¡_√xt
(c)) {

233 if(
	`zwm_˛õ¡_visibÀ
(
c
Ë&& !c->
isÊﬂtög
) {

234 
c
->
nﬂnim
 = 0;

235 
n
++;

239 
c
 = 
	`zwm_˛õ¡_√xt_visibÀ
(
	`zwm_˛õ¡_hód
());

241 if(
s¸ìn_cou¡
 > 1 && 
c
)

243 
	`zwm_˛õ¡_movîesize
(
c
, 
s¸ìn
[0].
x
, s¸ìn[0].
y
,

244 
s¸ìn
[0].
w
 - 2*
c⁄fig
.
b‹dî_width
,

245 
s¸ìn
[0].
h
 - 2*
c⁄fig
.
b‹dî_width
);

246 
c
 = 
	`zwm_˛õ¡_√xt_visibÀ
(
	`zwm_˛õ¡_√xt
(c));

247 
ax
 = 
s¸ìn
[1].
x
;

248 
n
--;

252 
rows
 = 0;Ñow†<
n
/2;Ñows++)

253 if(
rows
*row†>
n
)

255 
cﬁs
 = (
rows
 && (row†- 1Ë*Ñow†>
n
) ?Ñows - 1 :Ñows;

258 
ch
 = 
s¸ìn
[0].
h
 / (
rows
 ?Ñows : 1);

259 
cw
 = 
s¸ìn
[0].
w
 / (
cﬁs
 ? cols : 1);

261 
i
 = 0; 
c
; c = 
	`zwm_˛õ¡_√xt
(c)) {

262 if(
	`zwm_˛õ¡_visibÀ
(
c
Ë&& !c->
isÊﬂtög
){

263 
cx
 = 
ax
 + (
i
 / 
rows
Ë* 
cw
;

264 
cy
 = (
i
 % 
rows
Ë* 
ch
 + 
s¸ìn
[0].
y
;

266 
ah
 = ((
i
 + 1Ë% 
rows
 =0Ë? 
s¸ìn
[0].
h
 - 
ch
 *Ñows : 0;

267 
aw
 = (
i
 >
rows
 * (
cﬁs
 - 1)Ë? 
s¸ìn
[0].
w
 - 
cw
 * cols : 0;

268 
	`zwm_˛õ¡_movîesize
(
c
, 
cx
, 
cy
+20, 
cw
 - 2 + 
aw
 - 
c⁄fig
.
b‹dî_width
,

269 
ch
 - 2 + 
ah
 - 
c⁄fig
.
b‹dî_width
-20);

270 
i
++;

273 
	}
}

275 
	$zwm_œyout_cy˛e
(c⁄° *
¨g
) {

276 
Clõ¡
 *
c
, *
√xt
;

278 if(!
£l
) {

279 
	`zwm_˛õ¡_focus
(
NULL
);

283 
c
 = 
	`zwm_˛õ¡_√xt_visibÀ
(
	`zwm_˛õ¡_hód
());

284 
√xt
 = 
	`zwm_˛õ¡_√xt_visibÀ
(
c
);

285 
	`zwm_evít_emô
(
ZíClõ¡Unm≠
, 
c
);

286 
	`zwm_˛õ¡_ªmove
(
c
);

287 
	`zwm_˛õ¡_push_èû
(
c
);

288 
	`zwm_œyout_¨ønge
();

289 
	`zwm_˛õ¡_øi£
(
√xt
);

290 
	`zwm_˛õ¡_focus
(
√xt
);

291 
	`zwm_evít_emô
(
ZíClõ¡M≠
, 
c
);

292 
	}
}

296 
	$zwm_œyout_öô
()

298 
	`zwm_œyout_ªgi°î
((
ZíLFunc
)
œyout_Êﬂtög
, "floating");

299 
	`zwm_œyout_ªgi°î
((
ZíLFunc
)
grid
, "grid");

300 
	`zwm_œyout_ªgi°î
((
ZíLFunc
)
max_¨ønge
, "max");

301 
	}
}

	@panel.c

1 
	~"zwm.h
"

3 
Clõ¡
 *
	g∑√l
 = 
NULL
;

4 
	gﬁdy
;

6 
	$m≠
(
Clõ¡
 *
c
, *
¥iv
)

8 if(
c
->
ty≥
 =
ZíDockWödow
 && !
∑√l
)

10 
	`ZWM_DEBUG
("∑√»found %s\n", 
c
->
«me
);

11 
∑√l
 = 
c
;

12 
	`zwm_upd©e_s¸ìn_geomëry
();

14 
	}
}

16 
	$c⁄figuª
(
Clõ¡
 *
c
, *
¥iv
)

18 if(
c
 =
∑√l
)

20 
	`zwm_upd©e_s¸ìn_geomëry
();

22 
	}
}

25 
	$unm≠
(
Clõ¡
 *
c
, *
¥iv
)

27 if(
c
 =
∑√l
)

29 
∑√l
 = 
NULL
;

30 
	`zwm_upd©e_s¸ìn_geomëry
();

32 
	}
}

34 
	$ªs¸ìn
(c⁄° *
œyout
, *
¥iv
)

36 
i
;

37 
ZíGeom
 
vs¸ìn
 = {0,0,0,0};

38 
XWödowAâribuãs
 
wa
;

39 if(
∑√l
) {

40 
	`XGëWödowAâribuãs
(
dpy
, 
∑√l
->
wö
, &
wa
);

41 
∑√l
->
x
 = 
wa
.x;

42 
∑√l
->
y
 = 
wa
.y;

43 
∑√l
->
w
 = 
wa
.
width
;

44 
∑√l
->
h
 = 
wa
.
height
;

46 
i
 = 0; i< 
s¸ìn_cou¡
; i++){

47 
	`ZWM_DEBUG
("bef‹êªs¸ìn: %d, %d %d %d %d %d %d\n",
i
, 
∑√l
->
y
,Ö™ñ->
h
, 
s¸ìn
[i].
x
, s¸ìn[i].y, s¸ìn[i].
w
, screen[i].h);

48 if–
∑√l
->
h
 =
s¸ìn
[
i
].h)

50 if(
∑√l
->
x
+∑√l->
w
 < 
s¸ìn
[
i
].w/2) {

51 
s¸ìn
[
i
].
x
 = 
∑√l
->x +Ö™ñ->
w
;

53 
s¸ìn
[
i
].
w
 -
∑√l
->w;

55 if(
∑√l
->
y
 < 
s¸ìn
[
i
].
h
/2)

57 
s¸ìn
[
i
].
y
 = 
∑√l
->y +Ö™ñ->
h
;

60 if(
∑√l
->
y
+∑√l->
h
 >
s¸ìn
[
i
].y &&Öanel->y <= screen[i].h)

61 
s¸ìn
[
i
].
h
 -
∑√l
->h;

66 
i
 = 0; i< 
s¸ìn_cou¡
; i++){

67 if(
vs¸ìn
.
x
 >
s¸ìn
[
i
].x)

68 
vs¸ìn
.
x
 = 
s¸ìn
[
i
].x;

69 if(
vs¸ìn
.
y
 >
s¸ìn
[
i
].y)

70 
vs¸ìn
.
y
 = 
s¸ìn
[
i
].y;

72 
vs¸ìn
.
w
 +
s¸ìn
[
i
].w ;

74 if(
vs¸ìn
.
h
 < 
s¸ìn
[
i
].h)

75 
vs¸ìn
.
h
 = 
s¸ìn
[
i
].h;

77 
	`ZWM_DEBUG
–"VútuÆ S¸ì¿%d %d: %d+%d+%dx%d\n", 
i
,
s¸ìn_cou¡
,

78 
vs¸ìn
.
x
, vs¸ìn.
y
,

79 
vs¸ìn
.
w
 , vs¸ìn.
h
);

82 
c⁄fig
.
s¸ìn_x
 = 
vs¸ìn
.
x
;

83 
c⁄fig
.
s¸ìn_y
 = 
vs¸ìn
.
y
;

84 
c⁄fig
.
s¸ìn_w
 = 
vs¸ìn
.
w
;

85 
c⁄fig
.
s¸ìn_h
 = 
vs¸ìn
.
h
;

88 
	`ZWM_DEBUG
("ªs¸ìn: %d %d %d %d\n",
s¸ìn
[0].
x
, s¸ìn[0].
y
, s¸ìn[0].
w
, s¸ìn[0].
h
);

89 
	}
}

91 
	$zwm_∑√l_toggÀ
(c⁄° *
¨gs
)

93 if(
∑√l
){

94 if(
∑√l
->
y
 >0 &&Ö™ñ->y <(
s¸ìn
[0].y + s¸ìn[0].
h
))

96 
ﬁdy
 = 
∑√l
->
y
;

97 
	`zwm_˛õ¡_movîesize
(
∑√l
,Ö™ñ->
x
, 10000,Ö™ñ->
w
,Ö™ñ->
h
);

99 
	`zwm_˛õ¡_movîesize
(
∑√l
,Ö™ñ->
x
, 
ﬁdy
,Ö™ñ->
w
,Ö™ñ->
h
);

101 
	`zwm_upd©e_s¸ìn_geomëry
();

103 
	}
}

105 
	$zwm_∑√l_öô
()

107 
	`zwm_evít_ªgi°î
(
ZíClõ¡Unm≠
, (
ZíEFunc
)
unm≠
, 
NULL
);

108 
	`zwm_evít_ªgi°î
(
ZíClõ¡C⁄figuª
, (
ZíEFunc
)
c⁄figuª
, 
NULL
);

109 
	`zwm_evít_ªgi°î
(
ZíClõ¡M≠
, (
ZíEFunc
)
m≠
, 
NULL
);

110 
	`zwm_evít_ªgi°î
(
ZíS¸ìnSize
, (
ZíEFunc
)
ªs¸ìn
, 
NULL
);

111 
	}
}

	@user.c

1 
	~"zwm.h
"

6 
Clõ¡
 *
	$zwm_˛õ¡_£l_√xt
()

8 
Clõ¡
 *
c
;

10 if(!
£l
) {

11  
NULL
;

14 
c
 = 
	`zwm_˛õ¡_√xt
(
£l
);

15 
c
 ;

16 
c
 = 
	`zwm_˛õ¡_√xt
(c));

17 if(!
c
) {

18 
c
 = 
	`zwm_˛õ¡_hód
();

19 
c
 ;

20 
c
 = 
	`zwm_˛õ¡_√xt
(c));

22  
c
;

23 
	}
}

27 
	$ic⁄ify
(c⁄° **
¨g
, *
d©a
) {

28 if(
£l
)

29 
	`zwm_˛õ¡_ic⁄ify
(
£l
);

30 
	}
}

33 
	$£éayout
(c⁄° **
¨g
, *
d©a
) {

34 
	`zwm_œyout_£t
(
¨g
[0]);

35 
	}
}

39 
	$øi£_√xt
(c⁄° **
¨g
, *
d©a
) {

40 
Clõ¡
 *
c
 = 
	`zwm_˛õ¡_£l_√xt
();

41 if(
c
) {

42 
	`zwm_˛õ¡_øi£
(
c
);

43 
	`zwm_˛õ¡_focus
(
c
);

45 
	`zwm_œyout_¨ønge
();

46 
	}
}

49 
	$øi£_Æl
(c⁄° **
¨g
, *
d©a
) {

50 
Clõ¡
 *
c
;

51 
c
 = 
	`zwm_˛õ¡_hód
();

52 
c
 ;

53 
c
 = 
	`zwm_˛õ¡_√xt
(c))

56 
	`zwm_˛õ¡_øi£
(
c
);

58 
	`zwm_˛õ¡_focus
(
NULL
);

59 
	`zwm_œyout_¨ønge
();

60 
	}
}

63 
	$võw_¥ev
(c⁄° **
¨g
) {

64 
	`zwm_cuºít_võw
–(
cuºít_võw
 - 1Ë% 
num_võws
 );

65 
	}
}

68 
	$võw_√xt
(c⁄° **
¨g
) {

69 
	`zwm_cuºít_võw
–(
cuºít_võw
 + 1Ë% 
num_võws
 );

70 
	}
}

73 
	$võw
(c⁄° **
¨g
) {

74 
v
 = 
	`©oi
(
¨g
[0]);

75 
	`zwm_cuºít_võw
(
v
);

76 
	}
}

79 
	$£t_võw
(c⁄° **
¨g
) {

80 
v
 = 
	`©oi
(
¨g
[0]);

81 if(
£l
) {

82 
	`zwm_˛õ¡_£t_võw
(
£l
, 
v
);

84 
	}
}

87 
	$zwm_quô
(c⁄° **
¨g
) {

88 
	`exô
(0);

89 
	}
}

92 
	$toggÀÊﬂtög
(c⁄° **
¨g
) {

93 if(!
£l
)

96 
	`zwm_˛õ¡_toggÀ_Êﬂtög
(
£l
);

97 
	}
}

100 
	$movîesizëo
(c⁄° **
¨gv
, *
d©a
) {

101 
x
,
y
,
w
,
h
;

102 if(!
£l
)

105 
x
 = 
	`©oi
(
¨gv
[0]);

106 
y
 = 
	`©oi
(
¨gv
[1]);

107 
w
 = 
	`©oi
(
¨gv
[2]);

108 
h
 = 
	`©oi
(
¨gv
[3]);

110 
£l
->
isÊﬂtög
 = 
True
;

111 
	`zwm_˛õ¡_movîesize
(
£l
, 
x
, 
y
, 
w
, 
h
);

112 
	`zwm_˛õ¡_w¨p
(
£l
);

113 
	}
}

116 
	$movîesize
(c⁄° **
¨gv
, *
d©a
) {

117 
x
,
y
,
w
,
h
;

118 if(!
£l
)

121 
x
 = 
	`©oi
(
¨gv
[0]);

122 
y
 = 
	`©oi
(
¨gv
[1]);

123 
w
 = 
	`©oi
(
¨gv
[2]);

124 
h
 = 
	`©oi
(
¨gv
[3]);

126 
£l
->
isÊﬂtög
 = 
True
;

127 
	`zwm_˛õ¡_movîesize
(
£l
, sñ->
x
+x, sñ->
y
+y,

128 
£l
->
w
+w, sñ->
h
+h);

129 
	`zwm_˛õ¡_w¨p
(
£l
);

130 
	}
}

132 
	gshowög_grid
 = 0;

135 
	$keyªÀa£
(
XEvít
 *
e
)

137 if(
showög_grid
){

138 
Clõ¡
 *
c
 = 
£l
;

139 
showög_grid
 = 0;

140 if(
c
){

141 
	`zwm_˛õ¡_ªmove
(
c
);

142 
	`zwm_œyout_£t
("max");

143 
	`zwm_˛õ¡_push_hód
(
c
);

144 
	`zwm_œyout_¨ønge
();

146 
	`zwm_œyout_£t
("max");

147 
	`zwm_œyout_¨ønge
();

149 
	}
}

152 
	$showgrid
(c⁄° **
¨g
, *
d©a
) {

153 if(!
showög_grid
){

154 
	`zwm_œyout_£t
("grid");

155 
showög_grid
 = 1;

158 
	}
}

161 
	$focusma°î
(c⁄° **
¨g
, *
d©a
) {

162 
Clõ¡
 *
c
;

164 if(!
£l
) {

165 
	`zwm_˛õ¡_focus
(
NULL
);

169 
c
 = 
	`zwm_˛õ¡_√xt_visibÀ
(
	`zwm_˛õ¡_hód
());

170 if(
c
 && c !
£l
) {

171 
	`zwm_˛õ¡_ªmove
(
£l
);

172 
	`zwm_˛õ¡_ö£π_a·î
(
c
,
£l
);

173 
	`zwm_˛õ¡_øi£
(
c
);

174 
	`zwm_˛õ¡_focus
(
c
);

175 
	`zwm_˛õ¡_w¨p
(
c
);

177 
	}
}

182 
	$zwm_exec
(c⁄° *
¨g
) {

183 *
shñl
 = 
NULL
;

185 if(!
shñl
 && !(shñ»
	`gëív
("SHELL")))

186 
shñl
 = "/bin/sh";

187 if(!
¨g
)

191 if(
dpy
)

192 
	`˛o£
(
	`C⁄√˘i⁄Numbî
(
dpy
));

193 
	`£tsid
();

194 
	`exe˛p
–
shñl
, 
¨g
, (*)
NULL
);

195 
	`Ârötf
(
°dîr
, "zwm:Éxe˛ '%†-¯%s'", 
shñl
, 
¨g
);

196 
	`≥º‹
(" failed");

197 
	}
}

	@zwm.c

1 
	~"zwm.h
"

3 
	gs¸
;

4 
Di•œy
 *
	gdpy
;

5 
Wödow
 
	groŸ
;

7 
	gs¸ìn_cou¡
 = 1;

8 
	gnum_võws
 = 1;

9 
	gcuºít_võw
 = 0;

11 
	gnum_Êﬂtög
;

12 
	gb‹dî_w
;

14 
ZíGeom
 
	gs¸ìn
[
MAX_SCREENS
];

17 
	gxcﬁ‹_n‹mÆ
;

18 
	gxcﬁ‹_focus
;

19 
	gxcﬁ‹_Êﬂtög
;

20 
	gxcﬁ‹_bg
;

21 
	gnumlockmask
 = 0;

22 
GC
 
	ggc
;

23 
XF⁄tSåu˘
 *
	gf⁄t
;

26 
ZíC⁄fig
 
	gc⁄fig
 =

28 .
auto_võw
 = 1,

29 .
	gb‹dî_width
 = 1,

30 .
	gÁke_s¸ìns
 = 1,

31 .
	gs¸ìn_x
 = 0,

32 .
	gs¸ìn_y
 = 0,

33 .
	gs¸ìn_w
 = 0,

34 .
	gs¸ìn_h
 = 0,

35 .
	gn‹mÆ_b‹dî_cﬁ‹
 = "#9AA3BF",

36 .
	gfocus_b‹dî_cﬁ‹
 = "#F49435",

37 .
	gÊﬂtög_b‹dî_cﬁ‹
 = "#0B2882",

38 .
	gbg_cﬁ‹
 = "#F00",

39 .
	g›acôy
 = 0.9,

40 .
	g™im_°ïs
 = 30,

41 .
	gshow_tôÀ
 = 1,

45 
	$Ÿhî_wm_h™dÀr
(
Di•œy
 *
d•ly
, 
XEº‹Evít
 *
ì
) {

46 
	`Ârötf
(
°dîr
,"zwmÉror:ánother window manager isÑunning\n");

47 
	`exô
(-1);

49 
	}
}

52 
	$lﬂd_f⁄t
 (
XF⁄tSåu˘
 **
f⁄t_öfo
)

54 *
f⁄äame
 = "-*-terminus-bold-r-*-*-18-*-*-*-*-*-*-*";

56 i‡((*
f⁄t_öfo
 = 
	`XLﬂdQuîyF⁄t
 (
dpy
, 
f⁄äame
)Ë=
NULL
)

58 (Ë
	`Ârötf
 (
°dîr
, "zwm: Cannot open 9x15 font\n");

59 
	`exô
 (-1);

61 
	}
}

65 
	$zwm_check
() {

66 
	`XSëEº‹H™dÀr
(
Ÿhî_wm_h™dÀr
);

70 
	`XSñe˘I≈ut
(
dpy
, 
roŸ
, 
Sub°ru˘uªRedúe˘Mask
);

71 
	`XSync
(
dpy
, 
FÆ£
);

72 
	`XSëEº‹H™dÀr
(
NULL
);

73 
	}
}

76 
	$zwm_gë_cﬁ‹
(c⁄° *
cﬁ°r
)

78 
Cﬁ‹m≠
 
cm≠
 = 
	`DeÁu…Cﬁ‹m≠
(
dpy
, 
s¸
);

79 
XCﬁ‹
 
cﬁ‹
;

81 if(!
	`XAŒocNamedCﬁ‹
(
dpy
, 
cm≠
, 
cﬁ°r
, &
cﬁ‹
, &color))

83 
	`zwm_≥º‹
("unableÅoállocate color\n");

85  
cﬁ‹
.
pixñ
;

86 
	}
}

89 
	$zwm_upd©e_s¸ìn_geomëry
() {

90 
s¸ìn_cou¡
 = 0;

91 
i
;

92 
ZíGeom
 
vs¸ìn
 = {0, 0, 0, 0};

94 #ifde‡
CONFIG_XINERAMA


95 i‡–
	`XöîamaIsA˘ive
(
dpy
) )

97 
ns¸ìn
;

98 
XöîamaS¸ìnInfo
 * 
öfo
 = 
	`XöîamaQuîyS¸ìns
–
dpy
, &
ns¸ìn
 );

100 
	`ZWM_DEBUG
("Xinerama isáctive\n");

102  
i
 = 0; i< 
ns¸ìn
; i++ ) {

104 if–
i
 =0 || (
öfo
[i].
x_‹g
 != info[i-1].x_org)) {

106 
	`ZWM_DEBUG
–"S¸ì¿%d %d: (%dË%d+%d+%dx%d\n", 
i
,
s¸ìn_cou¡
,

107 
öfo
[
i
].
s¸ìn_numbî
,

108 
öfo
[
i
].
x_‹g
, info[i].
y_‹g
,

109 
öfo
[
i
].
width
, info[i].
height
 );

111 
s¸ìn
[
i
].
x
 = 
öfo
[i].
x_‹g
;

112 
s¸ìn
[
i
].
y
 = 
öfo
[i].
y_‹g
;

113 
s¸ìn
[
i
].
w
 = 
öfo
[i].
width
;

114 
s¸ìn
[
i
].
h
 = 
öfo
[i].
height
;

115 
s¸ìn_cou¡
++;

118 
	`XFªe
(
öfo
);

122 
	`ZWM_DEBUG
("Xinerama isÇotáctive\n");

123 
s¸ìn_cou¡
 = 1;

124 
s¸ìn
[0].
x
 = 0;

125 
s¸ìn
[0].
y
 = 0;

126 
s¸ìn
[0].
w
 = 
	`Di•œyWidth
(
dpy
, 
s¸
);

127 
s¸ìn
[0].
h
 = 
	`Di•œyHeight
(
dpy
, 
s¸
);

129 
	`ZWM_DEBUG
( "Screen %d %d: (%d) %d+%d+%dx%d\n", 0,1,

130 0, 
s¸ìn
[0].
x
, s¸ìn[0].
y
,

131 
s¸ìn
[0].
w
 , s¸ìn[0].
h
);

134 if(
s¸ìn_cou¡
 =1 && 
c⁄fig
.
Áke_s¸ìns
 == 2){

135 
s¸ìn
[0].
w
 = 
	`Di•œyWidth
(
dpy
, 
s¸
)/2;

137 
s¸ìn
[1].
x
 = 
	`Di•œyWidth
(
dpy
, 
s¸
)/2;

138 
s¸ìn
[1].
y
 = 0;

139 
s¸ìn
[1].
w
 = 
	`Di•œyWidth
(
dpy
, 
s¸
)/2;

140 
s¸ìn
[1].
h
 = 
	`Di•œyHeight
(
dpy
, 
s¸
);

141 
s¸ìn_cou¡
 = 2;

144 
i
 = 0; i< 
s¸ìn_cou¡
; i++){

145 if(
c⁄fig
.
s¸ìn_x
)

146 
s¸ìn
[
i
].
x
 = 
c⁄fig
.
s¸ìn_x
;

147 if(
c⁄fig
.
s¸ìn_y
)

148 
s¸ìn
[
i
].
y
 = 
c⁄fig
.
s¸ìn_y
;

149 if(
c⁄fig
.
s¸ìn_w
)

150 
s¸ìn
[
i
].
w
 = 
c⁄fig
.
s¸ìn_w
;

151 if(
c⁄fig
.
s¸ìn_h
)

152 
s¸ìn
[
i
].
h
 = 
c⁄fig
.
s¸ìn_h
;

153 
	`ZWM_DEBUG
–"S¸ì¿%d %d: %d+%d+%dx%d\n", 
i
,
s¸ìn_cou¡
,

154 
s¸ìn
[
i
].
x
, s¸ìn[i].
y
,

155 
s¸ìn
[
i
].
w
 , s¸ìn[i].
h
);

158 
i
 = 0; i< 
s¸ìn_cou¡
; i++){

159 if(
vs¸ìn
.
x
 >
s¸ìn
[
i
].x)

160 
vs¸ìn
.
x
 = 
s¸ìn
[
i
].x;

161 if(
vs¸ìn
.
y
 >
s¸ìn
[
i
].y)

162 
vs¸ìn
.
y
 = 
s¸ìn
[
i
].y;

164 
vs¸ìn
.
w
 +
s¸ìn
[
i
].w ;

166 if(
vs¸ìn
.
h
 < 
s¸ìn
[
i
].h)

167 
vs¸ìn
.
h
 = 
s¸ìn
[
i
].h;

169 
	`ZWM_DEBUG
–"VútuÆ S¸ì¿%d %d: %d+%d+%dx%d\n", 
i
,
s¸ìn_cou¡
,

170 
vs¸ìn
.
x
, vs¸ìn.
y
,

171 
vs¸ìn
.
w
 , vs¸ìn.
h
);

174 
c⁄fig
.
s¸ìn_x
 = 
vs¸ìn
.
x
;

175 
c⁄fig
.
s¸ìn_y
 = 
vs¸ìn
.
y
;

176 
c⁄fig
.
s¸ìn_w
 = 
vs¸ìn
.
w
;

177 
c⁄fig
.
s¸ìn_h
 = 
vs¸ìn
.
h
;

179 
	`zwm_evít_emô
(
ZíS¸ìnSize
, 
NULL
);

180 
	`zwm_œyout_¨ønge
();

181 
	}
}

184 
	$öô_numlock_mask
()

186 
i
, 
j
;

187 
XModifõrKeym≠
 *
modm≠
;

188 
modm≠
 = 
	`XGëModifõrM≠pög
(
dpy
);

189 
i
 = 0; i < 8; i++)

190 
j
 = 0; j < 
modm≠
->
max_key≥rmod
; j++) {

191 if(
modm≠
->
modifõrm≠
[
i
 * modm≠->
max_key≥rmod
 + 
j
]

192 =
	`XKeysymToKeycode
(
dpy
, 
XK_Num_Lock
))

193 
numlockmask
 = (1 << 
i
);

195 
	`XFªeModifõrm≠
(
modm≠
);

196 
	}
}

199 
	$zwm_öô
() {

200 
XSëWödowAâribuãs
 
swa
;

202 
	`XSëEº‹H™dÀr
(
xîr‹
);

205 
	`zwm_öô_©oms
();

206 
	`zwm_evít_öô
();

207 
	`zwm_œyout_öô
();

209 
	`zwm_öô_curs‹
(
dpy
);

211 
	`öô_numlock_mask
();

215 
	`zwm_ewmh_öô
();

216 
	`zwm_∑√l_öô
();

217 
	`zwm_key¥ess_öô
();

220 
	`zwm_upd©e_s¸ìn_geomëry
();

223 
swa
.
evít_mask
 = 
Sub°ru˘uªRedúe˘Mask
 |

224 
Sub°ru˘uªNŸifyMask
 |

225 
E¡îWödowMask
 |

226 
LóveWödowMask
 |

227 
ExposuªMask
|

228 
Pr›îtyCh™geMask
|

229 
Såu˘uªNŸifyMask
;

231 
swa
.
curs‹
 = 
	`zwm_gë_curs‹
(
CurN‹mÆ
);

233 
	`XCh™geWödowAâribuãs
(
dpy
, 
roŸ
, 
CWEvítMask
 | 
CWCurs‹
, &
swa
);

234 
	`XSñe˘I≈ut
(
dpy
, 
roŸ
, 
swa
.
evít_mask
);

237 
xcﬁ‹_n‹mÆ
 = 
	`zwm_gë_cﬁ‹
(
c⁄fig
.
n‹mÆ_b‹dî_cﬁ‹
);

238 
xcﬁ‹_focus
 = 
	`zwm_gë_cﬁ‹
(
c⁄fig
.
focus_b‹dî_cﬁ‹
);

239 
xcﬁ‹_Êﬂtög
 = 
	`zwm_gë_cﬁ‹
(
c⁄fig
.
Êﬂtög_b‹dî_cﬁ‹
);

240 
xcﬁ‹_bg
 = 
	`zwm_gë_cﬁ‹
(
c⁄fig
.
bg_cﬁ‹
);

241 
	`lﬂd_f⁄t
(&
f⁄t
);

242 
gc
 = 
	`XCª©eGC
(
dpy
, 
roŸ
, 0, 
NULL
);

243 
	`XSëF⁄t
 (
dpy
, 
gc
, 
f⁄t
->
fid
);

245 
	`zwm_•awn
("~/.zwm/init");

247 
	`zwm_˛õ¡_sˇn
();

248 
	}
}

251 
	$zwm_˛ónup
() {

253 
	`XUngøbKey
(
dpy
, 
AnyKey
, 
AnyModifõr
, 
roŸ
);

254 
	`zwm_‰ì_curs‹s
(
dpy
);

255 
	`XSëI≈utFocus
(
dpy
, 
PoöãrRoŸ
, 
RevîtToPoöãrRoŸ
, 
CuºítTime
);

256 
	`XSync
(
dpy
, 
FÆ£
);

257 
	}
}

260 
	$maö
(
¨gc
, *
¨gv
[]) {

261 
	`£éoˇÀ
(
LC_CTYPE
, "");

263 if(!(
dpy
 = 
	`XO≥nDi•œy
(
	`gëív
("DISPLAY"))))

265 
	`Ârötf
(
°dîr
,"zwm: cannot open display\n");

266 
	`exô
(-1);

269 
	`ZWM_DEBUG
("›í di•œy %s\n",
	`gëív
("DISPLAY"));

270 
s¸
 = 
	`DeÁu…S¸ìn
(
dpy
);

271 
roŸ
 = 
	`RoŸWödow
(
dpy
, 
s¸
);

273 
	`zwm_check
();

275 
	`zwm_öô
();

276 
	`zwm_evít_lo›
();

277 
	`zwm_˛ónup
();

279 
	`XClo£Di•œy
(
dpy
);

281 
	}
}

284 
	$zwm_≥º‹
(c⁄° *
°r
)

286 
	`Ârötf
(
°dîr
, 
°r
);

287 
	`exô
(-1);

288 
	}
}

292 
	$zwm_mÆloc
(
size_t
 
size
)

294 *
±r
 = 
	`ˇŒoc
(1, 
size
);

295 if(!
±r
){

296 
	`zwm_≥º‹
( "memoryállocation failure");

298  
±r
;

299 
	}
}

302 
	$zwm_‰ì
(*
p
)

304 
	`‰ì
(
p
);

305 
	}
}

308 
	$zwm_ª°¨t
(c⁄° *
p
) {

312 if(
dpy
)

313 
	`˛o£
(
	`C⁄√˘i⁄Numbî
(
dpy
));

314 
	`£tsid
();

315 
	`exe˛p
–"zwm", "", 
NULL
);

316 
	`Ârötf
(
°dîr
, "restart failed");

317 
	}
}

320 
	$zwm_•awn
(c⁄° *
cmd
)

322 c⁄° *
shñl
 = 
NULL
;

323 if(!(
shñl
 = 
	`gëív
("SHELL")))

324 
shñl
 = "/bin/sh";

325 if(!
cmd
)

329 if(
	`f‹k
() == 0) {

330 if(
	`f‹k
() == 0) {

331 if(
dpy
)

332 
	`˛o£
(
	`C⁄√˘i⁄Numbî
(
dpy
));

333 
	`£tsid
();

334 
	`exe˛
(
shñl
, shñl, "-c", 
cmd
, (*)
NULL
);

335 
	`Ârötf
(
°dîr
, "zwm:Éxe˛ '%†-¯%s' faûed (%s)", 
shñl
, 
cmd
, 
sys_îæi°
[
î∫o
]);

337 
	`exô
(0);

339 
	`waô
(0);

340 
	}
}

	@zwm.h

1 #i‚de‡
_ZWM_H


2 
	#_ZWM_H


	)

4 
	~<î∫o.h
>

5 
	~<limôs.h
>

6 
	~<loˇÀ.h
>

7 
	~<ªgex.h
>

8 
	~<°d¨g.h
>

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

12 
	~<sys/£À˘.h
>

13 
	~<sys/waô.h
>

14 
	~<uni°d.h
>

15 
	~<X11/curs‹f⁄t.h
>

16 
	~<X11/exãnsi⁄s/Xöîama.h
>

17 
	~<X11/keysymdef.h
>

18 
	~<X11/keysym.h
>

19 
	~<X11/X©om.h
>

20 
	~<X11/X.h
>

21 
	~<X11/Xlib.h
>

22 
	~<X11/X¥Ÿo.h
>

23 
	~<X11/Xutû.h
>

24 
	~<libzí/evíts.h
>

25 
	~<libzí/li°.h
>

28 
	mCurN‹mÆ
,

29 
	mCurResize
,

30 
	mCurMove
,

31 
	mCurLa°


32 } 
	tZíCurs‹
;

34 (*
	tKeyFunc
)(const *);

35 
	`zwm_öô_curs‹
(
Di•œy
 *
dpy
);

36 
	`zwm_‰ì_curs‹s
(
Di•œy
 *
dpy
);

37 
Curs‹
 
	`zwm_gë_curs‹
(
ZíCurs‹
 
c
);

38 
	`zwm_˛õ¡_zoom
(c⁄° *
¨g
);

40 
	#INIT_ATOM
(
«me
Ë
Atom
 
	)
name

41 
	~"©oms.h
"

42 #unde‡
INIT_ATOM


44 
	sZíGeom


46 
x
;

47 
y
;

48 
w
;

49 
h
;

52 
ZíGeom
 
	tZíGeom
;

53 
	#MAX_SCREENS
 32

	)

54 
ZíGeom
 
s¸ìn
[
MAX_SCREENS
];

55 
s¸ìn_cou¡
;

57 
b‹dî_w
;

58 
Boﬁ
 
ru¬ög
;

60 
	`zwm_≥º‹
(c⁄° *
°r
);

61 *
	`zwm_mÆloc
(
size_t
 
size
);

62 
	`zwm_‰ì
(*);

64 
Di•œy
 *
dpy
;

65 
Wödow
 
roŸ
;

66 
xcﬁ‹_n‹mÆ
;

67 
xcﬁ‹_focus
;

68 
xcﬁ‹_Êﬂtög
;

69 
xcﬁ‹_bg
;

70 
numlockmask
;

71 
num_˛õ¡s
;

77 
ZíN‹mÆWödow
,

78 
ZíDockWödow
,

79 
ZíDülogWödow
,

80 
ZíDeskt›Wödow


83 
Clõ¡
 
	tClõ¡
;

84 
	sClõ¡


86 
x
;

87 
y
;

88 
w
;

89 
h
;

90 
dx
;

91 
dy
;

92 
dw
;

93 
dh
;

94 
ox
;

95 
oy
;

96 
ow
;

97 
oh
;

98 
b‹dî
;

99 
cﬁ‹
;

100 
ob‹dî
;

101 
Wödow
 
wö
;

102 
Wödow
 
‰ame
;

103 
°©e
;

104 
focu£d
;

105 
ty≥
;

106 
võw
;

107 
sid
;

108 
nﬂnim
;

109 
™im_°ïs
;

110 
Boﬁ
 
isÊﬂtög
;

111 
Boﬁ
 
isb™√d
;

112 
«me
[256];

113 
ZíLi°Node
 
node
;

114 
Clõ¡
 *
√xt
;

115 
Clõ¡
 *
¥ev
;

116 *
¥iv
[0];

118 
GC
 
gc
;

119 
XF⁄tSåu˘
 *
f⁄t
;

120 
	`DECLARE_GLOBAL_LIST_FUNCTIONS
(
zwm_˛õ¡
,
Clõ¡
,
node
);

121 
Clõ¡
 *
£l
;

124 
Clõ¡
 *
	`zwm_˛õ¡_hód
();

125 
	`zwm_˛õ¡_ªmove
(
Clõ¡
 *
c
);

126 
	`zwm_˛õ¡_push_hód
(
Clõ¡
 *);

127 
	`zwm_˛õ¡_sˇn
();

128 
	`zwm_˛õ¡_m™age
(
Wödow
 
w
, 
XWödowAâribuãs
 *
wa
);

129 
	`zwm_˛õ¡_unm™age
(
Clõ¡
 *);

130 
	`zwm_˛õ¡_mou£move
(
Clõ¡
 *
c
);

131 
	`zwm_˛õ¡_mou£ªsize
(
Clõ¡
 *
c
);

132 
	`zwm_˛õ¡_focus
(
Clõ¡
 *
c
);

133 
	`zwm_˛õ¡_movîesize
(
Clõ¡
 *
c
, ,,,);

134 
	`zwm_˛õ¡_øi£
(
Clõ¡
 *
c
);

135 
	`zwm_˛õ¡_b™
(
Clõ¡
 *
c
);

136 
	`zwm_˛õ¡_unb™
(
Clõ¡
 *
c
);

137 
	`zwm_˛õ¡_£nd_c⁄figuª
(
Clõ¡
 *
c
);

138 
	`zwm_˛õ¡_upd©e_dec‹©i⁄
(
Clõ¡
 *
c
);

139 
Boﬁ
 
	`zwm_˛õ¡_visibÀ
(
Clõ¡
 *
c
);

140 
Clõ¡
 *
	`zwm_˛õ¡_√xt_visibÀ
(Clõ¡ *
c
);

141 
Clõ¡
 * 
	`zwm_˛õ¡_gë
(
Wödow
 
w
);

142 
	`zwm_˛õ¡_upd©e_«me
(
Clõ¡
 *);

143 
	`zwm_˛õ¡_ic⁄ify
(
Clõ¡
 *
c
);

144 
	`zwm_˛õ¡_w¨p
(
Clõ¡
 *
c
);

145 
	`zwm_˛õ¡_£t_võw
(
Clõ¡
 *
c
, 
v
);

146 
	`zwm_˛õ¡_£t°©e
(
Clõ¡
 *
c
, 
°©e
);

147 
	`zwm_˛õ¡_cou¡
();

148 
	`zwm_cuºít_võw
(
v
);

149 
	`zwm_˛õ¡_kûl
(
Clõ¡
 *
c
);

150 
	`zwm_˛õ¡_toggÀ_Êﬂtög
(
Clõ¡
 *
c
);

151 
	`zwm_˛õ¡_fuŒs¸ìn
(
Clõ¡
 *
c
);

152 
	`zwm_˛õ¡_¥iv©e_key
();

153 
	`zwm_˛õ¡_£t_¥iv©e
(
Clõ¡
 *
c
, 
key
, *
d©a
);

154 *
	`zwm_˛õ¡_gë_¥iv©e
(
Clõ¡
 *
c
, 
key
);

156 
	`zwm_öô_c⁄fig
();

157 
	`zwm_evít_lo›
();

158 
	`zwm_upd©e_s¸ìn_geomëry
();

160 
	`xîr‹
(
Di•œy
 *
dpy
, 
XEº‹Evít
 *
ì
);

162 
	`zwm_öô_©oms
();

166 
Atom
 
	`zwm_x11_gë_wödow_ty≥
(
Wödow
 
wö
);

167 
Atom
 
	`zwm_x11_gë_smÆl_©om
(
Wödow
 
wö
, Atom 
big©om
);

168 
Boﬁ
 
	`zwm_x11_check_©om
(
Wödow
 
wö
, 
Atom
 
big©om
, Atom 
smÆœtom
);

169 
Boﬁ
 
	`zwm_x11_£t_©oms
(
Wödow
 
w
, 
Atom
 
a
, Atom 
ty≥
, *
vÆ
, );

171 
	#BUTTONMASK
 (
Buâ⁄PªssMask
 | 
Buâ⁄Rñó£Mask
)

	)

172 
	#CLEANMASK
(
mask
Ë(mask & ~(
numlockmask
 | 
LockMask
))

	)

173 
	#MOUSEMASK
 (
BUTTONMASK
 | 
PoöãrMŸi⁄Mask
)

	)

175 
	#MODKEY
 
Mod1Mask


	)

177 #ifde‡
DEBUG


178 
	#DBG_ENTER
(Ë
	`¥ötf
("E¡î %s\n",
__FUNCTION__
)

	)

179 
	#ZWM_DEBUG
(
fmt
,
¨gs
...Ë
	`¥ötf
("%s:%d: "fmt,
__FUNCTION__
,
__LINE__
,##¨gs)

	)

181 
	#DBG_ENTER
()

	)

182 
	#ZWM_DEBUG
(
fmt
,
¨gs
...)

	)

187 
auto_võw
;

188 
b‹dî_width
;

189 
Áke_s¸ìns
;

190 
s¸ìn_x
;

191 
s¸ìn_y
;

192 
s¸ìn_w
;

193 
s¸ìn_h
;

195 c⁄° *
n‹mÆ_b‹dî_cﬁ‹
;

196 c⁄° *
focus_b‹dî_cﬁ‹
;

197 c⁄° *
Êﬂtög_b‹dî_cﬁ‹
;

198 c⁄° *
bg_cﬁ‹
;

200 
›acôy
;

201 
™im_°ïs
;

202 
show_tôÀ
;

203 } 
	tZíC⁄fig
;

205 
ZíC⁄fig
 
c⁄fig
;

207 
num_võws
;

208 
cuºít_võw
;

211 
	`zwm_∂ugö_lﬂd
(c⁄° **
¨gs
);

215 
ZíEvítPr›ag©e
,

216 
ZíEvítC⁄sume


223 
ZíClõ¡Focus
 = 
LASTEvít
,

224 
ZíClõ¡UnFocus
,

225 
ZíClõ¡Pr›îty
,

226 
ZíClõ¡M≠
,

227 
ZíClõ¡Unm≠
,

228 
ZíClõ¡Võw
,

229 
ZíClõ¡Sèã
,

230 
ZíClõ¡Damage
,

231 
ZíClõ¡Resize
,

232 
ZíClõ¡Flﬂtög
,

233 
ZíClõ¡C⁄figuª
,

234 
ZíVõw
,

235 
ZíLayoutCh™ge
,

236 
ZíX11Evít
,

237 
ZíS¸ìnSize
,

238 
ZíM™ageS¸ìn
,

239 
ZíAŒEvíts
,

240 
ZíMaxEvíts


241 }
	tZíEvít
;

243 (*
	tZíLFunc
)();

244 (*
	tZíEFunc
)(*, *);

245 (*
	tZíEFunc2
)(
	tZíEvít
, *, *);

247 
	`zwm_evít_öô
();

248 
	`zwm_evít_Êush_x11
(
mask
);

249 
	`zwm_evít_emô
(
ZíEvít
 
e
, *
p
);

250 
	`zwm_evít_ªgi°î
(
ZíEvít
 
e
, 
ZíEFunc
 
f
, *
¥iv
);

251 
ZíEvít
 
	`zwm_evít_by«me
(*
«me
);

254 
	`zwm_œyout_√xt
();

255 
	`zwm_œyout_öô
();

256 
	`zwm_œyout_ªgi°î
(
ZíLFunc
 
f
, *
«me
);

257 
	`zwm_œyout_¨ønge
();

258 
	`zwm_œyout_£t
(c⁄° *
«me
);

259 c⁄° *
	`zwm_cuºít_œyout
();

261 
Boﬁ
 
	`zwm_x11_gë_ãxt_¥›îty
(
Wödow
 
w
, 
Atom
 
©om
, *
ãxt
, 
size
);

263 (*
	tZíFunc
)(c⁄° **
	t¨g
, *);

264 
ZíFunc
 
	`zwm_u£r_func_gë
(c⁄° * 
«me
);

265 
	`zwm_u£r_func_add
(c⁄° * 
«me
, 
ZíFunc
 
func
);

266 
	`zwm_u£r_öô
();

267 
	#USE_ZENCONFIG


	)

268 #ifde‡
USE_ZENCONFIG


269 
	~<libzí/c⁄fig.h
>

272 
ZíTy≥I¡
, 
ZíTy≥Såög
, 
ZíTy≥Flﬂt
, 
ZíTy≥U£r
,

273 
ZíTy≥NONE


274 } 
	tZíC⁄figTy≥
 ;

276 
	`zwm_c⁄fig_add
(c⁄° * 
«me
, 
ZíC⁄figTy≥
 
ty≥
, *
addr
);

277 
	`zwm_˛õ¡_cou¡
();

278 
	`zwm_˛õ¡_num_Êﬂtög
();

279 
	`zwm_œyout_movîesize
(
Clõ¡
 *
c
, 
x
, 
y
, 
w
, 
h
);

281 
	`zwm_•awn
(c⁄° *
cmd
);

282 
	`zwm_bödkey
(c⁄° * 
key«me
, *
f
, c⁄° *
¨g
);

283 
	`zwm_ª°¨t
(const *);

284 
	`zwm_œyout_cy˛e
(c⁄° *
¨g
);

285 
	`zwm_focus_¥ev
(c⁄° *
¨g
) ;

286 
	`zwm_focus_√xt
(c⁄° *
¨g
) ;

287 
	`zwm_∑√l_toggÀ
(c⁄° *
¨gs
);

289 
	`zwm_ewmh_öô
();

290 
	`zwm_∑√l_öô
();

291 
	`zwm_key¥ess_öô
();

292 
	`zwm_exec
(c⁄° *
¨g
);

293 
ZíEvítH™dÀr
 
	tZíEvítH™dÀr
;

295 
	sZíEvítH™dÀr


297 
ZíEFunc
 
h™dÀr
;

298 
ZíEFunc2
 
h™dÀr2
;

299 *
¥iv
;

300 
ZíEvítH™dÀr
 *
√xt
;

	@/usr/include/X11/X.h

3 #i‚de‡
X_H


4 
	#X_H


	)

53 
	#X_PROTOCOL
 11

	)

54 
	#X_PROTOCOL_REVISION
 0

	)

63 #i‚de‡
_XSERVER64


64 #i‚de‡
_XTYPEDEF_XID


65 
	#_XTYPEDEF_XID


	)

66 
	tXID
;

68 #i‚de‡
_XTYPEDEF_MASK


69 
	#_XTYPEDEF_MASK


	)

70 
	tMask
;

72 #i‚de‡
_XTYPEDEF_ATOM


73 
	#_XTYPEDEF_ATOM


	)

74 
	tAtom
;

76 
	tVisuÆID
;

77 
	tTime
;

79 
	~<X11/Xmd.h
>

80 #i‚de‡
_XTYPEDEF_XID


81 
	#_XTYPEDEF_XID


	)

82 
CARD32
 
	tXID
;

84 #i‚de‡
_XTYPEDEF_MASK


85 
	#_XTYPEDEF_MASK


	)

86 
CARD32
 
	tMask
;

88 #i‚de‡
_XTYPEDEF_ATOM


89 
	#_XTYPEDEF_ATOM


	)

90 
CARD32
 
	tAtom
;

92 
CARD32
 
	tVisuÆID
;

93 
CARD32
 
	tTime
;

96 
XID
 
	tWödow
;

97 
XID
 
	tDøwabÀ
;

98 #i‚de‡
_XTYPEDEF_FONT


99 
	#_XTYPEDEF_FONT


	)

100 
XID
 
	tF⁄t
;

102 
XID
 
	tPixm≠
;

103 
XID
 
	tCurs‹
;

104 
XID
 
	tCﬁ‹m≠
;

105 
XID
 
	tGC⁄ãxt
;

106 
XID
 
	tKeySym
;

108 
	tKeyCode
;

114 #i‚de‡
N⁄e


115 
	#N⁄e
 0L

	)

118 
	#P¨ítRñ©ive
 1L

	)

121 
	#C›yFromP¨ít
 0L

	)

126 
	#PoöãrWödow
 0L

	)

127 
	#I≈utFocus
 1L

	)

129 
	#PoöãrRoŸ
 1L

	)

131 
	#AnyPr›îtyTy≥
 0L

	)

133 
	#AnyKey
 0L

	)

135 
	#AnyBuâ⁄
 0L

	)

137 
	#AŒTemp‹¨y
 0L

	)

139 
	#CuºítTime
 0L

	)

141 
	#NoSymbﬁ
 0L

	)

150 
	#NoEvítMask
 0L

	)

151 
	#KeyPªssMask
 (1L<<0)

	)

152 
	#KeyRñó£Mask
 (1L<<1)

	)

153 
	#Buâ⁄PªssMask
 (1L<<2)

	)

154 
	#Buâ⁄Rñó£Mask
 (1L<<3)

	)

155 
	#E¡îWödowMask
 (1L<<4)

	)

156 
	#LóveWödowMask
 (1L<<5)

	)

157 
	#PoöãrMŸi⁄Mask
 (1L<<6)

	)

158 
	#PoöãrMŸi⁄HötMask
 (1L<<7)

	)

159 
	#Buâ⁄1MŸi⁄Mask
 (1L<<8)

	)

160 
	#Buâ⁄2MŸi⁄Mask
 (1L<<9)

	)

161 
	#Buâ⁄3MŸi⁄Mask
 (1L<<10)

	)

162 
	#Buâ⁄4MŸi⁄Mask
 (1L<<11)

	)

163 
	#Buâ⁄5MŸi⁄Mask
 (1L<<12)

	)

164 
	#Buâ⁄MŸi⁄Mask
 (1L<<13)

	)

165 
	#Keym≠SèãMask
 (1L<<14)

	)

166 
	#ExposuªMask
 (1L<<15)

	)

167 
	#VisibûôyCh™geMask
 (1L<<16)

	)

168 
	#Såu˘uªNŸifyMask
 (1L<<17)

	)

169 
	#ResizeRedúe˘Mask
 (1L<<18)

	)

170 
	#Sub°ru˘uªNŸifyMask
 (1L<<19)

	)

171 
	#Sub°ru˘uªRedúe˘Mask
 (1L<<20)

	)

172 
	#FocusCh™geMask
 (1L<<21)

	)

173 
	#Pr›îtyCh™geMask
 (1L<<22)

	)

174 
	#Cﬁ‹m≠Ch™geMask
 (1L<<23)

	)

175 
	#Ow√rGøbBuâ⁄Mask
 (1L<<24)

	)

181 
	#KeyPªss
 2

	)

182 
	#KeyRñó£
 3

	)

183 
	#Buâ⁄Pªss
 4

	)

184 
	#Buâ⁄Rñó£
 5

	)

185 
	#MŸi⁄NŸify
 6

	)

186 
	#E¡îNŸify
 7

	)

187 
	#LóveNŸify
 8

	)

188 
	#FocusIn
 9

	)

189 
	#FocusOut
 10

	)

190 
	#Keym≠NŸify
 11

	)

191 
	#Expo£
 12

	)

192 
	#GøphicsExpo£
 13

	)

193 
	#NoExpo£
 14

	)

194 
	#VisibûôyNŸify
 15

	)

195 
	#Cª©eNŸify
 16

	)

196 
	#De°royNŸify
 17

	)

197 
	#Unm≠NŸify
 18

	)

198 
	#M≠NŸify
 19

	)

199 
	#M≠Reque°
 20

	)

200 
	#Rï¨ítNŸify
 21

	)

201 
	#C⁄figuªNŸify
 22

	)

202 
	#C⁄figuªReque°
 23

	)

203 
	#GøvôyNŸify
 24

	)

204 
	#ResizeReque°
 25

	)

205 
	#CúcuœãNŸify
 26

	)

206 
	#CúcuœãReque°
 27

	)

207 
	#Pr›îtyNŸify
 28

	)

208 
	#Sñe˘i⁄CÀ¨
 29

	)

209 
	#Sñe˘i⁄Reque°
 30

	)

210 
	#Sñe˘i⁄NŸify
 31

	)

211 
	#Cﬁ‹m≠NŸify
 32

	)

212 
	#Clõ¡Mesßge
 33

	)

213 
	#M≠pögNŸify
 34

	)

214 
	#GíîicEvít
 35

	)

215 
	#LASTEvít
 36

	)

221 
	#Shi·Mask
 (1<<0)

	)

222 
	#LockMask
 (1<<1)

	)

223 
	#C⁄åﬁMask
 (1<<2)

	)

224 
	#Mod1Mask
 (1<<3)

	)

225 
	#Mod2Mask
 (1<<4)

	)

226 
	#Mod3Mask
 (1<<5)

	)

227 
	#Mod4Mask
 (1<<6)

	)

228 
	#Mod5Mask
 (1<<7)

	)

233 
	#Shi·M≠Index
 0

	)

234 
	#LockM≠Index
 1

	)

235 
	#C⁄åﬁM≠Index
 2

	)

236 
	#Mod1M≠Index
 3

	)

237 
	#Mod2M≠Index
 4

	)

238 
	#Mod3M≠Index
 5

	)

239 
	#Mod4M≠Index
 6

	)

240 
	#Mod5M≠Index
 7

	)

246 
	#Buâ⁄1Mask
 (1<<8)

	)

247 
	#Buâ⁄2Mask
 (1<<9)

	)

248 
	#Buâ⁄3Mask
 (1<<10)

	)

249 
	#Buâ⁄4Mask
 (1<<11)

	)

250 
	#Buâ⁄5Mask
 (1<<12)

	)

252 
	#AnyModifõr
 (1<<15Ë

	)

259 
	#Buâ⁄1
 1

	)

260 
	#Buâ⁄2
 2

	)

261 
	#Buâ⁄3
 3

	)

262 
	#Buâ⁄4
 4

	)

263 
	#Buâ⁄5
 5

	)

267 
	#NŸifyN‹mÆ
 0

	)

268 
	#NŸifyGøb
 1

	)

269 
	#NŸifyUngøb
 2

	)

270 
	#NŸifyWhûeGøbbed
 3

	)

272 
	#NŸifyHöt
 1

	)

276 
	#NŸifyAn˚°‹
 0

	)

277 
	#NŸifyVútuÆ
 1

	)

278 
	#NŸifyIn„ri‹
 2

	)

279 
	#NŸifyN⁄löór
 3

	)

280 
	#NŸifyN⁄löórVútuÆ
 4

	)

281 
	#NŸifyPoöãr
 5

	)

282 
	#NŸifyPoöãrRoŸ
 6

	)

283 
	#NŸifyDëaûN⁄e
 7

	)

287 
	#VisibûôyUnobscuªd
 0

	)

288 
	#VisibûôyP¨tüŒyObscuªd
 1

	)

289 
	#VisibûôyFuŒyObscuªd
 2

	)

293 
	#Pœ˚OnT›
 0

	)

294 
	#Pœ˚OnBŸtom
 1

	)

298 
	#FamûyI¡î√t
 0

	)

299 
	#FamûyDEC√t
 1

	)

300 
	#FamûyChaos
 2

	)

301 
	#FamûyI¡î√t6
 6

	)

304 
	#FamûySîvîI¡î¥ëed
 5

	)

308 
	#Pr›îtyNewVÆue
 0

	)

309 
	#Pr›îtyDñëe
 1

	)

313 
	#Cﬁ‹m≠Unö°ÆÀd
 0

	)

314 
	#Cﬁ‹m≠In°ÆÀd
 1

	)

318 
	#GøbModeSync
 0

	)

319 
	#GøbModeAsync
 1

	)

323 
	#GøbSuc˚ss
 0

	)

324 
	#AÃódyGøbbed
 1

	)

325 
	#GøbInvÆidTime
 2

	)

326 
	#GøbNŸVõwabÀ
 3

	)

327 
	#GøbFrozí
 4

	)

331 
	#AsyncPoöãr
 0

	)

332 
	#SyncPoöãr
 1

	)

333 
	#RïœyPoöãr
 2

	)

334 
	#AsyncKeybﬂrd
 3

	)

335 
	#SyncKeybﬂrd
 4

	)

336 
	#RïœyKeybﬂrd
 5

	)

337 
	#AsyncBŸh
 6

	)

338 
	#SyncBŸh
 7

	)

342 
	#RevîtToN⁄e
 ()
N⁄e


	)

343 
	#RevîtToPoöãrRoŸ
 ()
PoöãrRoŸ


	)

344 
	#RevîtToP¨ít
 2

	)

350 
	#Suc˚ss
 0

	)

351 
	#BadReque°
 1

	)

352 
	#BadVÆue
 2

	)

353 
	#BadWödow
 3

	)

354 
	#BadPixm≠
 4

	)

355 
	#BadAtom
 5

	)

356 
	#BadCurs‹
 6

	)

357 
	#BadF⁄t
 7

	)

358 
	#BadM©ch
 8

	)

359 
	#BadDøwabÀ
 9

	)

360 
	#BadAc˚ss
 10

	)

369 
	#BadAŒoc
 11

	)

370 
	#BadCﬁ‹
 12

	)

371 
	#BadGC
 13

	)

372 
	#BadIDChoi˚
 14

	)

373 
	#BadName
 15

	)

374 
	#BadLígth
 16

	)

375 
	#BadIm∂emíèti⁄
 17

	)

377 
	#Fú°Exãnsi⁄Eº‹
 128

	)

378 
	#La°Exãnsi⁄Eº‹
 255

	)

387 
	#I≈utOuçut
 1

	)

388 
	#I≈utO∆y
 2

	)

392 
	#CWBackPixm≠
 (1L<<0)

	)

393 
	#CWBackPixñ
 (1L<<1)

	)

394 
	#CWB‹dîPixm≠
 (1L<<2)

	)

395 
	#CWB‹dîPixñ
 (1L<<3)

	)

396 
	#CWBôGøvôy
 (1L<<4)

	)

397 
	#CWWöGøvôy
 (1L<<5)

	)

398 
	#CWBackögSt‹e
 (1L<<6)

	)

399 
	#CWBackögPœ√s
 (1L<<7)

	)

400 
	#CWBackögPixñ
 (1L<<8)

	)

401 
	#CWOvîrideRedúe˘
 (1L<<9)

	)

402 
	#CWSaveUndî
 (1L<<10)

	)

403 
	#CWEvítMask
 (1L<<11)

	)

404 
	#CWD⁄tPr›ag©e
 (1L<<12)

	)

405 
	#CWCﬁ‹m≠
 (1L<<13)

	)

406 
	#CWCurs‹
 (1L<<14)

	)

410 
	#CWX
 (1<<0)

	)

411 
	#CWY
 (1<<1)

	)

412 
	#CWWidth
 (1<<2)

	)

413 
	#CWHeight
 (1<<3)

	)

414 
	#CWB‹dîWidth
 (1<<4)

	)

415 
	#CWSiblög
 (1<<5)

	)

416 
	#CWSèckMode
 (1<<6)

	)

421 
	#F‹gëGøvôy
 0

	)

422 
	#N‹thWe°Gøvôy
 1

	)

423 
	#N‹thGøvôy
 2

	)

424 
	#N‹thEa°Gøvôy
 3

	)

425 
	#We°Gøvôy
 4

	)

426 
	#CíãrGøvôy
 5

	)

427 
	#Ea°Gøvôy
 6

	)

428 
	#SouthWe°Gøvôy
 7

	)

429 
	#SouthGøvôy
 8

	)

430 
	#SouthEa°Gøvôy
 9

	)

431 
	#SèticGøvôy
 10

	)

435 
	#Unm≠Gøvôy
 0

	)

439 
	#NŸU£ful
 0

	)

440 
	#WhíM≠≥d
 1

	)

441 
	#Always
 2

	)

445 
	#IsUnm≠≥d
 0

	)

446 
	#IsUnvõwabÀ
 1

	)

447 
	#IsVõwabÀ
 2

	)

451 
	#SëModeIn£π
 0

	)

452 
	#SëModeDñëe
 1

	)

456 
	#De°royAŒ
 0

	)

457 
	#RëaöPîm™ít
 1

	)

458 
	#RëaöTemp‹¨y
 2

	)

462 
	#Above
 0

	)

463 
	#Bñow
 1

	)

464 
	#T›If
 2

	)

465 
	#BŸtomIf
 3

	)

466 
	#Oµosôe
 4

	)

470 
	#Rai£Lowe°
 0

	)

471 
	#LowîHighe°
 1

	)

475 
	#Pr›ModeRïœ˚
 0

	)

476 
	#Pr›ModePª≥nd
 1

	)

477 
	#Pr›ModeAµíd
 2

	)

485 
	#GX˛ór
 0x0

	)

486 
	#GX™d
 0x1

	)

487 
	#GX™dRevî£
 0x2

	)

488 
	#GXc›y
 0x3

	)

489 
	#GX™dInvîãd
 0x4

	)

490 
	#GXno›
 0x5

	)

491 
	#GXx‹
 0x6

	)

492 
	#GX‹
 0x7

	)

493 
	#GXn‹
 0x8

	)

494 
	#GXequiv
 0x9

	)

495 
	#GXövît
 0x®

	)

496 
	#GX‹Revî£
 0xb

	)

497 
	#GXc›yInvîãd
 0x¯

	)

498 
	#GX‹Invîãd
 0xd

	)

499 
	#GX«nd
 0xê

	)

500 
	#GX£t
 0x‡

	)

504 
	#LöeSﬁid
 0

	)

505 
	#LöeOnOffDash
 1

	)

506 
	#LöeDoubÀDash
 2

	)

510 
	#C≠NŸLa°
 0

	)

511 
	#C≠Buâ
 1

	)

512 
	#C≠Round
 2

	)

513 
	#C≠Proje˘ög
 3

	)

517 
	#JoöMôî
 0

	)

518 
	#JoöRound
 1

	)

519 
	#JoöBevñ
 2

	)

523 
	#FûlSﬁid
 0

	)

524 
	#FûlTûed
 1

	)

525 
	#FûlStù∂ed
 2

	)

526 
	#FûlO∑queStù∂ed
 3

	)

530 
	#EvíOddRuÀ
 0

	)

531 
	#WödögRuÀ
 1

	)

535 
	#ClùByChûdªn
 0

	)

536 
	#In˛udeIn„ri‹s
 1

	)

540 
	#Uns‹ãd
 0

	)

541 
	#YS‹ãd
 1

	)

542 
	#YXS‹ãd
 2

	)

543 
	#YXB™ded
 3

	)

547 
	#Co‹dModeOrigö
 0

	)

548 
	#Co‹dModePªvious
 1

	)

552 
	#Com∂ex
 0

	)

553 
	#N⁄c⁄vex
 1

	)

554 
	#C⁄vex
 2

	)

558 
	#ArcCh‹d
 0

	)

559 
	#ArcPõSli˚
 1

	)

564 
	#GCFun˘i⁄
 (1L<<0)

	)

565 
	#GCPœ√Mask
 (1L<<1)

	)

566 
	#GCF‹eground
 (1L<<2)

	)

567 
	#GCBackground
 (1L<<3)

	)

568 
	#GCLöeWidth
 (1L<<4)

	)

569 
	#GCLöeStyÀ
 (1L<<5)

	)

570 
	#GCC≠StyÀ
 (1L<<6)

	)

571 
	#GCJoöStyÀ
 (1L<<7)

	)

572 
	#GCFûlStyÀ
 (1L<<8)

	)

573 
	#GCFûlRuÀ
 (1L<<9)

	)

574 
	#GCTûe
 (1L<<10)

	)

575 
	#GCStù∂e
 (1L<<11)

	)

576 
	#GCTûeStùXOrigö
 (1L<<12)

	)

577 
	#GCTûeStùYOrigö
 (1L<<13)

	)

578 
	#GCF⁄t
 (1L<<14)

	)

579 
	#GCSubwödowMode
 (1L<<15)

	)

580 
	#GCGøphicsExposuªs
 (1L<<16)

	)

581 
	#GCClùXOrigö
 (1L<<17)

	)

582 
	#GCClùYOrigö
 (1L<<18)

	)

583 
	#GCClùMask
 (1L<<19)

	)

584 
	#GCDashOff£t
 (1L<<20)

	)

585 
	#GCDashLi°
 (1L<<21)

	)

586 
	#GCArcMode
 (1L<<22)

	)

588 
	#GCLa°Bô
 22

	)

595 
	#F⁄tLe·ToRight
 0

	)

596 
	#F⁄tRightToLe·
 1

	)

598 
	#F⁄tCh™ge
 255

	)

606 
	#XYBôm≠
 0

	)

607 
	#XYPixm≠
 1

	)

608 
	#ZPixm≠
 2

	)

616 
	#AŒocN⁄e
 0

	)

617 
	#AŒocAŒ
 1

	)

622 
	#DoRed
 (1<<0)

	)

623 
	#DoGªí
 (1<<1)

	)

624 
	#DoBlue
 (1<<2)

	)

632 
	#Curs‹Sh≠e
 0

	)

633 
	#TûeSh≠e
 1

	)

634 
	#Stù∂eSh≠e
 2

	)

640 
	#AutoRïótModeOff
 0

	)

641 
	#AutoRïótModeOn
 1

	)

642 
	#AutoRïótModeDeÁu…
 2

	)

644 
	#LedModeOff
 0

	)

645 
	#LedModeOn
 1

	)

649 
	#KBKeyClickPî˚¡
 (1L<<0)

	)

650 
	#KBBñlPî˚¡
 (1L<<1)

	)

651 
	#KBBñlPôch
 (1L<<2)

	)

652 
	#KBBñlDuøti⁄
 (1L<<3)

	)

653 
	#KBLed
 (1L<<4)

	)

654 
	#KBLedMode
 (1L<<5)

	)

655 
	#KBKey
 (1L<<6)

	)

656 
	#KBAutoRïótMode
 (1L<<7)

	)

658 
	#M≠pögSuc˚ss
 0

	)

659 
	#M≠pögBusy
 1

	)

660 
	#M≠pögFaûed
 2

	)

662 
	#M≠pögModifõr
 0

	)

663 
	#M≠pögKeybﬂrd
 1

	)

664 
	#M≠pögPoöãr
 2

	)

670 
	#D⁄tPª„rBœnkög
 0

	)

671 
	#Pª„rBœnkög
 1

	)

672 
	#DeÁu…Bœnkög
 2

	)

674 
	#DißbÀS¸ìnSavî
 0

	)

675 
	#DißbÀS¸ìnI¡îvÆ
 0

	)

677 
	#D⁄tAŒowExposuªs
 0

	)

678 
	#AŒowExposuªs
 1

	)

679 
	#DeÁu…Exposuªs
 2

	)

683 
	#S¸ìnSavîRe£t
 0

	)

684 
	#S¸ìnSavîA˘ive
 1

	)

692 
	#Ho°In£π
 0

	)

693 
	#Ho°Dñëe
 1

	)

697 
	#E«bÀAc˚ss
 1

	)

698 
	#DißbÀAc˚ss
 0

	)

704 
	#SèticGøy
 0

	)

705 
	#GøySˇÀ
 1

	)

706 
	#SèticCﬁ‹
 2

	)

707 
	#P£udoCﬁ‹
 3

	)

708 
	#TrueCﬁ‹
 4

	)

709 
	#Dúe˘Cﬁ‹
 5

	)

714 
	#LSBFú°
 0

	)

715 
	#MSBFú°
 1

	)

	@/usr/include/X11/Xatom.h

1 #i‚de‡
XATOM_H


2 
	#XATOM_H
 1

	)

9 
	#XA_PRIMARY
 ((
Atom
Ë1)

	)

10 
	#XA_SECONDARY
 ((
Atom
Ë2)

	)

11 
	#XA_ARC
 ((
Atom
Ë3)

	)

12 
	#XA_ATOM
 ((
Atom
Ë4)

	)

13 
	#XA_BITMAP
 ((
Atom
Ë5)

	)

14 
	#XA_CARDINAL
 ((
Atom
Ë6)

	)

15 
	#XA_COLORMAP
 ((
Atom
Ë7)

	)

16 
	#XA_CURSOR
 ((
Atom
Ë8)

	)

17 
	#XA_CUT_BUFFER0
 ((
Atom
Ë9)

	)

18 
	#XA_CUT_BUFFER1
 ((
Atom
Ë10)

	)

19 
	#XA_CUT_BUFFER2
 ((
Atom
Ë11)

	)

20 
	#XA_CUT_BUFFER3
 ((
Atom
Ë12)

	)

21 
	#XA_CUT_BUFFER4
 ((
Atom
Ë13)

	)

22 
	#XA_CUT_BUFFER5
 ((
Atom
Ë14)

	)

23 
	#XA_CUT_BUFFER6
 ((
Atom
Ë15)

	)

24 
	#XA_CUT_BUFFER7
 ((
Atom
Ë16)

	)

25 
	#XA_DRAWABLE
 ((
Atom
Ë17)

	)

26 
	#XA_FONT
 ((
Atom
Ë18)

	)

27 
	#XA_INTEGER
 ((
Atom
Ë19)

	)

28 
	#XA_PIXMAP
 ((
Atom
Ë20)

	)

29 
	#XA_POINT
 ((
Atom
Ë21)

	)

30 
	#XA_RECTANGLE
 ((
Atom
Ë22)

	)

31 
	#XA_RESOURCE_MANAGER
 ((
Atom
Ë23)

	)

32 
	#XA_RGB_COLOR_MAP
 ((
Atom
Ë24)

	)

33 
	#XA_RGB_BEST_MAP
 ((
Atom
Ë25)

	)

34 
	#XA_RGB_BLUE_MAP
 ((
Atom
Ë26)

	)

35 
	#XA_RGB_DEFAULT_MAP
 ((
Atom
Ë27)

	)

36 
	#XA_RGB_GRAY_MAP
 ((
Atom
Ë28)

	)

37 
	#XA_RGB_GREEN_MAP
 ((
Atom
Ë29)

	)

38 
	#XA_RGB_RED_MAP
 ((
Atom
Ë30)

	)

39 
	#XA_STRING
 ((
Atom
Ë31)

	)

40 
	#XA_VISUALID
 ((
Atom
Ë32)

	)

41 
	#XA_WINDOW
 ((
Atom
Ë33)

	)

42 
	#XA_WM_COMMAND
 ((
Atom
Ë34)

	)

43 
	#XA_WM_HINTS
 ((
Atom
Ë35)

	)

44 
	#XA_WM_CLIENT_MACHINE
 ((
Atom
Ë36)

	)

45 
	#XA_WM_ICON_NAME
 ((
Atom
Ë37)

	)

46 
	#XA_WM_ICON_SIZE
 ((
Atom
Ë38)

	)

47 
	#XA_WM_NAME
 ((
Atom
Ë39)

	)

48 
	#XA_WM_NORMAL_HINTS
 ((
Atom
Ë40)

	)

49 
	#XA_WM_SIZE_HINTS
 ((
Atom
Ë41)

	)

50 
	#XA_WM_ZOOM_HINTS
 ((
Atom
Ë42)

	)

51 
	#XA_MIN_SPACE
 ((
Atom
Ë43)

	)

52 
	#XA_NORM_SPACE
 ((
Atom
Ë44)

	)

53 
	#XA_MAX_SPACE
 ((
Atom
Ë45)

	)

54 
	#XA_END_SPACE
 ((
Atom
Ë46)

	)

55 
	#XA_SUPERSCRIPT_X
 ((
Atom
Ë47)

	)

56 
	#XA_SUPERSCRIPT_Y
 ((
Atom
Ë48)

	)

57 
	#XA_SUBSCRIPT_X
 ((
Atom
Ë49)

	)

58 
	#XA_SUBSCRIPT_Y
 ((
Atom
Ë50)

	)

59 
	#XA_UNDERLINE_POSITION
 ((
Atom
Ë51)

	)

60 
	#XA_UNDERLINE_THICKNESS
 ((
Atom
Ë52)

	)

61 
	#XA_STRIKEOUT_ASCENT
 ((
Atom
Ë53)

	)

62 
	#XA_STRIKEOUT_DESCENT
 ((
Atom
Ë54)

	)

63 
	#XA_ITALIC_ANGLE
 ((
Atom
Ë55)

	)

64 
	#XA_X_HEIGHT
 ((
Atom
Ë56)

	)

65 
	#XA_QUAD_WIDTH
 ((
Atom
Ë57)

	)

66 
	#XA_WEIGHT
 ((
Atom
Ë58)

	)

67 
	#XA_POINT_SIZE
 ((
Atom
Ë59)

	)

68 
	#XA_RESOLUTION
 ((
Atom
Ë60)

	)

69 
	#XA_COPYRIGHT
 ((
Atom
Ë61)

	)

70 
	#XA_NOTICE
 ((
Atom
Ë62)

	)

71 
	#XA_FONT_NAME
 ((
Atom
Ë63)

	)

72 
	#XA_FAMILY_NAME
 ((
Atom
Ë64)

	)

73 
	#XA_FULL_NAME
 ((
Atom
Ë65)

	)

74 
	#XA_CAP_HEIGHT
 ((
Atom
Ë66)

	)

75 
	#XA_WM_CLASS
 ((
Atom
Ë67)

	)

76 
	#XA_WM_TRANSIENT_FOR
 ((
Atom
Ë68)

	)

78 
	#XA_LAST_PREDEFINED
 ((
Atom
Ë68)

	)

	@/usr/include/X11/Xlib.h

33 #i‚de‡
_X11_XLIB_H_


34 
	#_X11_XLIB_H_


	)

36 
	#XlibS≥cifiˇti⁄Rñó£
 6

	)

38 
	~<sys/ty≥s.h
>

40 #i‡
deföed
(
__SCO__
Ë|| deföed(
__UNIXWARE__
)

41 
	~<°döt.h
>

44 
	~<X11/X.h
>

47 
	~<X11/Xfun˝rŸo.h
>

48 
	~<X11/Xosdefs.h
>

50 #i‚de‡
X_WCHAR


51 
	~<°ddef.h
>

53 #ifde‡
__UNIXOS2__


54 
	~<°dlib.h
>

57 
	twch¨_t
;

61 #i‡
deföed
(
ISC
Ë&& deföed(
USE_XMBTOWC
)

62 
	#w˘omb
(
a
,
b
Ë
	`_Xw˘omb
◊,b)

	)

63 
	#mbÀn
(
a
,
b
Ë
	`_XmbÀn
◊,b)

	)

64 #i‚de‡
USE_XWCHAR_STRING


65 
	#mbtowc
(
a
,
b
,
c
Ë
	`_Xmbtowc
◊,b,c)

	)

70 
_XmbÀn
(

71 #ifde‡
ISC


72 c⁄° *
°r
,

73 
size_t
 
Àn


75 *
°r
,

76 
Àn


82 
	#X_HAVE_UTF8_STRING
 1

	)

84 *
	tXPoöãr
;

86 
	#Boﬁ
 

	)

87 
	#Sètus
 

	)

88 
	#True
 1

	)

89 
	#FÆ£
 0

	)

91 
	#QueuedAÃódy
 0

	)

92 
	#QueuedA·îRódög
 1

	)

93 
	#QueuedA·îFlush
 2

	)

95 
	#C⁄√˘i⁄Numbî
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
fd
)

	)

96 
	#RoŸWödow
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ
)

	)

97 
	#DeÁu…S¸ìn
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
deÁu…_s¸ìn
)

	)

98 
	#DeÁu…RoŸWödow
(
dpy
Ë(
	`S¸ìnOfDi•œy
(dpy,
	`DeÁu…S¸ìn
(dpy))->
roŸ
)

	)

99 
	#DeÁu…VisuÆ
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ_visuÆ
)

	)

100 
	#DeÁu…GC
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
deÁu…_gc
)

	)

101 
	#BœckPixñ
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
bœck_pixñ
)

	)

102 
	#WhôePixñ
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
whôe_pixñ
)

	)

103 
	#AŒPœ√s
 (()~0L)

	)

104 
	#QLígth
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
qÀn
)

	)

105 
	#Di•œyWidth
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
width
)

	)

106 
	#Di•œyHeight
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
height
)

	)

107 
	#Di•œyWidthMM
(
dpy
, 
s¸
)(
	`S¸ìnOfDi•œy
(dpy,s¸)->
mwidth
)

	)

108 
	#Di•œyHeightMM
(
dpy
, 
s¸
)(
	`S¸ìnOfDi•œy
(dpy,s¸)->
mheight
)

	)

109 
	#Di•œyPœ√s
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ_dïth
)

	)

110 
	#Di•œyCñls
(
dpy
, 
s¸
Ë(
	`DeÁu…VisuÆ
(dpy,s¸)->
m≠_íåõs
)

	)

111 
	#S¸ìnCou¡
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
ns¸ìns
)

	)

112 
	#SîvîVíd‹
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
víd‹
)

	)

113 
	#PrŸocﬁVîsi⁄
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
¥Ÿo_maj‹_vîsi⁄
)

	)

114 
	#PrŸocﬁRevisi⁄
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
¥Ÿo_mö‹_vîsi⁄
)

	)

115 
	#Víd‹Rñó£
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
ªÀa£
)

	)

116 
	#Di•œySåög
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
di•œy_«me
)

	)

117 
	#DeÁu…Dïth
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ_dïth
)

	)

118 
	#DeÁu…Cﬁ‹m≠
(
dpy
, 
s¸
)(
	`S¸ìnOfDi•œy
(dpy,s¸)->
cm≠
)

	)

119 
	#Bôm≠Unô
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
bôm≠_unô
)

	)

120 
	#Bôm≠BôOrdî
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
bôm≠_bô_‹dî
)

	)

121 
	#Bôm≠Pad
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
bôm≠_∑d
)

	)

122 
	#ImageByãOrdî
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
byã_‹dî
)

	)

123 #ifde‡
CRAY


124 
	#NextReque°
(
dpy
Ë
	`XNextReque°
(dpy)

	)

126 
	#NextReque°
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
ªque°
 + 1)

	)

128 
	#La°KnownReque°Pro˚s£d
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
œ°_ªque°_ªad
)

	)

131 
	#S¸ìnOfDi•œy
(
dpy
, 
s¸
)(&((
_XPrivDi•œy
)dpy)->
s¸ìns
[s¸])

	)

132 
	#DeÁu…S¸ìnOfDi•œy
(
dpy
Ë
	`S¸ìnOfDi•œy
(dpy,
	`DeÁu…S¸ìn
(dpy))

	)

133 
	#Di•œyOfS¸ìn
(
s
Ë((s)->
di•œy
)

	)

134 
	#RoŸWödowOfS¸ìn
(
s
Ë((s)->
roŸ
)

	)

135 
	#BœckPixñOfS¸ìn
(
s
Ë((s)->
bœck_pixñ
)

	)

136 
	#WhôePixñOfS¸ìn
(
s
Ë((s)->
whôe_pixñ
)

	)

137 
	#DeÁu…Cﬁ‹m≠OfS¸ìn
(
s
)((s)->
cm≠
)

	)

138 
	#DeÁu…DïthOfS¸ìn
(
s
Ë((s)->
roŸ_dïth
)

	)

139 
	#DeÁu…GCOfS¸ìn
(
s
Ë((s)->
deÁu…_gc
)

	)

140 
	#DeÁu…VisuÆOfS¸ìn
(
s
)((s)->
roŸ_visuÆ
)

	)

141 
	#WidthOfS¸ìn
(
s
Ë((s)->
width
)

	)

142 
	#HeightOfS¸ìn
(
s
Ë((s)->
height
)

	)

143 
	#WidthMMOfS¸ìn
(
s
Ë((s)->
mwidth
)

	)

144 
	#HeightMMOfS¸ìn
(
s
Ë((s)->
mheight
)

	)

145 
	#Pœ√sOfS¸ìn
(
s
Ë((s)->
roŸ_dïth
)

	)

146 
	#CñlsOfS¸ìn
(
s
Ë(
	`DeÁu…VisuÆOfS¸ìn
((s))->
m≠_íåõs
)

	)

147 
	#MöCm≠sOfS¸ìn
(
s
Ë((s)->
mö_m≠s
)

	)

148 
	#MaxCm≠sOfS¸ìn
(
s
Ë((s)->
max_m≠s
)

	)

149 
	#D€sSaveUndîs
(
s
Ë((s)->
ßve_undîs
)

	)

150 
	#D€sBackögSt‹e
(
s
Ë((s)->
backög_°‹e
)

	)

151 
	#EvítMaskOfS¸ìn
(
s
Ë((s)->
roŸ_öput_mask
)

	)

156 
	s_XExtD©a
 {

157 
	mnumbî
;

158 
_XExtD©a
 *
	m√xt
;

159 (*
	m‰ì_¥iv©e
)(

160 
_XExtD©a
 *
	mexãnsi⁄


162 
XPoöãr
 
	m¥iv©e_d©a
;

163 } 
	tXExtD©a
;

169 
	mexãnsi⁄
;

170 
	mmaj‹_›code
;

171 
	mfú°_evít
;

172 
	mfú°_îr‹
;

173 } 
	tXExtCodes
;

180 
	mdïth
;

181 
	mbôs_≥r_pixñ
;

182 
	msˇ∆öe_∑d
;

183 } 
	tXPixm≠F‹m©VÆues
;

190 
	mfun˘i⁄
;

191 
	m∂™e_mask
;

192 
	mf‹eground
;

193 
	mbackground
;

194 
	mlöe_width
;

195 
	mlöe_°yÀ
;

196 
	mˇp_°yÀ
;

198 
	mjoö_°yÀ
;

199 
	mfûl_°yÀ
;

201 
	mfûl_ruÀ
;

202 
	m¨c_mode
;

203 
Pixm≠
 
	mtûe
;

204 
Pixm≠
 
	m°ù∂e
;

205 
	mts_x_‹igö
;

206 
	mts_y_‹igö
;

207 
F⁄t
 
	mf⁄t
;

208 
	msubwödow_mode
;

209 
Boﬁ
 
	mgøphics_exposuªs
;

210 
	m˛ù_x_‹igö
;

211 
	m˛ù_y_‹igö
;

212 
Pixm≠
 
	m˛ù_mask
;

213 
	mdash_off£t
;

214 
	mdashes
;

215 } 
	tXGCVÆues
;

222 
	g_XGC


223 #ifde‡
	tXLIB_ILLEGAL_ACCESS


225 
XExtD©a
 *
	gext_d©a
;

226 
GC⁄ãxt
 
	ggid
;

230 *
	tGC
;

236 
XExtD©a
 *
	mext_d©a
;

237 
VisuÆID
 
	mvisuÆid
;

238 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

239 
	mc_˛ass
;

241 
	m˛ass
;

243 
	mªd_mask
, 
	mgªí_mask
, 
	mblue_mask
;

244 
	mbôs_≥r_rgb
;

245 
	mm≠_íåõs
;

246 } 
	tVisuÆ
;

252 
	mdïth
;

253 
	mnvisuÆs
;

254 
VisuÆ
 *
	mvisuÆs
;

255 } 
	tDïth
;

263 
	g_XDi•œy
;

266 
XExtD©a
 *
	mext_d©a
;

267 
_XDi•œy
 *
	mdi•œy
;

268 
Wödow
 
	mroŸ
;

269 
	mwidth
, 
	mheight
;

270 
	mmwidth
, 
	mmheight
;

271 
	mndïths
;

272 
Dïth
 *
	mdïths
;

273 
	mroŸ_dïth
;

274 
VisuÆ
 *
	mroŸ_visuÆ
;

275 
GC
 
	mdeÁu…_gc
;

276 
Cﬁ‹m≠
 
	mcm≠
;

277 
	mwhôe_pixñ
;

278 
	mbœck_pixñ
;

279 
	mmax_m≠s
, 
	mmö_m≠s
;

280 
	mbackög_°‹e
;

281 
Boﬁ
 
	mßve_undîs
;

282 
	mroŸ_öput_mask
;

283 } 
	tS¸ìn
;

289 
XExtD©a
 *
	mext_d©a
;

290 
	mdïth
;

291 
	mbôs_≥r_pixñ
;

292 
	msˇ∆öe_∑d
;

293 } 
	tS¸ìnF‹m©
;

299 
Pixm≠
 
	mbackground_pixm≠
;

300 
	mbackground_pixñ
;

301 
Pixm≠
 
	mb‹dî_pixm≠
;

302 
	mb‹dî_pixñ
;

303 
	mbô_gøvôy
;

304 
	mwö_gøvôy
;

305 
	mbackög_°‹e
;

306 
	mbackög_∂™es
;

307 
	mbackög_pixñ
;

308 
Boﬁ
 
	mßve_undî
;

309 
	mevít_mask
;

310 
	mdo_nŸ_¥›ag©e_mask
;

311 
Boﬁ
 
	movîride_ªdúe˘
;

312 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

313 
Curs‹
 
	mcurs‹
;

314 } 
	tXSëWödowAâribuãs
;

317 
	mx
, 
	my
;

318 
	mwidth
, 
	mheight
;

319 
	mb‹dî_width
;

320 
	mdïth
;

321 
VisuÆ
 *
	mvisuÆ
;

322 
Wödow
 
	mroŸ
;

323 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

324 
	mc_˛ass
;

326 
	m˛ass
;

328 
	mbô_gøvôy
;

329 
	mwö_gøvôy
;

330 
	mbackög_°‹e
;

331 
	mbackög_∂™es
;

332 
	mbackög_pixñ
;

333 
Boﬁ
 
	mßve_undî
;

334 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

335 
Boﬁ
 
	mm≠_ö°ÆÀd
;

336 
	mm≠_°©e
;

337 
	mÆl_evít_masks
;

338 
	myour_evít_mask
;

339 
	mdo_nŸ_¥›ag©e_mask
;

340 
Boﬁ
 
	movîride_ªdúe˘
;

341 
S¸ìn
 *
	ms¸ìn
;

342 } 
	tXWödowAâribuãs
;

350 
	mÁmûy
;

351 
	mÀngth
;

352 *
	maddªss
;

353 } 
	tXHo°Addªss
;

359 
	mty≥Àngth
;

360 
	mvÆuñígth
;

361 *
	mty≥
;

362 *
	mvÆue
;

363 } 
	tXSîvîI¡î¥ëedAddªss
;

368 
	s_XImage
 {

369 
	mwidth
, 
	mheight
;

370 
	mxoff£t
;

371 
	mf‹m©
;

372 *
	md©a
;

373 
	mbyã_‹dî
;

374 
	mbôm≠_unô
;

375 
	mbôm≠_bô_‹dî
;

376 
	mbôm≠_∑d
;

377 
	mdïth
;

378 
	mbyãs_≥r_löe
;

379 
	mbôs_≥r_pixñ
;

380 
	mªd_mask
;

381 
	mgªí_mask
;

382 
	mblue_mask
;

383 
XPoöãr
 
	mobd©a
;

384 
	sfuncs
 {

385 
	m_XImage
 *(*
	m¸óã_image
)(

386 
	m_XDi•œy
* ,

387 
	mVisuÆ
* ,

396 (*
	mde°roy_image
Ë(
	m_XImage
 *);

397 (*
	mgë_pixñ
Ë(
	m_XImage
 *, , );

398 (*
	mput_pixñ
Ë(
	m_XImage
 *, , , );

399 
	m_XImage
 *(*
	msub_image
)(_XImage *, , , , );

400 (*
	madd_pixñ
Ë(
	m_XImage
 *, );

401 } 
	mf
;

402 } 
	tXImage
;

408 
	mx
, 
	my
;

409 
	mwidth
, 
	mheight
;

410 
	mb‹dî_width
;

411 
Wödow
 
	msiblög
;

412 
	m°ack_mode
;

413 } 
	tXWödowCh™ges
;

419 
	mpixñ
;

420 
	mªd
, 
	mgªí
, 
	mblue
;

421 
	mÊags
;

422 
	m∑d
;

423 } 
	tXCﬁ‹
;

431 
	mx1
, 
	my1
, 
	mx2
, 
	my2
;

432 } 
	tXSegmít
;

435 
	mx
, 
	my
;

436 } 
	tXPoöt
;

439 
	mx
, 
	my
;

440 
	mwidth
, 
	mheight
;

441 } 
	tXRe˘™gÀ
;

444 
	mx
, 
	my
;

445 
	mwidth
, 
	mheight
;

446 
	m™gÀ1
, 
	m™gÀ2
;

447 } 
	tXArc
;

453 
	mkey_˛ick_≥r˚¡
;

454 
	mbñl_≥r˚¡
;

455 
	mbñl_pôch
;

456 
	mbñl_duøti⁄
;

457 
	mÀd
;

458 
	mÀd_mode
;

459 
	mkey
;

460 
	mauto_ª≥©_mode
;

461 } 
	tXKeybﬂrdC⁄åﬁ
;

466 
	mkey_˛ick_≥r˚¡
;

467 
	mbñl_≥r˚¡
;

468 
	mbñl_pôch
, 
	mbñl_duøti⁄
;

469 
	mÀd_mask
;

470 
	mglobÆ_auto_ª≥©
;

471 
	mauto_ª≥©s
[32];

472 } 
	tXKeybﬂrdSèã
;

477 
Time
 
	mtime
;

478 
	mx
, 
	my
;

479 } 
	tXTimeCo‹d
;

484 
	mmax_key≥rmod
;

485 
KeyCode
 *
	mmodifõrm≠
;

486 } 
	tXModifõrKeym≠
;

494 #i‚de‡
XLIB_ILLEGAL_ACCESS


495 
_XDi•œy
 
	tDi•œy
;

498 
	g_XPriv©e
;

499 
	g_XrmHashBuckëRec
;

502 #ifde‡
XLIB_ILLEGAL_ACCESS


503 
	t_XDi•œy


506 
XExtD©a
 *
	gext_d©a
;

507 
_XPriv©e
 *
	g¥iv©e1
;

508 
	gfd
;

509 
	g¥iv©e2
;

510 
	g¥Ÿo_maj‹_vîsi⁄
;

511 
	g¥Ÿo_mö‹_vîsi⁄
;

512 *
	gvíd‹
;

513 
XID
 
	g¥iv©e3
;

514 
XID
 
	g¥iv©e4
;

515 
XID
 
	g¥iv©e5
;

516 
	g¥iv©e6
;

517 
XID
 (*
ªsour˚_Æloc
)(

518 
	g_XDi•œy
*

520 
	gbyã_‹dî
;

521 
	gbôm≠_unô
;

522 
	gbôm≠_∑d
;

523 
	gbôm≠_bô_‹dî
;

524 
	gnf‹m©s
;

525 
S¸ìnF‹m©
 *
	gpixm≠_f‹m©
;

526 
	g¥iv©e8
;

527 
	gªÀa£
;

528 
_XPriv©e
 *
	g¥iv©e9
, *
	g¥iv©e10
;

529 
	gqÀn
;

530 
	gœ°_ªque°_ªad
;

531 
	gªque°
;

532 
XPoöãr
 
	g¥iv©e11
;

533 
XPoöãr
 
	g¥iv©e12
;

534 
XPoöãr
 
	g¥iv©e13
;

535 
XPoöãr
 
	g¥iv©e14
;

536 
	gmax_ªque°_size
;

537 
_XrmHashBuckëRec
 *
	gdb
;

538 (*
	g¥iv©e15
)(

539 
	g_XDi•œy
*

541 *
	gdi•œy_«me
;

542 
	gdeÁu…_s¸ìn
;

543 
	gns¸ìns
;

544 
S¸ìn
 *
	gs¸ìns
;

545 
	gmŸi⁄_buf„r
;

546 
	g¥iv©e16
;

547 
	gmö_keycode
;

548 
	gmax_keycode
;

549 
XPoöãr
 
	g¥iv©e17
;

550 
XPoöãr
 
	g¥iv©e18
;

551 
	g¥iv©e19
;

552 *
	gxdeÁu…s
;

555 #ifde‡
	tXLIB_ILLEGAL_ACCESS


556 
	tDi•œy
,

558 *
	t_XPrivDi•œy
;

560 #unde‡
_XEVENT_


561 #i‚de‡
_XEVENT_


566 
	mty≥
;

567 
	m£rül
;

568 
Boﬁ
 
	m£nd_evít
;

569 
Di•œy
 *
	mdi•œy
;

570 
Wödow
 
	mwödow
;

571 
Wödow
 
	mroŸ
;

572 
Wödow
 
	msubwödow
;

573 
Time
 
	mtime
;

574 
	mx
, 
	my
;

575 
	mx_roŸ
, 
	my_roŸ
;

576 
	m°©e
;

577 
	mkeycode
;

578 
Boﬁ
 
	mßme_s¸ìn
;

579 } 
	tXKeyEvít
;

580 
XKeyEvít
 
	tXKeyPªs£dEvít
;

581 
XKeyEvít
 
	tXKeyRñó£dEvít
;

584 
	mty≥
;

585 
	m£rül
;

586 
Boﬁ
 
	m£nd_evít
;

587 
Di•œy
 *
	mdi•œy
;

588 
Wödow
 
	mwödow
;

589 
Wödow
 
	mroŸ
;

590 
Wödow
 
	msubwödow
;

591 
Time
 
	mtime
;

592 
	mx
, 
	my
;

593 
	mx_roŸ
, 
	my_roŸ
;

594 
	m°©e
;

595 
	mbuâ⁄
;

596 
Boﬁ
 
	mßme_s¸ìn
;

597 } 
	tXBuâ⁄Evít
;

598 
XBuâ⁄Evít
 
	tXBuâ⁄Pªs£dEvít
;

599 
XBuâ⁄Evít
 
	tXBuâ⁄Rñó£dEvít
;

602 
	mty≥
;

603 
	m£rül
;

604 
Boﬁ
 
	m£nd_evít
;

605 
Di•œy
 *
	mdi•œy
;

606 
Wödow
 
	mwödow
;

607 
Wödow
 
	mroŸ
;

608 
Wödow
 
	msubwödow
;

609 
Time
 
	mtime
;

610 
	mx
, 
	my
;

611 
	mx_roŸ
, 
	my_roŸ
;

612 
	m°©e
;

613 
	mis_höt
;

614 
Boﬁ
 
	mßme_s¸ìn
;

615 } 
	tXMŸi⁄Evít
;

616 
XMŸi⁄Evít
 
	tXPoöãrMovedEvít
;

619 
	mty≥
;

620 
	m£rül
;

621 
Boﬁ
 
	m£nd_evít
;

622 
Di•œy
 *
	mdi•œy
;

623 
Wödow
 
	mwödow
;

624 
Wödow
 
	mroŸ
;

625 
Wödow
 
	msubwödow
;

626 
Time
 
	mtime
;

627 
	mx
, 
	my
;

628 
	mx_roŸ
, 
	my_roŸ
;

629 
	mmode
;

630 
	mdëaû
;

635 
Boﬁ
 
	mßme_s¸ìn
;

636 
Boﬁ
 
	mfocus
;

637 
	m°©e
;

638 } 
	tXCrossögEvít
;

639 
XCrossögEvít
 
	tXE¡îWödowEvít
;

640 
XCrossögEvít
 
	tXLóveWödowEvít
;

643 
	mty≥
;

644 
	m£rül
;

645 
Boﬁ
 
	m£nd_evít
;

646 
Di•œy
 *
	mdi•œy
;

647 
Wödow
 
	mwödow
;

648 
	mmode
;

650 
	mdëaû
;

656 } 
	tXFocusCh™geEvít
;

657 
XFocusCh™geEvít
 
	tXFocusInEvít
;

658 
XFocusCh™geEvít
 
	tXFocusOutEvít
;

662 
	mty≥
;

663 
	m£rül
;

664 
Boﬁ
 
	m£nd_evít
;

665 
Di•œy
 *
	mdi•œy
;

666 
Wödow
 
	mwödow
;

667 
	mkey_ve˘‹
[32];

668 } 
	tXKeym≠Evít
;

671 
	mty≥
;

672 
	m£rül
;

673 
Boﬁ
 
	m£nd_evít
;

674 
Di•œy
 *
	mdi•œy
;

675 
Wödow
 
	mwödow
;

676 
	mx
, 
	my
;

677 
	mwidth
, 
	mheight
;

678 
	mcou¡
;

679 } 
	tXExpo£Evít
;

682 
	mty≥
;

683 
	m£rül
;

684 
Boﬁ
 
	m£nd_evít
;

685 
Di•œy
 *
	mdi•œy
;

686 
DøwabÀ
 
	mdøwabÀ
;

687 
	mx
, 
	my
;

688 
	mwidth
, 
	mheight
;

689 
	mcou¡
;

690 
	mmaj‹_code
;

691 
	mmö‹_code
;

692 } 
	tXGøphicsExpo£Evít
;

695 
	mty≥
;

696 
	m£rül
;

697 
Boﬁ
 
	m£nd_evít
;

698 
Di•œy
 *
	mdi•œy
;

699 
DøwabÀ
 
	mdøwabÀ
;

700 
	mmaj‹_code
;

701 
	mmö‹_code
;

702 } 
	tXNoExpo£Evít
;

705 
	mty≥
;

706 
	m£rül
;

707 
Boﬁ
 
	m£nd_evít
;

708 
Di•œy
 *
	mdi•œy
;

709 
Wödow
 
	mwödow
;

710 
	m°©e
;

711 } 
	tXVisibûôyEvít
;

714 
	mty≥
;

715 
	m£rül
;

716 
Boﬁ
 
	m£nd_evít
;

717 
Di•œy
 *
	mdi•œy
;

718 
Wödow
 
	m∑ª¡
;

719 
Wödow
 
	mwödow
;

720 
	mx
, 
	my
;

721 
	mwidth
, 
	mheight
;

722 
	mb‹dî_width
;

723 
Boﬁ
 
	movîride_ªdúe˘
;

724 } 
	tXCª©eWödowEvít
;

727 
	mty≥
;

728 
	m£rül
;

729 
Boﬁ
 
	m£nd_evít
;

730 
Di•œy
 *
	mdi•œy
;

731 
Wödow
 
	mevít
;

732 
Wödow
 
	mwödow
;

733 } 
	tXDe°royWödowEvít
;

736 
	mty≥
;

737 
	m£rül
;

738 
Boﬁ
 
	m£nd_evít
;

739 
Di•œy
 *
	mdi•œy
;

740 
Wödow
 
	mevít
;

741 
Wödow
 
	mwödow
;

742 
Boﬁ
 
	m‰om_c⁄figuª
;

743 } 
	tXUnm≠Evít
;

746 
	mty≥
;

747 
	m£rül
;

748 
Boﬁ
 
	m£nd_evít
;

749 
Di•œy
 *
	mdi•œy
;

750 
Wödow
 
	mevít
;

751 
Wödow
 
	mwödow
;

752 
Boﬁ
 
	movîride_ªdúe˘
;

753 } 
	tXM≠Evít
;

756 
	mty≥
;

757 
	m£rül
;

758 
Boﬁ
 
	m£nd_evít
;

759 
Di•œy
 *
	mdi•œy
;

760 
Wödow
 
	m∑ª¡
;

761 
Wödow
 
	mwödow
;

762 } 
	tXM≠Reque°Evít
;

765 
	mty≥
;

766 
	m£rül
;

767 
Boﬁ
 
	m£nd_evít
;

768 
Di•œy
 *
	mdi•œy
;

769 
Wödow
 
	mevít
;

770 
Wödow
 
	mwödow
;

771 
Wödow
 
	m∑ª¡
;

772 
	mx
, 
	my
;

773 
Boﬁ
 
	movîride_ªdúe˘
;

774 } 
	tXRï¨ítEvít
;

777 
	mty≥
;

778 
	m£rül
;

779 
Boﬁ
 
	m£nd_evít
;

780 
Di•œy
 *
	mdi•œy
;

781 
Wödow
 
	mevít
;

782 
Wödow
 
	mwödow
;

783 
	mx
, 
	my
;

784 
	mwidth
, 
	mheight
;

785 
	mb‹dî_width
;

786 
Wödow
 
	mabove
;

787 
Boﬁ
 
	movîride_ªdúe˘
;

788 } 
	tXC⁄figuªEvít
;

791 
	mty≥
;

792 
	m£rül
;

793 
Boﬁ
 
	m£nd_evít
;

794 
Di•œy
 *
	mdi•œy
;

795 
Wödow
 
	mevít
;

796 
Wödow
 
	mwödow
;

797 
	mx
, 
	my
;

798 } 
	tXGøvôyEvít
;

801 
	mty≥
;

802 
	m£rül
;

803 
Boﬁ
 
	m£nd_evít
;

804 
Di•œy
 *
	mdi•œy
;

805 
Wödow
 
	mwödow
;

806 
	mwidth
, 
	mheight
;

807 } 
	tXResizeReque°Evít
;

810 
	mty≥
;

811 
	m£rül
;

812 
Boﬁ
 
	m£nd_evít
;

813 
Di•œy
 *
	mdi•œy
;

814 
Wödow
 
	m∑ª¡
;

815 
Wödow
 
	mwödow
;

816 
	mx
, 
	my
;

817 
	mwidth
, 
	mheight
;

818 
	mb‹dî_width
;

819 
Wödow
 
	mabove
;

820 
	mdëaû
;

821 
	mvÆue_mask
;

822 } 
	tXC⁄figuªReque°Evít
;

825 
	mty≥
;

826 
	m£rül
;

827 
Boﬁ
 
	m£nd_evít
;

828 
Di•œy
 *
	mdi•œy
;

829 
Wödow
 
	mevít
;

830 
Wödow
 
	mwödow
;

831 
	m∂a˚
;

832 } 
	tXCúcuœãEvít
;

835 
	mty≥
;

836 
	m£rül
;

837 
Boﬁ
 
	m£nd_evít
;

838 
Di•œy
 *
	mdi•œy
;

839 
Wödow
 
	m∑ª¡
;

840 
Wödow
 
	mwödow
;

841 
	m∂a˚
;

842 } 
	tXCúcuœãReque°Evít
;

845 
	mty≥
;

846 
	m£rül
;

847 
Boﬁ
 
	m£nd_evít
;

848 
Di•œy
 *
	mdi•œy
;

849 
Wödow
 
	mwödow
;

850 
Atom
 
	m©om
;

851 
Time
 
	mtime
;

852 
	m°©e
;

853 } 
	tXPr›îtyEvít
;

856 
	mty≥
;

857 
	m£rül
;

858 
Boﬁ
 
	m£nd_evít
;

859 
Di•œy
 *
	mdi•œy
;

860 
Wödow
 
	mwödow
;

861 
Atom
 
	m£À˘i⁄
;

862 
Time
 
	mtime
;

863 } 
	tXSñe˘i⁄CÀ¨Evít
;

866 
	mty≥
;

867 
	m£rül
;

868 
Boﬁ
 
	m£nd_evít
;

869 
Di•œy
 *
	mdi•œy
;

870 
Wödow
 
	mow√r
;

871 
Wödow
 
	mªque°‹
;

872 
Atom
 
	m£À˘i⁄
;

873 
Atom
 
	mèrgë
;

874 
Atom
 
	m¥›îty
;

875 
Time
 
	mtime
;

876 } 
	tXSñe˘i⁄Reque°Evít
;

879 
	mty≥
;

880 
	m£rül
;

881 
Boﬁ
 
	m£nd_evít
;

882 
Di•œy
 *
	mdi•œy
;

883 
Wödow
 
	mªque°‹
;

884 
Atom
 
	m£À˘i⁄
;

885 
Atom
 
	mèrgë
;

886 
Atom
 
	m¥›îty
;

887 
Time
 
	mtime
;

888 } 
	tXSñe˘i⁄Evít
;

891 
	mty≥
;

892 
	m£rül
;

893 
Boﬁ
 
	m£nd_evít
;

894 
Di•œy
 *
	mdi•œy
;

895 
Wödow
 
	mwödow
;

896 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

897 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

898 
Boﬁ
 
	mc_√w
;

900 
Boﬁ
 
	m√w
;

902 
	m°©e
;

903 } 
	tXCﬁ‹m≠Evít
;

906 
	mty≥
;

907 
	m£rül
;

908 
Boﬁ
 
	m£nd_evít
;

909 
Di•œy
 *
	mdi•œy
;

910 
Wödow
 
	mwödow
;

911 
Atom
 
	mmesßge_ty≥
;

912 
	mf‹m©
;

914 
	mb
[20];

915 
	ms
[10];

916 
	ml
[5];

917 } 
	md©a
;

918 } 
	tXClõ¡MesßgeEvít
;

921 
	mty≥
;

922 
	m£rül
;

923 
Boﬁ
 
	m£nd_evít
;

924 
Di•œy
 *
	mdi•œy
;

925 
Wödow
 
	mwödow
;

926 
	mªque°
;

928 
	mfú°_keycode
;

929 
	mcou¡
;

930 } 
	tXM≠pögEvít
;

933 
	mty≥
;

934 
Di•œy
 *
	mdi•œy
;

935 
XID
 
	mªsour˚id
;

936 
	m£rül
;

937 
	mîr‹_code
;

938 
	mªque°_code
;

939 
	mmö‹_code
;

940 } 
	tXEº‹Evít
;

943 
	mty≥
;

944 
	m£rül
;

945 
Boﬁ
 
	m£nd_evít
;

946 
Di•œy
 *
	mdi•œy
;

947 
Wödow
 
	mwödow
;

948 } 
	tXAnyEvít
;

958 
	mty≥
;

959 
	m£rül
;

960 
Boﬁ
 
	m£nd_evít
;

961 
Di•œy
 *
	mdi•œy
;

962 
	mexãnsi⁄
;

963 
	mevty≥
;

964 } 
	tXGíîicEvít
;

967 
	mty≥
;

968 
	m£rül
;

969 
Boﬁ
 
	m£nd_evít
;

970 
Di•œy
 *
	mdi•œy
;

971 
	mexãnsi⁄
;

972 
	mevty≥
;

973 
	mcookõ
;

974 *
	md©a
;

975 } 
	tXGíîicEvítCookõ
;

981 
	u_XEvít
 {

982 
	mty≥
;

983 
XAnyEvít
 
	mx™y
;

984 
XKeyEvít
 
	mxkey
;

985 
XBuâ⁄Evít
 
	mxbuâ⁄
;

986 
XMŸi⁄Evít
 
	mxmŸi⁄
;

987 
XCrossögEvít
 
	mx¸ossög
;

988 
XFocusCh™geEvít
 
	mxfocus
;

989 
XExpo£Evít
 
	mxexpo£
;

990 
XGøphicsExpo£Evít
 
	mxgøphic£xpo£
;

991 
XNoExpo£Evít
 
	mxn€xpo£
;

992 
XVisibûôyEvít
 
	mxvisibûôy
;

993 
XCª©eWödowEvít
 
	mx¸óãwödow
;

994 
XDe°royWödowEvít
 
	mxde°roywödow
;

995 
XUnm≠Evít
 
	mxunm≠
;

996 
XM≠Evít
 
	mxm≠
;

997 
XM≠Reque°Evít
 
	mxm≠ªque°
;

998 
XRï¨ítEvít
 
	mxª∑ª¡
;

999 
XC⁄figuªEvít
 
	mxc⁄figuª
;

1000 
XGøvôyEvít
 
	mxgøvôy
;

1001 
XResizeReque°Evít
 
	mxªsizîeque°
;

1002 
XC⁄figuªReque°Evít
 
	mxc⁄figuªªque°
;

1003 
XCúcuœãEvít
 
	mxcúcuœã
;

1004 
XCúcuœãReque°Evít
 
	mxcúcuœãªque°
;

1005 
XPr›îtyEvít
 
	mx¥›îty
;

1006 
XSñe˘i⁄CÀ¨Evít
 
	mx£À˘i⁄˛ór
;

1007 
XSñe˘i⁄Reque°Evít
 
	mx£À˘i⁄ªque°
;

1008 
XSñe˘i⁄Evít
 
	mx£À˘i⁄
;

1009 
XCﬁ‹m≠Evít
 
	mxcﬁ‹m≠
;

1010 
XClõ¡MesßgeEvít
 
	mx˛õ¡
;

1011 
XM≠pögEvít
 
	mxm≠pög
;

1012 
XEº‹Evít
 
	mxîr‹
;

1013 
XKeym≠Evít
 
	mxkeym≠
;

1014 
XGíîicEvít
 
	mxgíîic
;

1015 
XGíîicEvítCookõ
 
	mxcookõ
;

1016 
	m∑d
[24];

1017 } 
	tXEvít
;

1020 
	#XAŒocID
(
dpy
Ë((*((
_XPrivDi•œy
)dpy)->
ªsour˚_Æloc
)((dpy)))

	)

1026 
	mlbórög
;

1027 
	mrbórög
;

1028 
	mwidth
;

1029 
	mas˚¡
;

1030 
	mdes˚¡
;

1031 
	m©åibuãs
;

1032 } 
	tXCh¨Såu˘
;

1039 
Atom
 
	m«me
;

1040 
	mˇrd32
;

1041 } 
	tXF⁄tPr›
;

1044 
XExtD©a
 *
	mext_d©a
;

1045 
F⁄t
 
	mfid
;

1046 
	mdúe˘i⁄
;

1047 
	mmö_ch¨_‹_byã2
;

1048 
	mmax_ch¨_‹_byã2
;

1049 
	mmö_byã1
;

1050 
	mmax_byã1
;

1051 
Boﬁ
 
	mÆl_ch¨s_exi°
;

1052 
	mdeÁu…_ch¨
;

1053 
	mn_¥›îtõs
;

1054 
XF⁄tPr›
 *
	m¥›îtõs
;

1055 
XCh¨Såu˘
 
	mmö_bounds
;

1056 
XCh¨Såu˘
 
	mmax_bounds
;

1057 
XCh¨Såu˘
 *
	m≥r_ch¨
;

1058 
	mas˚¡
;

1059 
	mdes˚¡
;

1060 } 
	tXF⁄tSåu˘
;

1066 *
	mch¨s
;

1067 
	mnch¨s
;

1068 
	mdñè
;

1069 
F⁄t
 
	mf⁄t
;

1070 } 
	tXTextIãm
;

1073 
	mbyã1
;

1074 
	mbyã2
;

1075 } 
	tXCh¨2b
;

1078 
XCh¨2b
 *
	mch¨s
;

1079 
	mnch¨s
;

1080 
	mdñè
;

1081 
F⁄t
 
	mf⁄t
;

1082 } 
	tXTextIãm16
;

1085 uni⁄ { 
Di•œy
 *
	mdi•œy
;

1086 
GC
 
	mgc
;

1087 
VisuÆ
 *
	mvisuÆ
;

1088 
S¸ìn
 *
	ms¸ìn
;

1089 
S¸ìnF‹m©
 *
	mpixm≠_f‹m©
;

1090 
XF⁄tSåu˘
 *
	mf⁄t
; } 
	tXED©aObje˘
;

1093 
XRe˘™gÀ
 
	mmax_ök_exã¡
;

1094 
XRe˘™gÀ
 
	mmax_logiˇl_exã¡
;

1095 } 
	tXF⁄tSëExã¡s
;

1101 
_XOM
 *
	tXOM
;

1102 
_XOC
 *
	tXOC
, *
	tXF⁄tSë
;

1105 *
	mch¨s
;

1106 
	mnch¨s
;

1107 
	mdñè
;

1108 
XF⁄tSë
 
	mf⁄t_£t
;

1109 } 
	tXmbTextIãm
;

1112 
wch¨_t
 *
	mch¨s
;

1113 
	mnch¨s
;

1114 
	mdñè
;

1115 
XF⁄tSë
 
	mf⁄t_£t
;

1116 } 
	tXwcTextIãm
;

1118 
	#XNRequúedCh¨Së
 "ªquúedCh¨Së"

	)

1119 
	#XNQuîyOrõ¡©i⁄
 "quîyOrõ¡©i⁄"

	)

1120 
	#XNBa£F⁄tName
 "ba£F⁄tName"

	)

1121 
	#XNOMAutom©ic
 "omAutom©ic"

	)

1122 
	#XNMissögCh¨Së
 "missögCh¨Së"

	)

1123 
	#XNDeÁu…Såög
 "deÁu…Såög"

	)

1124 
	#XNOrõ¡©i⁄
 "‹õ¡©i⁄"

	)

1125 
	#XNDúe˘i⁄ÆDïídítDøwög
 "dúe˘i⁄ÆDïídítDøwög"

	)

1126 
	#XNC⁄ãxtuÆDøwög
 "c⁄ãxtuÆDøwög"

	)

1127 
	#XNF⁄tInfo
 "f⁄tInfo"

	)

1130 
	mch¨£t_cou¡
;

1131 **
	mch¨£t_li°
;

1132 } 
	tXOMCh¨SëLi°
;

1135 
	mXOMOrõ¡©i⁄_LTR_TTB
,

1136 
	mXOMOrõ¡©i⁄_RTL_TTB
,

1137 
	mXOMOrõ¡©i⁄_TTB_LTR
,

1138 
	mXOMOrõ¡©i⁄_TTB_RTL
,

1139 
	mXOMOrõ¡©i⁄_C⁄ãxt


1140 } 
	tXOrõ¡©i⁄
;

1143 
	mnum_‹õ¡©i⁄
;

1144 
XOrõ¡©i⁄
 *
	m‹õ¡©i⁄
;

1145 } 
	tXOMOrõ¡©i⁄
;

1148 
	mnum_f⁄t
;

1149 
XF⁄tSåu˘
 **
	mf⁄t_°ru˘_li°
;

1150 **
	mf⁄t_«me_li°
;

1151 } 
	tXOMF⁄tInfo
;

1153 
_XIM
 *
	tXIM
;

1154 
_XIC
 *
	tXIC
;

1156 (*
	tXIMProc
)(

1157 
	tXIM
,

1158 
	tXPoöãr
,

1159 
	tXPoöãr


1162 
	$Boﬁ
 (*
	tXICProc
)(

1163 
	tXIC
,

1164 
	tXPoöãr
,

1165 
	tXPoöãr


1168 (*
	tXIDProc
)(

1169 
	tDi•œy
*,

1170 
	tXPoöãr
,

1171 
	tXPoöãr


1174 
	tXIMStyÀ
;

1177 
cou¡_°yÀs
;

1178 
XIMStyÀ
 *
suµ‹ãd_°yÀs
;

1179 } 
	tXIMStyÀs
;

1181 
	#XIMPªedôAªa
 0x0001L

	)

1182 
	#XIMPªedôCÆlbacks
 0x0002L

	)

1183 
	#XIMPªedôPosôi⁄
 0x0004L

	)

1184 
	#XIMPªedôNŸhög
 0x0008L

	)

1185 
	#XIMPªedôN⁄e
 0x0010L

	)

1186 
	#XIMSètusAªa
 0x0100L

	)

1187 
	#XIMSètusCÆlbacks
 0x0200L

	)

1188 
	#XIMSètusNŸhög
 0x0400L

	)

1189 
	#XIMSètusN⁄e
 0x0800L

	)

1191 
	#XNVaNe°edLi°
 "XNVaNe°edLi°"

	)

1192 
	#XNQuîyI≈utStyÀ
 "quîyI≈utStyÀ"

	)

1193 
	#XNClõ¡Wödow
 "˛õ¡Wödow"

	)

1194 
	#XNI≈utStyÀ
 "öputStyÀ"

	)

1195 
	#XNFocusWödow
 "focusWödow"

	)

1196 
	#XNResour˚Name
 "ªsour˚Name"

	)

1197 
	#XNResour˚Cœss
 "ªsour˚Cœss"

	)

1198 
	#XNGeomëryCÆlback
 "geomëryCÆlback"

	)

1199 
	#XNDe°royCÆlback
 "de°royCÆlback"

	)

1200 
	#XNFûãrEvíts
 "fûãrEvíts"

	)

1201 
	#XNPªedôSèπCÆlback
 "¥ìdôSèπCÆlback"

	)

1202 
	#XNPªedôD⁄eCÆlback
 "¥ìdôD⁄eCÆlback"

	)

1203 
	#XNPªedôDøwCÆlback
 "¥ìdôDøwCÆlback"

	)

1204 
	#XNPªedôC¨ëCÆlback
 "¥ìdôC¨ëCÆlback"

	)

1205 
	#XNPªedôSèãNŸifyCÆlback
 "¥ìdôSèãNŸifyCÆlback"

	)

1206 
	#XNPªedôAâribuãs
 "¥ìdôAâribuãs"

	)

1207 
	#XNSètusSèπCÆlback
 "°©usSèπCÆlback"

	)

1208 
	#XNSètusD⁄eCÆlback
 "°©usD⁄eCÆlback"

	)

1209 
	#XNSètusDøwCÆlback
 "°©usDøwCÆlback"

	)

1210 
	#XNSètusAâribuãs
 "°©usAâribuãs"

	)

1211 
	#XNAªa
 "¨ó"

	)

1212 
	#XNAªaNìded
 "¨óNìded"

	)

1213 
	#XNSpŸLoˇti⁄
 "•ŸLoˇti⁄"

	)

1214 
	#XNCﬁ‹m≠
 "cﬁ‹M≠"

	)

1215 
	#XNStdCﬁ‹m≠
 "°dCﬁ‹M≠"

	)

1216 
	#XNF‹eground
 "f‹eground"

	)

1217 
	#XNBackground
 "background"

	)

1218 
	#XNBackgroundPixm≠
 "backgroundPixm≠"

	)

1219 
	#XNF⁄tSë
 "f⁄tSë"

	)

1220 
	#XNLöeS∑˚
 "löeS∑˚"

	)

1221 
	#XNCurs‹
 "curs‹"

	)

1223 
	#XNQuîyIMVÆuesLi°
 "quîyIMVÆuesLi°"

	)

1224 
	#XNQuîyICVÆuesLi°
 "quîyICVÆuesLi°"

	)

1225 
	#XNVisibÀPosôi⁄
 "visibÀPosôi⁄"

	)

1226 
	#XNR6PªedôCÆlback
 "r6PªedôCÆlback"

	)

1227 
	#XNSåögC⁄vîsi⁄CÆlback
 "°rögC⁄vîsi⁄CÆlback"

	)

1228 
	#XNSåögC⁄vîsi⁄
 "°rögC⁄vîsi⁄"

	)

1229 
	#XNRe£tSèã
 "ª£tSèã"

	)

1230 
	#XNHŸKey
 "hŸKey"

	)

1231 
	#XNHŸKeySèã
 "hŸKeySèã"

	)

1232 
	#XNPªedôSèã
 "¥ìdôSèã"

	)

1233 
	#XNSï¨©‹ofNe°edLi°
 "£∑øt‹ofNe°edLi°"

	)

1235 
	#XBuf„rOvîÊow
 -1

	)

1236 
	#XLookupN⁄e
 1

	)

1237 
	#XLookupCh¨s
 2

	)

1238 
	#XLookupKeySym
 3

	)

1239 
	#XLookupBŸh
 4

	)

1241 *
	tXVaNe°edLi°
;

1244 
XPoöãr
 
˛õ¡_d©a
;

1245 
XIMProc
 
ˇŒback
;

1246 } 
	tXIMCÆlback
;

1249 
XPoöãr
 
˛õ¡_d©a
;

1250 
XICProc
 
ˇŒback
;

1251 } 
	tXICCÆlback
;

1253 
	tXIMFìdback
;

1255 
	#XIMRevî£
 1L

	)

1256 
	#XIMUndîlöe
 (1L<<1)

	)

1257 
	#XIMHighlight
 (1L<<2)

	)

1258 
	#XIMPrim¨y
 (1L<<5)

	)

1259 
	#XIMSec⁄d¨y
 (1L<<6)

	)

1260 
	#XIMTîtüry
 (1L<<7)

	)

1261 
	#XIMVisibÀToF‹w¨d
 (1L<<8)

	)

1262 
	#XIMVisibÀToBackw‹d
 (1L<<9)

	)

1263 
	#XIMVisibÀToCíãr
 (1L<<10)

	)

1265 
	s_XIMText
 {

1266 
Àngth
;

1267 
XIMFìdback
 *
„edback
;

1268 
Boﬁ
 
ícodög_is_wch¨
;

1270 *
mu…i_byã
;

1271 
wch¨_t
 *
wide_ch¨
;

1272 } 
°rög
;

1273 } 
	tXIMText
;

1275 
	tXIMPªedôSèã
;

1277 
	#XIMPªedôUnKnown
 0L

	)

1278 
	#XIMPªedôE«bÀ
 1L

	)

1279 
	#XIMPªedôDißbÀ
 (1L<<1)

	)

1281 
	s_XIMPªedôSèãNŸifyCÆlbackSåu˘
 {

1282 
XIMPªedôSèã
 
°©e
;

1283 } 
	tXIMPªedôSèãNŸifyCÆlbackSåu˘
;

1285 
	tXIMRe£tSèã
;

1287 
	#XIMInôülSèã
 1L

	)

1288 
	#XIMPª£rveSèã
 (1L<<1)

	)

1290 
	tXIMSåögC⁄vîsi⁄Fìdback
;

1292 
	#XIMSåögC⁄vîsi⁄Le·Edge
 (0x00000001)

	)

1293 
	#XIMSåögC⁄vîsi⁄RightEdge
 (0x00000002)

	)

1294 
	#XIMSåögC⁄vîsi⁄T›Edge
 (0x00000004)

	)

1295 
	#XIMSåögC⁄vîsi⁄BŸtomEdge
 (0x00000008)

	)

1296 
	#XIMSåögC⁄vîsi⁄C⁄˚Æed
 (0x00000010)

	)

1297 
	#XIMSåögC⁄vîsi⁄Wøµed
 (0x00000020)

	)

1299 
	s_XIMSåögC⁄vîsi⁄Text
 {

1300 
Àngth
;

1301 
XIMSåögC⁄vîsi⁄Fìdback
 *
„edback
;

1302 
Boﬁ
 
ícodög_is_wch¨
;

1304 *
mbs
;

1305 
wch¨_t
 *
wcs
;

1306 } 
°rög
;

1307 } 
	tXIMSåögC⁄vîsi⁄Text
;

1309 
	tXIMSåögC⁄vîsi⁄Posôi⁄
;

1311 
	tXIMSåögC⁄vîsi⁄Ty≥
;

1313 
	#XIMSåögC⁄vîsi⁄Buf„r
 (0x0001)

	)

1314 
	#XIMSåögC⁄vîsi⁄Löe
 (0x0002)

	)

1315 
	#XIMSåögC⁄vîsi⁄W‹d
 (0x0003)

	)

1316 
	#XIMSåögC⁄vîsi⁄Ch¨
 (0x0004)

	)

1318 
	tXIMSåögC⁄vîsi⁄O≥øti⁄
;

1320 
	#XIMSåögC⁄vîsi⁄Sub°ôuti⁄
 (0x0001)

	)

1321 
	#XIMSåögC⁄vîsi⁄RërõvÆ
 (0x0002)

	)

1324 
XIMF‹w¨dCh¨
, 
XIMBackw¨dCh¨
,

1325 
XIMF‹w¨dW‹d
, 
XIMBackw¨dW‹d
,

1326 
XIMC¨ëUp
, 
XIMC¨ëDown
,

1327 
XIMNextLöe
, 
XIMPªviousLöe
,

1328 
XIMLöeSèπ
, 
XIMLöeEnd
,

1329 
XIMAbsﬁuãPosôi⁄
,

1330 
XIMD⁄tCh™ge


1331 } 
	tXIMC¨ëDúe˘i⁄
;

1333 
	s_XIMSåögC⁄vîsi⁄CÆlbackSåu˘
 {

1334 
XIMSåögC⁄vîsi⁄Posôi⁄
 
posôi⁄
;

1335 
XIMC¨ëDúe˘i⁄
 
dúe˘i⁄
;

1336 
XIMSåögC⁄vîsi⁄O≥øti⁄
 
›î©i⁄
;

1337 
Á˘‹
;

1338 
XIMSåögC⁄vîsi⁄Text
 *
ãxt
;

1339 } 
	tXIMSåögC⁄vîsi⁄CÆlbackSåu˘
;

1341 
	s_XIMPªedôDøwCÆlbackSåu˘
 {

1342 
ˇªt
;

1343 
chg_fú°
;

1344 
chg_Àngth
;

1345 
XIMText
 *
ãxt
;

1346 } 
	tXIMPªedôDøwCÆlbackSåu˘
;

1349 
XIMIsInvisibÀ
,

1350 
XIMIsPrim¨y
,

1351 
XIMIsSec⁄d¨y


1352 } 
	tXIMC¨ëStyÀ
;

1354 
	s_XIMPªedôC¨ëCÆlbackSåu˘
 {

1355 
posôi⁄
;

1356 
XIMC¨ëDúe˘i⁄
 
dúe˘i⁄
;

1357 
XIMC¨ëStyÀ
 
°yÀ
;

1358 } 
	tXIMPªedôC¨ëCÆlbackSåu˘
;

1361 
XIMTextTy≥
,

1362 
XIMBôm≠Ty≥


1363 } 
	tXIMSètusD©aTy≥
;

1365 
	s_XIMSètusDøwCÆlbackSåu˘
 {

1366 
XIMSètusD©aTy≥
 
ty≥
;

1368 
XIMText
 *
ãxt
;

1369 
Pixm≠
 
bôm≠
;

1370 } 
d©a
;

1371 } 
	tXIMSètusDøwCÆlbackSåu˘
;

1373 
	s_XIMHŸKeyTriggî
 {

1374 
KeySym
 
keysym
;

1375 
modifõr
;

1376 
modifõr_mask
;

1377 } 
	tXIMHŸKeyTriggî
;

1379 
	s_XIMHŸKeyTriggîs
 {

1380 
num_hŸ_key
;

1381 
XIMHŸKeyTriggî
 *
key
;

1382 } 
	tXIMHŸKeyTriggîs
;

1384 
	tXIMHŸKeySèã
;

1386 
	#XIMHŸKeySèãON
 (0x0001L)

	)

1387 
	#XIMHŸKeySèãOFF
 (0x0002L)

	)

1390 
cou¡_vÆues
;

1391 **
suµ‹ãd_vÆues
;

1392 } 
	tXIMVÆuesLi°
;

1394 
_XFUNCPROTOBEGIN


1396 #i‡
	`deföed
(
WIN32
Ë&& !deföed(
_XLIBINT_
)

1397 
	#_Xdebug
 (*
_Xdebug_p
)

	)

1400 
_Xdebug
;

1402 
XF⁄tSåu˘
 *
	`XLﬂdQuîyF⁄t
(

1403 
Di•œy
* ,

1404 
_Xc⁄°
 *

1407 
XF⁄tSåu˘
 *
	`XQuîyF⁄t
(

1408 
Di•œy
* ,

1409 
XID


1413 
XTimeCo‹d
 *
	`XGëMŸi⁄Evíts
(

1414 
Di•œy
* ,

1415 
Wödow
 ,

1416 
Time
 ,

1417 
Time
 ,

1421 
XModifõrKeym≠
 *
	`XDñëeModifõrm≠E¡ry
(

1422 
XModifõrKeym≠
* ,

1423 #i‡
NìdWidePrŸŸy≥s


1426 
KeyCode
 ,

1431 
XModifõrKeym≠
 *
	`XGëModifõrM≠pög
(

1432 
Di•œy
*

1435 
XModifõrKeym≠
 *
	`XIn£πModifõrm≠E¡ry
(

1436 
XModifõrKeym≠
* ,

1437 #i‡
NìdWidePrŸŸy≥s


1440 
KeyCode
 ,

1445 
XModifõrKeym≠
 *
	`XNewModifõrm≠
(

1449 
XImage
 *
	`XCª©eImage
(

1450 
Di•œy
* ,

1451 
VisuÆ
* ,

1461 
Sètus
 
	`XInôImage
(

1462 
XImage
*

1464 
XImage
 *
	`XGëImage
(

1465 
Di•œy
* ,

1466 
DøwabÀ
 ,

1474 
XImage
 *
	`XGëSubImage
(

1475 
Di•œy
* ,

1476 
DøwabÀ
 ,

1483 
XImage
* ,

1491 
Di•œy
 *
	`XO≥nDi•œy
(

1492 
_Xc⁄°
 *

1495 
	`XrmInôülize
(

1499 *
	`XFëchByãs
(

1500 
Di•œy
* ,

1503 *
	`XFëchBuf„r
(

1504 
Di•œy
* ,

1508 *
	`XGëAtomName
(

1509 
Di•œy
* ,

1510 
Atom


1512 
Sètus
 
	`XGëAtomNames
(

1513 
Di•œy
* ,

1514 
Atom
* ,

1518 *
	`XGëDeÁu…
(

1519 
Di•œy
* ,

1520 
_Xc⁄°
 * ,

1521 
_Xc⁄°
 *

1523 *
	`XDi•œyName
(

1524 
_Xc⁄°
 *

1526 *
	`XKeysymToSåög
(

1527 
KeySym


1530 (*
	$XSynchr⁄ize
(

1531 
Di•œy
* ,

1532 
Boﬁ


1534 
Di•œy
*

1536 (*
	`XSëA·îFun˘i⁄
(

1537 
Di•œy
* ,

1539 
Di•œy
*

1542 
Di•œy
*

1544 
Atom
 
	`XI¡înAtom
(

1545 
Di•œy
* ,

1546 
_Xc⁄°
 * ,

1547 
Boﬁ


1549 
Sètus
 
	`XI¡înAtoms
(

1550 
Di•œy
* ,

1553 
Boﬁ
 ,

1554 
Atom
*

1556 
Cﬁ‹m≠
 
	`XC›yCﬁ‹m≠AndFªe
(

1557 
Di•œy
* ,

1558 
Cﬁ‹m≠


1560 
Cﬁ‹m≠
 
	`XCª©eCﬁ‹m≠
(

1561 
Di•œy
* ,

1562 
Wödow
 ,

1563 
VisuÆ
* ,

1566 
Curs‹
 
	`XCª©ePixm≠Curs‹
(

1567 
Di•œy
* ,

1568 
Pixm≠
 ,

1569 
Pixm≠
 ,

1570 
XCﬁ‹
* ,

1571 
XCﬁ‹
* ,

1575 
Curs‹
 
	`XCª©eGlyphCurs‹
(

1576 
Di•œy
* ,

1577 
F⁄t
 ,

1578 
F⁄t
 ,

1581 
XCﬁ‹
 
_Xc⁄°
 * ,

1582 
XCﬁ‹
 
_Xc⁄°
 *

1584 
Curs‹
 
	`XCª©eF⁄tCurs‹
(

1585 
Di•œy
* ,

1588 
F⁄t
 
	`XLﬂdF⁄t
(

1589 
Di•œy
* ,

1590 
_Xc⁄°
 *

1592 
GC
 
	`XCª©eGC
(

1593 
Di•œy
* ,

1594 
DøwabÀ
 ,

1596 
XGCVÆues
*

1598 
GC⁄ãxt
 
	`XGC⁄ãxtFromGC
(

1599 
GC


1601 
	`XFlushGC
(

1602 
Di•œy
* ,

1603 
GC


1605 
Pixm≠
 
	`XCª©ePixm≠
(

1606 
Di•œy
* ,

1607 
DøwabÀ
 ,

1612 
Pixm≠
 
	`XCª©eBôm≠FromD©a
(

1613 
Di•œy
* ,

1614 
DøwabÀ
 ,

1615 
_Xc⁄°
 * ,

1619 
Pixm≠
 
	`XCª©ePixm≠FromBôm≠D©a
(

1620 
Di•œy
* ,

1621 
DøwabÀ
 ,

1629 
Wödow
 
	`XCª©eSim∂eWödow
(

1630 
Di•œy
* ,

1631 
Wödow
 ,

1640 
Wödow
 
	`XGëSñe˘i⁄Ow√r
(

1641 
Di•œy
* ,

1642 
Atom


1644 
Wödow
 
	`XCª©eWödow
(

1645 
Di•œy
* ,

1646 
Wödow
 ,

1654 
VisuÆ
* ,

1656 
XSëWödowAâribuãs
*

1658 
Cﬁ‹m≠
 *
	`XLi°In°ÆÀdCﬁ‹m≠s
(

1659 
Di•œy
* ,

1660 
Wödow
 ,

1663 **
	`XLi°F⁄ts
(

1664 
Di•œy
* ,

1665 
_Xc⁄°
 * ,

1669 **
	`XLi°F⁄tsWôhInfo
(

1670 
Di•œy
* ,

1671 
_Xc⁄°
 * ,

1674 
XF⁄tSåu˘
**

1676 **
	`XGëF⁄tP©h
(

1677 
Di•œy
* ,

1680 **
	`XLi°Exãnsi⁄s
(

1681 
Di•œy
* ,

1684 
Atom
 *
	`XLi°Pr›îtõs
(

1685 
Di•œy
* ,

1686 
Wödow
 ,

1689 
XHo°Addªss
 *
	`XLi°Ho°s
(

1690 
Di•œy
* ,

1692 
Boﬁ
*

1694 
KeySym
 
	`XKeycodeToKeysym
(

1695 
Di•œy
* ,

1696 #i‡
NìdWidePrŸŸy≥s


1699 
KeyCode
 ,

1703 
KeySym
 
	`XLookupKeysym
(

1704 
XKeyEvít
* ,

1707 
KeySym
 *
	`XGëKeybﬂrdM≠pög
(

1708 
Di•œy
* ,

1709 #i‡
NìdWidePrŸŸy≥s


1712 
KeyCode
 ,

1717 
KeySym
 
	`XSåögToKeysym
(

1718 
_Xc⁄°
 *

1720 
	`XMaxReque°Size
(

1721 
Di•œy
*

1723 
	`XExãndedMaxReque°Size
(

1724 
Di•œy
*

1726 *
	`XResour˚M™agîSåög
(

1727 
Di•œy
*

1729 *
	`XS¸ìnResour˚Såög
(

1730 
S¸ìn
*

1732 
	`XDi•œyMŸi⁄Buf„rSize
(

1733 
Di•œy
*

1735 
VisuÆID
 
	`XVisuÆIDFromVisuÆ
(

1736 
VisuÆ
*

1741 
Sètus
 
	`XInôThªads
(

1745 
	`XLockDi•œy
(

1746 
Di•œy
*

1749 
	`XU∆ockDi•œy
(

1750 
Di•œy
*

1755 
XExtCodes
 *
	`XInôExãnsi⁄
(

1756 
Di•œy
* ,

1757 
_Xc⁄°
 *

1760 
XExtCodes
 *
	`XAddExãnsi⁄
(

1761 
Di•œy
*

1763 
XExtD©a
 *
	`XFödOnExãnsi⁄Li°
(

1764 
XExtD©a
** ,

1767 
XExtD©a
 **
	`XEHódOfExãnsi⁄Li°
(

1768 
XED©aObje˘


1772 
Wödow
 
	`XRoŸWödow
(

1773 
Di•œy
* ,

1776 
Wödow
 
	`XDeÁu…RoŸWödow
(

1777 
Di•œy
*

1779 
Wödow
 
	`XRoŸWödowOfS¸ìn
(

1780 
S¸ìn
*

1782 
VisuÆ
 *
	`XDeÁu…VisuÆ
(

1783 
Di•œy
* ,

1786 
VisuÆ
 *
	`XDeÁu…VisuÆOfS¸ìn
(

1787 
S¸ìn
*

1789 
GC
 
	`XDeÁu…GC
(

1790 
Di•œy
* ,

1793 
GC
 
	`XDeÁu…GCOfS¸ìn
(

1794 
S¸ìn
*

1796 
	`XBœckPixñ
(

1797 
Di•œy
* ,

1800 
	`XWhôePixñ
(

1801 
Di•œy
* ,

1804 
	`XAŒPœ√s
(

1807 
	`XBœckPixñOfS¸ìn
(

1808 
S¸ìn
*

1810 
	`XWhôePixñOfS¸ìn
(

1811 
S¸ìn
*

1813 
	`XNextReque°
(

1814 
Di•œy
*

1816 
	`XLa°KnownReque°Pro˚s£d
(

1817 
Di•œy
*

1819 *
	`XSîvîVíd‹
(

1820 
Di•œy
*

1822 *
	`XDi•œySåög
(

1823 
Di•œy
*

1825 
Cﬁ‹m≠
 
	`XDeÁu…Cﬁ‹m≠
(

1826 
Di•œy
* ,

1829 
Cﬁ‹m≠
 
	`XDeÁu…Cﬁ‹m≠OfS¸ìn
(

1830 
S¸ìn
*

1832 
Di•œy
 *
	`XDi•œyOfS¸ìn
(

1833 
S¸ìn
*

1835 
S¸ìn
 *
	`XS¸ìnOfDi•œy
(

1836 
Di•œy
* ,

1839 
S¸ìn
 *
	`XDeÁu…S¸ìnOfDi•œy
(

1840 
Di•œy
*

1842 
	`XEvítMaskOfS¸ìn
(

1843 
S¸ìn
*

1846 
	`XS¸ìnNumbîOfS¸ìn
(

1847 
S¸ìn
*

1850 (*
	tXEº‹H™dÀr
) (

1851 
	tDi•œy
* ,

1852 
	tXEº‹Evít
*

1855 
XEº‹H™dÀr
 
	`XSëEº‹H™dÀr
 (

1856 
XEº‹H™dÀr


1860 (*
	tXIOEº‹H™dÀr
) (

1861 
	tDi•œy
*

1864 
XIOEº‹H™dÀr
 
	`XSëIOEº‹H™dÀr
 (

1865 
XIOEº‹H™dÀr


1869 
XPixm≠F‹m©VÆues
 *
	`XLi°Pixm≠F‹m©s
(

1870 
Di•œy
* ,

1873 *
	`XLi°Dïths
(

1874 
Di•œy
* ,

1881 
Sètus
 
	`XRec⁄figuªWMWödow
(

1882 
Di•œy
* ,

1883 
Wödow
 ,

1886 
XWödowCh™ges
*

1889 
Sètus
 
	`XGëWMPrŸocﬁs
(

1890 
Di•œy
* ,

1891 
Wödow
 ,

1892 
Atom
** ,

1895 
Sètus
 
	`XSëWMPrŸocﬁs
(

1896 
Di•œy
* ,

1897 
Wödow
 ,

1898 
Atom
* ,

1901 
Sètus
 
	`XIc⁄ifyWödow
(

1902 
Di•œy
* ,

1903 
Wödow
 ,

1906 
Sètus
 
	`XWôhdøwWödow
(

1907 
Di•œy
* ,

1908 
Wödow
 ,

1911 
Sètus
 
	`XGëComm™d
(

1912 
Di•œy
* ,

1913 
Wödow
 ,

1917 
Sètus
 
	`XGëWMCﬁ‹m≠Wödows
(

1918 
Di•œy
* ,

1919 
Wödow
 ,

1920 
Wödow
** ,

1923 
Sètus
 
	`XSëWMCﬁ‹m≠Wödows
(

1924 
Di•œy
* ,

1925 
Wödow
 ,

1926 
Wödow
* ,

1929 
	`XFªeSåögLi°
(

1932 
	`XSëTønsõ¡F‹Höt
(

1933 
Di•œy
* ,

1934 
Wödow
 ,

1935 
Wödow


1940 
	`XA˘iv©eS¸ìnSavî
(

1941 
Di•œy
*

1944 
	`XAddHo°
(

1945 
Di•œy
* ,

1946 
XHo°Addªss
*

1949 
	`XAddHo°s
(

1950 
Di•œy
* ,

1951 
XHo°Addªss
* ,

1955 
	`XAddToExãnsi⁄Li°
(

1956 
_XExtD©a
** ,

1957 
XExtD©a
*

1960 
	`XAddToSaveSë
(

1961 
Di•œy
* ,

1962 
Wödow


1965 
Sètus
 
	`XAŒocCﬁ‹
(

1966 
Di•œy
* ,

1967 
Cﬁ‹m≠
 ,

1968 
XCﬁ‹
*

1971 
Sètus
 
	`XAŒocCﬁ‹Cñls
(

1972 
Di•œy
* ,

1973 
Cﬁ‹m≠
 ,

1974 
Boﬁ
 ,

1981 
Sètus
 
	`XAŒocCﬁ‹Pœ√s
(

1982 
Di•œy
* ,

1983 
Cﬁ‹m≠
 ,

1984 
Boﬁ
 ,

1995 
Sètus
 
	`XAŒocNamedCﬁ‹
(

1996 
Di•œy
* ,

1997 
Cﬁ‹m≠
 ,

1998 
_Xc⁄°
 * ,

1999 
XCﬁ‹
* ,

2000 
XCﬁ‹
*

2003 
	`XAŒowEvíts
(

2004 
Di•œy
* ,

2006 
Time


2009 
	`XAutoRïótOff
(

2010 
Di•œy
*

2013 
	`XAutoRïótOn
(

2014 
Di•œy
*

2017 
	`XBñl
(

2018 
Di•œy
* ,

2022 
	`XBôm≠BôOrdî
(

2023 
Di•œy
*

2026 
	`XBôm≠Pad
(

2027 
Di•œy
*

2030 
	`XBôm≠Unô
(

2031 
Di•œy
*

2034 
	`XCñlsOfS¸ìn
(

2035 
S¸ìn
*

2038 
	`XCh™geA˘ivePoöãrGøb
(

2039 
Di•œy
* ,

2041 
Curs‹
 ,

2042 
Time


2045 
	`XCh™geGC
(

2046 
Di•œy
* ,

2047 
GC
 ,

2049 
XGCVÆues
*

2052 
	`XCh™geKeybﬂrdC⁄åﬁ
(

2053 
Di•œy
* ,

2055 
XKeybﬂrdC⁄åﬁ
*

2058 
	`XCh™geKeybﬂrdM≠pög
(

2059 
Di•œy
* ,

2062 
KeySym
* ,

2066 
	`XCh™gePoöãrC⁄åﬁ
(

2067 
Di•œy
* ,

2068 
Boﬁ
 ,

2069 
Boﬁ
 ,

2075 
	`XCh™gePr›îty
(

2076 
Di•œy
* ,

2077 
Wödow
 ,

2078 
Atom
 ,

2079 
Atom
 ,

2082 
_Xc⁄°
 * ,

2086 
	`XCh™geSaveSë
(

2087 
Di•œy
* ,

2088 
Wödow
 ,

2092 
	`XCh™geWödowAâribuãs
(

2093 
Di•œy
* ,

2094 
Wödow
 ,

2096 
XSëWödowAâribuãs
*

2099 
Boﬁ
 
	`XCheckIfEvít
(

2100 
Di•œy
* ,

2101 
XEvít
* ,

2102 
	$Boﬁ
 (*) (

2103 
Di•œy
* ,

2104 
XEvít
* ,

2105 
XPoöãr


2107 
XPoöãr


2110 
Boﬁ
 
	`XCheckMaskEvít
(

2111 
Di•œy
* ,

2113 
XEvít
*

2116 
Boﬁ
 
	`XCheckTy≥dEvít
(

2117 
Di•œy
* ,

2119 
XEvít
*

2122 
Boﬁ
 
	`XCheckTy≥dWödowEvít
(

2123 
Di•œy
* ,

2124 
Wödow
 ,

2126 
XEvít
*

2129 
Boﬁ
 
	`XCheckWödowEvít
(

2130 
Di•œy
* ,

2131 
Wödow
 ,

2133 
XEvít
*

2136 
	`XCúcuœãSubwödows
(

2137 
Di•œy
* ,

2138 
Wödow
 ,

2142 
	`XCúcuœãSubwödowsDown
(

2143 
Di•œy
* ,

2144 
Wödow


2147 
	`XCúcuœãSubwödowsUp
(

2148 
Di•œy
* ,

2149 
Wödow


2152 
	`XCÀ¨Aªa
(

2153 
Di•œy
* ,

2154 
Wödow
 ,

2159 
Boﬁ


2162 
	`XCÀ¨Wödow
(

2163 
Di•œy
* ,

2164 
Wödow


2167 
	`XClo£Di•œy
(

2168 
Di•œy
*

2171 
	`XC⁄figuªWödow
(

2172 
Di•œy
* ,

2173 
Wödow
 ,

2175 
XWödowCh™ges
*

2178 
	`XC⁄√˘i⁄Numbî
(

2179 
Di•œy
*

2182 
	`XC⁄vîtSñe˘i⁄
(

2183 
Di•œy
* ,

2184 
Atom
 ,

2185 
Atom
 ,

2186 
Atom
 ,

2187 
Wödow
 ,

2188 
Time


2191 
	`XC›yAªa
(

2192 
Di•œy
* ,

2193 
DøwabÀ
 ,

2194 
DøwabÀ
 ,

2195 
GC
 ,

2204 
	`XC›yGC
(

2205 
Di•œy
* ,

2206 
GC
 ,

2208 
GC


2211 
	`XC›yPœ√
(

2212 
Di•œy
* ,

2213 
DøwabÀ
 ,

2214 
DøwabÀ
 ,

2215 
GC
 ,

2225 
	`XDeÁu…Dïth
(

2226 
Di•œy
* ,

2230 
	`XDeÁu…DïthOfS¸ìn
(

2231 
S¸ìn
*

2234 
	`XDeÁu…S¸ìn
(

2235 
Di•œy
*

2238 
	`XDeföeCurs‹
(

2239 
Di•œy
* ,

2240 
Wödow
 ,

2241 
Curs‹


2244 
	`XDñëePr›îty
(

2245 
Di•œy
* ,

2246 
Wödow
 ,

2247 
Atom


2250 
	`XDe°royWödow
(

2251 
Di•œy
* ,

2252 
Wödow


2255 
	`XDe°roySubwödows
(

2256 
Di•œy
* ,

2257 
Wödow


2260 
	`XD€sBackögSt‹e
(

2261 
S¸ìn
*

2264 
Boﬁ
 
	`XD€sSaveUndîs
(

2265 
S¸ìn
*

2268 
	`XDißbÀAc˚ssC⁄åﬁ
(

2269 
Di•œy
*

2273 
	`XDi•œyCñls
(

2274 
Di•œy
* ,

2278 
	`XDi•œyHeight
(

2279 
Di•œy
* ,

2283 
	`XDi•œyHeightMM
(

2284 
Di•œy
* ,

2288 
	`XDi•œyKeycodes
(

2289 
Di•œy
* ,

2294 
	`XDi•œyPœ√s
(

2295 
Di•œy
* ,

2299 
	`XDi•œyWidth
(

2300 
Di•œy
* ,

2304 
	`XDi•œyWidthMM
(

2305 
Di•œy
* ,

2309 
	`XDøwArc
(

2310 
Di•œy
* ,

2311 
DøwabÀ
 ,

2312 
GC
 ,

2321 
	`XDøwArcs
(

2322 
Di•œy
* ,

2323 
DøwabÀ
 ,

2324 
GC
 ,

2325 
XArc
* ,

2329 
	`XDøwImageSåög
(

2330 
Di•œy
* ,

2331 
DøwabÀ
 ,

2332 
GC
 ,

2335 
_Xc⁄°
 * ,

2339 
	`XDøwImageSåög16
(

2340 
Di•œy
* ,

2341 
DøwabÀ
 ,

2342 
GC
 ,

2345 
_Xc⁄°
 
XCh¨2b
* ,

2349 
	`XDøwLöe
(

2350 
Di•œy
* ,

2351 
DøwabÀ
 ,

2352 
GC
 ,

2359 
	`XDøwLöes
(

2360 
Di•œy
* ,

2361 
DøwabÀ
 ,

2362 
GC
 ,

2363 
XPoöt
* ,

2368 
	`XDøwPoöt
(

2369 
Di•œy
* ,

2370 
DøwabÀ
 ,

2371 
GC
 ,

2376 
	`XDøwPoöts
(

2377 
Di•œy
* ,

2378 
DøwabÀ
 ,

2379 
GC
 ,

2380 
XPoöt
* ,

2385 
	`XDøwRe˘™gÀ
(

2386 
Di•œy
* ,

2387 
DøwabÀ
 ,

2388 
GC
 ,

2395 
	`XDøwRe˘™gÀs
(

2396 
Di•œy
* ,

2397 
DøwabÀ
 ,

2398 
GC
 ,

2399 
XRe˘™gÀ
* ,

2403 
	`XDøwSegmíts
(

2404 
Di•œy
* ,

2405 
DøwabÀ
 ,

2406 
GC
 ,

2407 
XSegmít
* ,

2411 
	`XDøwSåög
(

2412 
Di•œy
* ,

2413 
DøwabÀ
 ,

2414 
GC
 ,

2417 
_Xc⁄°
 * ,

2421 
	`XDøwSåög16
(

2422 
Di•œy
* ,

2423 
DøwabÀ
 ,

2424 
GC
 ,

2427 
_Xc⁄°
 
XCh¨2b
* ,

2431 
	`XDøwText
(

2432 
Di•œy
* ,

2433 
DøwabÀ
 ,

2434 
GC
 ,

2437 
XTextIãm
* ,

2441 
	`XDøwText16
(

2442 
Di•œy
* ,

2443 
DøwabÀ
 ,

2444 
GC
 ,

2447 
XTextIãm16
* ,

2451 
	`XE«bÀAc˚ssC⁄åﬁ
(

2452 
Di•œy
*

2455 
	`XEvítsQueued
(

2456 
Di•œy
* ,

2460 
Sètus
 
	`XFëchName
(

2461 
Di•œy
* ,

2462 
Wödow
 ,

2466 
	`XFûlArc
(

2467 
Di•œy
* ,

2468 
DøwabÀ
 ,

2469 
GC
 ,

2478 
	`XFûlArcs
(

2479 
Di•œy
* ,

2480 
DøwabÀ
 ,

2481 
GC
 ,

2482 
XArc
* ,

2486 
	`XFûlPﬁyg⁄
(

2487 
Di•œy
* ,

2488 
DøwabÀ
 ,

2489 
GC
 ,

2490 
XPoöt
* ,

2496 
	`XFûlRe˘™gÀ
(

2497 
Di•œy
* ,

2498 
DøwabÀ
 ,

2499 
GC
 ,

2506 
	`XFûlRe˘™gÀs
(

2507 
Di•œy
* ,

2508 
DøwabÀ
 ,

2509 
GC
 ,

2510 
XRe˘™gÀ
* ,

2514 
	`XFlush
(

2515 
Di•œy
*

2518 
	`XF‹˚S¸ìnSavî
(

2519 
Di•œy
* ,

2523 
	`XFªe
(

2527 
	`XFªeCﬁ‹m≠
(

2528 
Di•œy
* ,

2529 
Cﬁ‹m≠


2532 
	`XFªeCﬁ‹s
(

2533 
Di•œy
* ,

2534 
Cﬁ‹m≠
 ,

2540 
	`XFªeCurs‹
(

2541 
Di•œy
* ,

2542 
Curs‹


2545 
	`XFªeExãnsi⁄Li°
(

2549 
	`XFªeF⁄t
(

2550 
Di•œy
* ,

2551 
XF⁄tSåu˘
*

2554 
	`XFªeF⁄tInfo
(

2556 
XF⁄tSåu˘
* ,

2560 
	`XFªeF⁄tNames
(

2564 
	`XFªeF⁄tP©h
(

2568 
	`XFªeGC
(

2569 
Di•œy
* ,

2570 
GC


2573 
	`XFªeModifõrm≠
(

2574 
XModifõrKeym≠
*

2577 
	`XFªePixm≠
(

2578 
Di•œy
* ,

2579 
Pixm≠


2582 
	`XGeomëry
(

2583 
Di•œy
* ,

2585 
_Xc⁄°
 * ,

2586 
_Xc⁄°
 * ,

2598 
	`XGëEº‹D©aba£Text
(

2599 
Di•œy
* ,

2600 
_Xc⁄°
 * ,

2601 
_Xc⁄°
 * ,

2602 
_Xc⁄°
 * ,

2607 
	`XGëEº‹Text
(

2608 
Di•œy
* ,

2614 
Boﬁ
 
	`XGëF⁄tPr›îty
(

2615 
XF⁄tSåu˘
* ,

2616 
Atom
 ,

2620 
Sètus
 
	`XGëGCVÆues
(

2621 
Di•œy
* ,

2622 
GC
 ,

2624 
XGCVÆues
*

2627 
Sètus
 
	`XGëGeomëry
(

2628 
Di•œy
* ,

2629 
DøwabÀ
 ,

2630 
Wödow
* ,

2639 
Sètus
 
	`XGëIc⁄Name
(

2640 
Di•œy
* ,

2641 
Wödow
 ,

2645 
	`XGëI≈utFocus
(

2646 
Di•œy
* ,

2647 
Wödow
* ,

2651 
	`XGëKeybﬂrdC⁄åﬁ
(

2652 
Di•œy
* ,

2653 
XKeybﬂrdSèã
*

2656 
	`XGëPoöãrC⁄åﬁ
(

2657 
Di•œy
* ,

2663 
	`XGëPoöãrM≠pög
(

2664 
Di•œy
* ,

2669 
	`XGëS¸ìnSavî
(

2670 
Di•œy
* ,

2677 
Sètus
 
	`XGëTønsõ¡F‹Höt
(

2678 
Di•œy
* ,

2679 
Wödow
 ,

2680 
Wödow
*

2683 
	`XGëWödowPr›îty
(

2684 
Di•œy
* ,

2685 
Wödow
 ,

2686 
Atom
 ,

2689 
Boﬁ
 ,

2690 
Atom
 ,

2691 
Atom
* ,

2698 
Sètus
 
	`XGëWödowAâribuãs
(

2699 
Di•œy
* ,

2700 
Wödow
 ,

2701 
XWödowAâribuãs
*

2704 
	`XGøbBuâ⁄
(

2705 
Di•œy
* ,

2708 
Wödow
 ,

2709 
Boﬁ
 ,

2713 
Wödow
 ,

2714 
Curs‹


2717 
	`XGøbKey
(

2718 
Di•œy
* ,

2721 
Wödow
 ,

2722 
Boﬁ
 ,

2727 
	`XGøbKeybﬂrd
(

2728 
Di•œy
* ,

2729 
Wödow
 ,

2730 
Boﬁ
 ,

2733 
Time


2736 
	`XGøbPoöãr
(

2737 
Di•œy
* ,

2738 
Wödow
 ,

2739 
Boﬁ
 ,

2743 
Wödow
 ,

2744 
Curs‹
 ,

2745 
Time


2748 
	`XGøbSîvî
(

2749 
Di•œy
*

2752 
	`XHeightMMOfS¸ìn
(

2753 
S¸ìn
*

2756 
	`XHeightOfS¸ìn
(

2757 
S¸ìn
*

2760 
	`XIfEvít
(

2761 
Di•œy
* ,

2762 
XEvít
* ,

2763 
	$Boﬁ
 (*) (

2764 
Di•œy
* ,

2765 
XEvít
* ,

2766 
XPoöãr


2768 
XPoöãr


2771 
	`XImageByãOrdî
(

2772 
Di•œy
*

2775 
	`XIn°ÆlCﬁ‹m≠
(

2776 
Di•œy
* ,

2777 
Cﬁ‹m≠


2780 
KeyCode
 
	`XKeysymToKeycode
(

2781 
Di•œy
* ,

2782 
KeySym


2785 
	`XKûlClõ¡
(

2786 
Di•œy
* ,

2787 
XID


2790 
Sètus
 
	`XLookupCﬁ‹
(

2791 
Di•œy
* ,

2792 
Cﬁ‹m≠
 ,

2793 
_Xc⁄°
 * ,

2794 
XCﬁ‹
* ,

2795 
XCﬁ‹
*

2798 
	`XLowîWödow
(

2799 
Di•œy
* ,

2800 
Wödow


2803 
	`XM≠Rai£d
(

2804 
Di•œy
* ,

2805 
Wödow


2808 
	`XM≠Subwödows
(

2809 
Di•œy
* ,

2810 
Wödow


2813 
	`XM≠Wödow
(

2814 
Di•œy
* ,

2815 
Wödow


2818 
	`XMaskEvít
(

2819 
Di•œy
* ,

2821 
XEvít
*

2824 
	`XMaxCm≠sOfS¸ìn
(

2825 
S¸ìn
*

2828 
	`XMöCm≠sOfS¸ìn
(

2829 
S¸ìn
*

2832 
	`XMoveResizeWödow
(

2833 
Di•œy
* ,

2834 
Wödow
 ,

2841 
	`XMoveWödow
(

2842 
Di•œy
* ,

2843 
Wödow
 ,

2848 
	`XNextEvít
(

2849 
Di•œy
* ,

2850 
XEvít
*

2853 
	`XNoOp
(

2854 
Di•œy
*

2857 
Sètus
 
	`XP¨£Cﬁ‹
(

2858 
Di•œy
* ,

2859 
Cﬁ‹m≠
 ,

2860 
_Xc⁄°
 * ,

2861 
XCﬁ‹
*

2864 
	`XP¨£Geomëry
(

2865 
_Xc⁄°
 * ,

2872 
	`XPìkEvít
(

2873 
Di•œy
* ,

2874 
XEvít
*

2877 
	`XPìkIfEvít
(

2878 
Di•œy
* ,

2879 
XEvít
* ,

2880 
	$Boﬁ
 (*) (

2881 
Di•œy
* ,

2882 
XEvít
* ,

2883 
XPoöãr


2885 
XPoöãr


2888 
	`XPídög
(

2889 
Di•œy
*

2892 
	`XPœ√sOfS¸ìn
(

2893 
S¸ìn
*

2896 
	`XPrŸocﬁRevisi⁄
(

2897 
Di•œy
*

2900 
	`XPrŸocﬁVîsi⁄
(

2901 
Di•œy
*

2905 
	`XPutBackEvít
(

2906 
Di•œy
* ,

2907 
XEvít
*

2910 
	`XPutImage
(

2911 
Di•œy
* ,

2912 
DøwabÀ
 ,

2913 
GC
 ,

2914 
XImage
* ,

2923 
	`XQLígth
(

2924 
Di•œy
*

2927 
Sètus
 
	`XQuîyBe°Curs‹
(

2928 
Di•œy
* ,

2929 
DøwabÀ
 ,

2936 
Sètus
 
	`XQuîyBe°Size
(

2937 
Di•œy
* ,

2939 
DøwabÀ
 ,

2946 
Sètus
 
	`XQuîyBe°Stù∂e
(

2947 
Di•œy
* ,

2948 
DøwabÀ
 ,

2955 
Sètus
 
	`XQuîyBe°Tûe
(

2956 
Di•œy
* ,

2957 
DøwabÀ
 ,

2964 
	`XQuîyCﬁ‹
(

2965 
Di•œy
* ,

2966 
Cﬁ‹m≠
 ,

2967 
XCﬁ‹
*

2970 
	`XQuîyCﬁ‹s
(

2971 
Di•œy
* ,

2972 
Cﬁ‹m≠
 ,

2973 
XCﬁ‹
* ,

2977 
Boﬁ
 
	`XQuîyExãnsi⁄
(

2978 
Di•œy
* ,

2979 
_Xc⁄°
 * ,

2985 
	`XQuîyKeym≠
(

2986 
Di•œy
* ,

2990 
Boﬁ
 
	`XQuîyPoöãr
(

2991 
Di•œy
* ,

2992 
Wödow
 ,

2993 
Wödow
* ,

2994 
Wödow
* ,

3002 
	`XQuîyTextExã¡s
(

3003 
Di•œy
* ,

3004 
XID
 ,

3005 
_Xc⁄°
 * ,

3010 
XCh¨Såu˘
*

3013 
	`XQuîyTextExã¡s16
(

3014 
Di•œy
* ,

3015 
XID
 ,

3016 
_Xc⁄°
 
XCh¨2b
* ,

3021 
XCh¨Såu˘
*

3024 
Sètus
 
	`XQuîyTªe
(

3025 
Di•œy
* ,

3026 
Wödow
 ,

3027 
Wödow
* ,

3028 
Wödow
* ,

3029 
Wödow
** ,

3033 
	`XRai£Wödow
(

3034 
Di•œy
* ,

3035 
Wödow


3038 
	`XRódBôm≠Fûe
(

3039 
Di•œy
* ,

3040 
DøwabÀ
 ,

3041 
_Xc⁄°
 * ,

3044 
Pixm≠
* ,

3049 
	`XRódBôm≠FûeD©a
(

3050 
_Xc⁄°
 * ,

3058 
	`XRebödKeysym
(

3059 
Di•œy
* ,

3060 
KeySym
 ,

3061 
KeySym
* ,

3063 
_Xc⁄°
 * ,

3067 
	`XRecﬁ‹Curs‹
(

3068 
Di•œy
* ,

3069 
Curs‹
 ,

3070 
XCﬁ‹
* ,

3071 
XCﬁ‹
*

3074 
	`XRe‰eshKeybﬂrdM≠pög
(

3075 
XM≠pögEvít
*

3078 
	`XRemoveFromSaveSë
(

3079 
Di•œy
* ,

3080 
Wödow


3083 
	`XRemoveHo°
(

3084 
Di•œy
* ,

3085 
XHo°Addªss
*

3088 
	`XRemoveHo°s
(

3089 
Di•œy
* ,

3090 
XHo°Addªss
* ,

3094 
	`XRï¨ítWödow
(

3095 
Di•œy
* ,

3096 
Wödow
 ,

3097 
Wödow
 ,

3102 
	`XRe£tS¸ìnSavî
(

3103 
Di•œy
*

3106 
	`XResizeWödow
(

3107 
Di•œy
* ,

3108 
Wödow
 ,

3113 
	`XRe°ackWödows
(

3114 
Di•œy
* ,

3115 
Wödow
* ,

3119 
	`XRŸ©eBuf„rs
(

3120 
Di•œy
* ,

3124 
	`XRŸ©eWödowPr›îtõs
(

3125 
Di•œy
* ,

3126 
Wödow
 ,

3127 
Atom
* ,

3132 
	`XS¸ìnCou¡
(

3133 
Di•œy
*

3136 
	`XSñe˘I≈ut
(

3137 
Di•œy
* ,

3138 
Wödow
 ,

3142 
Sètus
 
	`XSídEvít
(

3143 
Di•œy
* ,

3144 
Wödow
 ,

3145 
Boﬁ
 ,

3147 
XEvít
*

3150 
	`XSëAc˚ssC⁄åﬁ
(

3151 
Di•œy
* ,

3155 
	`XSëArcMode
(

3156 
Di•œy
* ,

3157 
GC
 ,

3161 
	`XSëBackground
(

3162 
Di•œy
* ,

3163 
GC
 ,

3167 
	`XSëClùMask
(

3168 
Di•œy
* ,

3169 
GC
 ,

3170 
Pixm≠


3173 
	`XSëClùOrigö
(

3174 
Di•œy
* ,

3175 
GC
 ,

3180 
	`XSëClùRe˘™gÀs
(

3181 
Di•œy
* ,

3182 
GC
 ,

3185 
XRe˘™gÀ
* ,

3190 
	`XSëClo£DownMode
(

3191 
Di•œy
* ,

3195 
	`XSëComm™d
(

3196 
Di•œy
* ,

3197 
Wödow
 ,

3202 
	`XSëDashes
(

3203 
Di•œy
* ,

3204 
GC
 ,

3206 
_Xc⁄°
 * ,

3210 
	`XSëFûlRuÀ
(

3211 
Di•œy
* ,

3212 
GC
 ,

3216 
	`XSëFûlStyÀ
(

3217 
Di•œy
* ,

3218 
GC
 ,

3222 
	`XSëF⁄t
(

3223 
Di•œy
* ,

3224 
GC
 ,

3225 
F⁄t


3228 
	`XSëF⁄tP©h
(

3229 
Di•œy
* ,

3234 
	`XSëF‹eground
(

3235 
Di•œy
* ,

3236 
GC
 ,

3240 
	`XSëFun˘i⁄
(

3241 
Di•œy
* ,

3242 
GC
 ,

3246 
	`XSëGøphicsExposuªs
(

3247 
Di•œy
* ,

3248 
GC
 ,

3249 
Boﬁ


3252 
	`XSëIc⁄Name
(

3253 
Di•œy
* ,

3254 
Wödow
 ,

3255 
_Xc⁄°
 *

3258 
	`XSëI≈utFocus
(

3259 
Di•œy
* ,

3260 
Wödow
 ,

3262 
Time


3265 
	`XSëLöeAâribuãs
(

3266 
Di•œy
* ,

3267 
GC
 ,

3274 
	`XSëModifõrM≠pög
(

3275 
Di•œy
* ,

3276 
XModifõrKeym≠
*

3279 
	`XSëPœ√Mask
(

3280 
Di•œy
* ,

3281 
GC
 ,

3285 
	`XSëPoöãrM≠pög
(

3286 
Di•œy
* ,

3287 
_Xc⁄°
 * ,

3291 
	`XSëS¸ìnSavî
(

3292 
Di•œy
* ,

3299 
	`XSëSñe˘i⁄Ow√r
(

3300 
Di•œy
* ,

3301 
Atom
 ,

3302 
Wödow
 ,

3303 
Time


3306 
	`XSëSèã
(

3307 
Di•œy
* ,

3308 
GC
 ,

3315 
	`XSëStù∂e
(

3316 
Di•œy
* ,

3317 
GC
 ,

3318 
Pixm≠


3321 
	`XSëSubwödowMode
(

3322 
Di•œy
* ,

3323 
GC
 ,

3327 
	`XSëTSOrigö
(

3328 
Di•œy
* ,

3329 
GC
 ,

3334 
	`XSëTûe
(

3335 
Di•œy
* ,

3336 
GC
 ,

3337 
Pixm≠


3340 
	`XSëWödowBackground
(

3341 
Di•œy
* ,

3342 
Wödow
 ,

3346 
	`XSëWödowBackgroundPixm≠
(

3347 
Di•œy
* ,

3348 
Wödow
 ,

3349 
Pixm≠


3352 
	`XSëWödowB‹dî
(

3353 
Di•œy
* ,

3354 
Wödow
 ,

3358 
	`XSëWödowB‹dîPixm≠
(

3359 
Di•œy
* ,

3360 
Wödow
 ,

3361 
Pixm≠


3364 
	`XSëWödowB‹dîWidth
(

3365 
Di•œy
* ,

3366 
Wödow
 ,

3370 
	`XSëWödowCﬁ‹m≠
(

3371 
Di•œy
* ,

3372 
Wödow
 ,

3373 
Cﬁ‹m≠


3376 
	`XSt‹eBuf„r
(

3377 
Di•œy
* ,

3378 
_Xc⁄°
 * ,

3383 
	`XSt‹eByãs
(

3384 
Di•œy
* ,

3385 
_Xc⁄°
 * ,

3389 
	`XSt‹eCﬁ‹
(

3390 
Di•œy
* ,

3391 
Cﬁ‹m≠
 ,

3392 
XCﬁ‹
*

3395 
	`XSt‹eCﬁ‹s
(

3396 
Di•œy
* ,

3397 
Cﬁ‹m≠
 ,

3398 
XCﬁ‹
* ,

3402 
	`XSt‹eName
(

3403 
Di•œy
* ,

3404 
Wödow
 ,

3405 
_Xc⁄°
 *

3408 
	`XSt‹eNamedCﬁ‹
(

3409 
Di•œy
* ,

3410 
Cﬁ‹m≠
 ,

3411 
_Xc⁄°
 * ,

3416 
	`XSync
(

3417 
Di•œy
* ,

3418 
Boﬁ


3421 
	`XTextExã¡s
(

3422 
XF⁄tSåu˘
* ,

3423 
_Xc⁄°
 * ,

3428 
XCh¨Såu˘
*

3431 
	`XTextExã¡s16
(

3432 
XF⁄tSåu˘
* ,

3433 
_Xc⁄°
 
XCh¨2b
* ,

3438 
XCh¨Såu˘
*

3441 
	`XTextWidth
(

3442 
XF⁄tSåu˘
* ,

3443 
_Xc⁄°
 * ,

3447 
	`XTextWidth16
(

3448 
XF⁄tSåu˘
* ,

3449 
_Xc⁄°
 
XCh¨2b
* ,

3453 
Boﬁ
 
	`XTøn¶©eCo‹dö©es
(

3454 
Di•œy
* ,

3455 
Wödow
 ,

3456 
Wödow
 ,

3461 
Wödow
*

3464 
	`XUndeföeCurs‹
(

3465 
Di•œy
* ,

3466 
Wödow


3469 
	`XUngøbBuâ⁄
(

3470 
Di•œy
* ,

3473 
Wödow


3476 
	`XUngøbKey
(

3477 
Di•œy
* ,

3480 
Wödow


3483 
	`XUngøbKeybﬂrd
(

3484 
Di•œy
* ,

3485 
Time


3488 
	`XUngøbPoöãr
(

3489 
Di•œy
* ,

3490 
Time


3493 
	`XUngøbSîvî
(

3494 
Di•œy
*

3497 
	`XUnö°ÆlCﬁ‹m≠
(

3498 
Di•œy
* ,

3499 
Cﬁ‹m≠


3502 
	`XU∆ﬂdF⁄t
(

3503 
Di•œy
* ,

3504 
F⁄t


3507 
	`XUnm≠Subwödows
(

3508 
Di•œy
* ,

3509 
Wödow


3512 
	`XUnm≠Wödow
(

3513 
Di•œy
* ,

3514 
Wödow


3517 
	`XVíd‹Rñó£
(

3518 
Di•œy
*

3521 
	`XW¨pPoöãr
(

3522 
Di•œy
* ,

3523 
Wödow
 ,

3524 
Wödow
 ,

3533 
	`XWidthMMOfS¸ìn
(

3534 
S¸ìn
*

3537 
	`XWidthOfS¸ìn
(

3538 
S¸ìn
*

3541 
	`XWödowEvít
(

3542 
Di•œy
* ,

3543 
Wödow
 ,

3545 
XEvít
*

3548 
	`XWrôeBôm≠Fûe
(

3549 
Di•œy
* ,

3550 
_Xc⁄°
 * ,

3551 
Pixm≠
 ,

3558 
Boﬁ
 
	`XSuµ‹tsLoˇÀ
 ();

3560 *
	`XSëLoˇÀModifõrs
(

3564 
XOM
 
	`XO≥nOM
(

3565 
Di•œy
* ,

3566 
_XrmHashBuckëRec
* ,

3567 
_Xc⁄°
 * ,

3568 
_Xc⁄°
 *

3571 
Sètus
 
	`XClo£OM
(

3572 
XOM


3575 *
	$XSëOMVÆues
(

3576 
XOM
 ,

3578 Ë
	`_X_SENTINEL
(0);

3580 *
	$XGëOMVÆues
(

3581 
XOM
 ,

3583 Ë
	`_X_SENTINEL
(0);

3585 
Di•œy
 *
	`XDi•œyOfOM
(

3586 
XOM


3589 *
	`XLoˇÀOfOM
(

3590 
XOM


3593 
XOC
 
	$XCª©eOC
(

3594 
XOM
 ,

3596 Ë
	`_X_SENTINEL
(0);

3598 
	`XDe°royOC
(

3599 
XOC


3602 
XOM
 
	`XOMOfOC
(

3603 
XOC


3606 *
	$XSëOCVÆues
(

3607 
XOC
 ,

3609 Ë
	`_X_SENTINEL
(0);

3611 *
	$XGëOCVÆues
(

3612 
XOC
 ,

3614 Ë
	`_X_SENTINEL
(0);

3616 
XF⁄tSë
 
	`XCª©eF⁄tSë
(

3617 
Di•œy
* ,

3618 
_Xc⁄°
 * ,

3624 
	`XFªeF⁄tSë
(

3625 
Di•œy
* ,

3626 
XF⁄tSë


3629 
	`XF⁄tsOfF⁄tSë
(

3630 
XF⁄tSë
 ,

3631 
XF⁄tSåu˘
*** ,

3635 *
	`XBa£F⁄tNameLi°OfF⁄tSë
(

3636 
XF⁄tSë


3639 *
	`XLoˇÀOfF⁄tSë
(

3640 
XF⁄tSë


3643 
Boﬁ
 
	`XC⁄ãxtDïídítDøwög
(

3644 
XF⁄tSë


3647 
Boﬁ
 
	`XDúe˘i⁄ÆDïídítDøwög
(

3648 
XF⁄tSë


3651 
Boﬁ
 
	`XC⁄ãxtuÆDøwög
(

3652 
XF⁄tSë


3655 
XF⁄tSëExã¡s
 *
	`XExã¡sOfF⁄tSë
(

3656 
XF⁄tSë


3659 
	`XmbTextEsˇ≥mít
(

3660 
XF⁄tSë
 ,

3661 
_Xc⁄°
 * ,

3665 
	`XwcTextEsˇ≥mít
(

3666 
XF⁄tSë
 ,

3667 
_Xc⁄°
 
wch¨_t
* ,

3671 
	`Xutf8TextEsˇ≥mít
(

3672 
XF⁄tSë
 ,

3673 
_Xc⁄°
 * ,

3677 
	`XmbTextExã¡s
(

3678 
XF⁄tSë
 ,

3679 
_Xc⁄°
 * ,

3681 
XRe˘™gÀ
* ,

3682 
XRe˘™gÀ
*

3685 
	`XwcTextExã¡s
(

3686 
XF⁄tSë
 ,

3687 
_Xc⁄°
 
wch¨_t
* ,

3689 
XRe˘™gÀ
* ,

3690 
XRe˘™gÀ
*

3693 
	`Xutf8TextExã¡s
(

3694 
XF⁄tSë
 ,

3695 
_Xc⁄°
 * ,

3697 
XRe˘™gÀ
* ,

3698 
XRe˘™gÀ
*

3701 
Sètus
 
	`XmbTextPîCh¨Exã¡s
(

3702 
XF⁄tSë
 ,

3703 
_Xc⁄°
 * ,

3705 
XRe˘™gÀ
* ,

3706 
XRe˘™gÀ
* ,

3709 
XRe˘™gÀ
* ,

3710 
XRe˘™gÀ
*

3713 
Sètus
 
	`XwcTextPîCh¨Exã¡s
(

3714 
XF⁄tSë
 ,

3715 
_Xc⁄°
 
wch¨_t
* ,

3717 
XRe˘™gÀ
* ,

3718 
XRe˘™gÀ
* ,

3721 
XRe˘™gÀ
* ,

3722 
XRe˘™gÀ
*

3725 
Sètus
 
	`Xutf8TextPîCh¨Exã¡s
(

3726 
XF⁄tSë
 ,

3727 
_Xc⁄°
 * ,

3729 
XRe˘™gÀ
* ,

3730 
XRe˘™gÀ
* ,

3733 
XRe˘™gÀ
* ,

3734 
XRe˘™gÀ
*

3737 
	`XmbDøwText
(

3738 
Di•œy
* ,

3739 
DøwabÀ
 ,

3740 
GC
 ,

3743 
XmbTextIãm
* ,

3747 
	`XwcDøwText
(

3748 
Di•œy
* ,

3749 
DøwabÀ
 ,

3750 
GC
 ,

3753 
XwcTextIãm
* ,

3757 
	`Xutf8DøwText
(

3758 
Di•œy
* ,

3759 
DøwabÀ
 ,

3760 
GC
 ,

3763 
XmbTextIãm
* ,

3767 
	`XmbDøwSåög
(

3768 
Di•œy
* ,

3769 
DøwabÀ
 ,

3770 
XF⁄tSë
 ,

3771 
GC
 ,

3774 
_Xc⁄°
 * ,

3778 
	`XwcDøwSåög
(

3779 
Di•œy
* ,

3780 
DøwabÀ
 ,

3781 
XF⁄tSë
 ,

3782 
GC
 ,

3785 
_Xc⁄°
 
wch¨_t
* ,

3789 
	`Xutf8DøwSåög
(

3790 
Di•œy
* ,

3791 
DøwabÀ
 ,

3792 
XF⁄tSë
 ,

3793 
GC
 ,

3796 
_Xc⁄°
 * ,

3800 
	`XmbDøwImageSåög
(

3801 
Di•œy
* ,

3802 
DøwabÀ
 ,

3803 
XF⁄tSë
 ,

3804 
GC
 ,

3807 
_Xc⁄°
 * ,

3811 
	`XwcDøwImageSåög
(

3812 
Di•œy
* ,

3813 
DøwabÀ
 ,

3814 
XF⁄tSë
 ,

3815 
GC
 ,

3818 
_Xc⁄°
 
wch¨_t
* ,

3822 
	`Xutf8DøwImageSåög
(

3823 
Di•œy
* ,

3824 
DøwabÀ
 ,

3825 
XF⁄tSë
 ,

3826 
GC
 ,

3829 
_Xc⁄°
 * ,

3833 
XIM
 
	`XO≥nIM
(

3834 
Di•œy
* ,

3835 
_XrmHashBuckëRec
* ,

3840 
Sètus
 
	`XClo£IM
(

3841 
XIM


3844 *
	$XGëIMVÆues
(

3845 
XIM
 , ...

3846 Ë
	`_X_SENTINEL
(0);

3848 *
	$XSëIMVÆues
(

3849 
XIM
 , ...

3850 Ë
	`_X_SENTINEL
(0);

3852 
Di•œy
 *
	`XDi•œyOfIM
(

3853 
XIM


3856 *
	`XLoˇÀOfIM
(

3857 
XIM


3860 
XIC
 
	$XCª©eIC
(

3861 
XIM
 , ...

3862 Ë
	`_X_SENTINEL
(0);

3864 
	`XDe°royIC
(

3865 
XIC


3868 
	`XSëICFocus
(

3869 
XIC


3872 
	`XUn£tICFocus
(

3873 
XIC


3876 
wch¨_t
 *
	`XwcRe£tIC
(

3877 
XIC


3880 *
	`XmbRe£tIC
(

3881 
XIC


3884 *
	`Xutf8Re£tIC
(

3885 
XIC


3888 *
	$XSëICVÆues
(

3889 
XIC
 , ...

3890 Ë
	`_X_SENTINEL
(0);

3892 *
	$XGëICVÆues
(

3893 
XIC
 , ...

3894 Ë
	`_X_SENTINEL
(0);

3896 
XIM
 
	`XIMOfIC
(

3897 
XIC


3900 
Boﬁ
 
	`XFûãrEvít
(

3901 
XEvít
* ,

3902 
Wödow


3905 
	`XmbLookupSåög
(

3906 
XIC
 ,

3907 
XKeyPªs£dEvít
* ,

3910 
KeySym
* ,

3911 
Sètus
*

3914 
	`XwcLookupSåög
(

3915 
XIC
 ,

3916 
XKeyPªs£dEvít
* ,

3917 
wch¨_t
* ,

3919 
KeySym
* ,

3920 
Sètus
*

3923 
	`Xutf8LookupSåög
(

3924 
XIC
 ,

3925 
XKeyPªs£dEvít
* ,

3928 
KeySym
* ,

3929 
Sètus
*

3932 
XVaNe°edLi°
 
	$XVaCª©eNe°edLi°
(

3934 Ë
	`_X_SENTINEL
(0);

3938 
Boﬁ
 
	`XRegi°îIMIn°™tüãCÆlback
(

3939 
Di•œy
* ,

3940 
_XrmHashBuckëRec
* ,

3943 
XIDProc
 ,

3944 
XPoöãr


3947 
Boﬁ
 
	`XUƒegi°îIMIn°™tüãCÆlback
(

3948 
Di•œy
* ,

3949 
_XrmHashBuckëRec
* ,

3952 
XIDProc
 ,

3953 
XPoöãr


3956 (*
	tXC⁄√˘i⁄W©chProc
)(

3957 
	tDi•œy
* ,

3958 
	tXPoöãr
 ,

3960 
	tBoﬁ
 ,

3961 
	tXPoöãr
*

3965 
Sètus
 
	`XI¡î«lC⁄√˘i⁄Numbîs
(

3966 
Di•œy
* ,

3971 
	`XPro˚ssI¡î«lC⁄√˘i⁄
(

3972 
Di•œy
* ,

3976 
Sètus
 
	`XAddC⁄√˘i⁄W©ch
(

3977 
Di•œy
* ,

3978 
XC⁄√˘i⁄W©chProc
 ,

3979 
XPoöãr


3982 
	`XRemoveC⁄√˘i⁄W©ch
(

3983 
Di•œy
* ,

3984 
XC⁄√˘i⁄W©chProc
 ,

3985 
XPoöãr


3988 
	`XSëAuth‹iz©i⁄
(

3995 
	`_Xmbtowc
(

3996 
wch¨_t
 * ,

3997 #ifde‡
ISC


3999 
size_t


4006 
	`_Xw˘omb
(

4008 
wch¨_t


4011 
Boﬁ
 
	`XGëEvítD©a
(

4012 
Di•œy
* ,

4013 
XGíîicEvítCookõ
*

4016 
	`XFªeEvítD©a
(

4017 
Di•œy
* ,

4018 
XGíîicEvítCookõ
*

4021 
_XFUNCPROTOEND


	@/usr/include/X11/Xproto.h

22 #i‚de‡
XPROTO_H


23 
	#XPROTO_H


	)

72 
	~<X11/Xmd.h
>

73 
	~<X11/X¥Ÿo°r.h
>

80 
	#sz_xSegmít
 8

	)

81 
	#sz_xPoöt
 4

	)

82 
	#sz_xRe˘™gÀ
 8

	)

83 
	#sz_xArc
 12

	)

84 
	#sz_xC⁄nClõ¡Pªfix
 12

	)

85 
	#sz_xC⁄nSëupPªfix
 8

	)

86 
	#sz_xC⁄nSëup
 32

	)

87 
	#sz_xPixm≠F‹m©
 8

	)

88 
	#sz_xDïth
 8

	)

89 
	#sz_xVisuÆTy≥
 24

	)

90 
	#sz_xWödowRoŸ
 40

	)

91 
	#sz_xTimeco‹d
 8

	)

92 
	#sz_xHo°E¡ry
 4

	)

93 
	#sz_xCh¨Info
 12

	)

94 
	#sz_xF⁄tPr›
 8

	)

95 
	#sz_xTextE…
 2

	)

96 
	#sz_xCﬁ‹Iãm
 12

	)

97 
	#sz_xrgb
 8

	)

98 
	#sz_xGíîicRïly
 32

	)

99 
	#sz_xGëWödowAâribuãsRïly
 44

	)

100 
	#sz_xGëGeomëryRïly
 32

	)

101 
	#sz_xQuîyTªeRïly
 32

	)

102 
	#sz_xI¡înAtomRïly
 32

	)

103 
	#sz_xGëAtomNameRïly
 32

	)

104 
	#sz_xGëPr›îtyRïly
 32

	)

105 
	#sz_xLi°Pr›îtõsRïly
 32

	)

106 
	#sz_xGëSñe˘i⁄Ow√rRïly
 32

	)

107 
	#sz_xGøbPoöãrRïly
 32

	)

108 
	#sz_xQuîyPoöãrRïly
 32

	)

109 
	#sz_xGëMŸi⁄EvítsRïly
 32

	)

110 
	#sz_xTøn¶©eCo‹dsRïly
 32

	)

111 
	#sz_xGëI≈utFocusRïly
 32

	)

112 
	#sz_xQuîyKeym≠Rïly
 40

	)

113 
	#sz_xQuîyF⁄tRïly
 60

	)

114 
	#sz_xQuîyTextExã¡sRïly
 32

	)

115 
	#sz_xLi°F⁄tsRïly
 32

	)

116 
	#sz_xGëF⁄tP©hRïly
 32

	)

117 
	#sz_xGëImageRïly
 32

	)

118 
	#sz_xLi°In°ÆÀdCﬁ‹m≠sRïly
 32

	)

119 
	#sz_xAŒocCﬁ‹Rïly
 32

	)

120 
	#sz_xAŒocNamedCﬁ‹Rïly
 32

	)

121 
	#sz_xAŒocCﬁ‹CñlsRïly
 32

	)

122 
	#sz_xAŒocCﬁ‹Pœ√sRïly
 32

	)

123 
	#sz_xQuîyCﬁ‹sRïly
 32

	)

124 
	#sz_xLookupCﬁ‹Rïly
 32

	)

125 
	#sz_xQuîyBe°SizeRïly
 32

	)

126 
	#sz_xQuîyExãnsi⁄Rïly
 32

	)

127 
	#sz_xLi°Exãnsi⁄sRïly
 32

	)

128 
	#sz_xSëM≠pögRïly
 32

	)

129 
	#sz_xGëKeybﬂrdC⁄åﬁRïly
 52

	)

130 
	#sz_xGëPoöãrC⁄åﬁRïly
 32

	)

131 
	#sz_xGëS¸ìnSavîRïly
 32

	)

132 
	#sz_xLi°Ho°sRïly
 32

	)

133 
	#sz_xSëModifõrM≠pögRïly
 32

	)

134 
	#sz_xEº‹
 32

	)

135 
	#sz_xEvít
 32

	)

136 
	#sz_xKeym≠Evít
 32

	)

137 
	#sz_xReq
 4

	)

138 
	#sz_xResour˚Req
 8

	)

139 
	#sz_xCª©eWödowReq
 32

	)

140 
	#sz_xCh™geWödowAâribuãsReq
 12

	)

141 
	#sz_xCh™geSaveSëReq
 8

	)

142 
	#sz_xRï¨ítWödowReq
 16

	)

143 
	#sz_xC⁄figuªWödowReq
 12

	)

144 
	#sz_xCúcuœãWödowReq
 8

	)

145 
	#sz_xI¡înAtomReq
 8

	)

146 
	#sz_xCh™gePr›îtyReq
 24

	)

147 
	#sz_xDñëePr›îtyReq
 12

	)

148 
	#sz_xGëPr›îtyReq
 24

	)

149 
	#sz_xSëSñe˘i⁄Ow√rReq
 16

	)

150 
	#sz_xC⁄vîtSñe˘i⁄Req
 24

	)

151 
	#sz_xSídEvítReq
 44

	)

152 
	#sz_xGøbPoöãrReq
 24

	)

153 
	#sz_xGøbBuâ⁄Req
 24

	)

154 
	#sz_xUngøbBuâ⁄Req
 12

	)

155 
	#sz_xCh™geA˘ivePoöãrGøbReq
 16

	)

156 
	#sz_xGøbKeybﬂrdReq
 16

	)

157 
	#sz_xGøbKeyReq
 16

	)

158 
	#sz_xUngøbKeyReq
 12

	)

159 
	#sz_xAŒowEvítsReq
 8

	)

160 
	#sz_xGëMŸi⁄EvítsReq
 16

	)

161 
	#sz_xTøn¶©eCo‹dsReq
 16

	)

162 
	#sz_xW¨pPoöãrReq
 24

	)

163 
	#sz_xSëI≈utFocusReq
 12

	)

164 
	#sz_xO≥nF⁄tReq
 12

	)

165 
	#sz_xQuîyTextExã¡sReq
 8

	)

166 
	#sz_xLi°F⁄tsReq
 8

	)

167 
	#sz_xSëF⁄tP©hReq
 8

	)

168 
	#sz_xCª©ePixm≠Req
 16

	)

169 
	#sz_xCª©eGCReq
 16

	)

170 
	#sz_xCh™geGCReq
 12

	)

171 
	#sz_xC›yGCReq
 16

	)

172 
	#sz_xSëDashesReq
 12

	)

173 
	#sz_xSëClùRe˘™gÀsReq
 12

	)

174 
	#sz_xC›yAªaReq
 28

	)

175 
	#sz_xC›yPœ√Req
 32

	)

176 
	#sz_xPﬁyPoötReq
 12

	)

177 
	#sz_xPﬁySegmítReq
 12

	)

178 
	#sz_xFûlPﬁyReq
 16

	)

179 
	#sz_xPutImageReq
 24

	)

180 
	#sz_xGëImageReq
 20

	)

181 
	#sz_xPﬁyTextReq
 16

	)

182 
	#sz_xImageTextReq
 16

	)

183 
	#sz_xCª©eCﬁ‹m≠Req
 16

	)

184 
	#sz_xC›yCﬁ‹m≠AndFªeReq
 12

	)

185 
	#sz_xAŒocCﬁ‹Req
 16

	)

186 
	#sz_xAŒocNamedCﬁ‹Req
 12

	)

187 
	#sz_xAŒocCﬁ‹CñlsReq
 12

	)

188 
	#sz_xAŒocCﬁ‹Pœ√sReq
 16

	)

189 
	#sz_xFªeCﬁ‹sReq
 12

	)

190 
	#sz_xSt‹eCﬁ‹sReq
 8

	)

191 
	#sz_xSt‹eNamedCﬁ‹Req
 16

	)

192 
	#sz_xQuîyCﬁ‹sReq
 8

	)

193 
	#sz_xLookupCﬁ‹Req
 12

	)

194 
	#sz_xCª©eCurs‹Req
 32

	)

195 
	#sz_xCª©eGlyphCurs‹Req
 32

	)

196 
	#sz_xRecﬁ‹Curs‹Req
 20

	)

197 
	#sz_xQuîyBe°SizeReq
 12

	)

198 
	#sz_xQuîyExãnsi⁄Req
 8

	)

199 
	#sz_xCh™geKeybﬂrdC⁄åﬁReq
 8

	)

200 
	#sz_xBñlReq
 4

	)

201 
	#sz_xCh™gePoöãrC⁄åﬁReq
 12

	)

202 
	#sz_xSëS¸ìnSavîReq
 12

	)

203 
	#sz_xCh™geHo°sReq
 8

	)

204 
	#sz_xLi°Ho°sReq
 4

	)

205 
	#sz_xCh™geModeReq
 4

	)

206 
	#sz_xRŸ©ePr›îtõsReq
 12

	)

207 
	#sz_xRïly
 32

	)

208 
	#sz_xGøbKeybﬂrdRïly
 32

	)

209 
	#sz_xLi°F⁄tsWôhInfoRïly
 60

	)

210 
	#sz_xSëPoöãrM≠pögRïly
 32

	)

211 
	#sz_xGëKeybﬂrdM≠pögRïly
 32

	)

212 
	#sz_xGëPoöãrM≠pögRïly
 32

	)

213 
	#sz_xGëModifõrM≠pögRïly
 32

	)

214 
	#sz_xLi°F⁄tsWôhInfoReq
 8

	)

215 
	#sz_xPﬁyLöeReq
 12

	)

216 
	#sz_xPﬁyArcReq
 12

	)

217 
	#sz_xPﬁyRe˘™gÀReq
 12

	)

218 
	#sz_xPﬁyFûlRe˘™gÀReq
 12

	)

219 
	#sz_xPﬁyFûlArcReq
 12

	)

220 
	#sz_xPﬁyText8Req
 16

	)

221 
	#sz_xPﬁyText16Req
 16

	)

222 
	#sz_xImageText8Req
 16

	)

223 
	#sz_xImageText16Req
 16

	)

224 
	#sz_xSëPoöãrM≠pögReq
 4

	)

225 
	#sz_xF‹˚S¸ìnSavîReq
 4

	)

226 
	#sz_xSëClo£DownModeReq
 4

	)

227 
	#sz_xCÀ¨AªaReq
 16

	)

228 
	#sz_xSëAc˚ssC⁄åﬁReq
 4

	)

229 
	#sz_xGëKeybﬂrdM≠pögReq
 8

	)

230 
	#sz_xSëModifõrM≠pögReq
 4

	)

231 
	#sz_xPr›Ic⁄Size
 24

	)

232 
	#sz_xCh™geKeybﬂrdM≠pögReq
 8

	)

240 
	#Wödow
 
CARD32


	)

241 
	#DøwabÀ
 
CARD32


	)

242 
	#F⁄t
 
CARD32


	)

243 
	#Pixm≠
 
CARD32


	)

244 
	#Curs‹
 
CARD32


	)

245 
	#Cﬁ‹m≠
 
CARD32


	)

246 
	#GC⁄ãxt
 
CARD32


	)

247 
	#Atom
 
CARD32


	)

248 
	#VisuÆID
 
CARD32


	)

249 
	#Time
 
CARD32


	)

250 
	#KeyCode
 
CARD8


	)

251 
	#KeySym
 
CARD32


	)

253 
	#X_TCP_PORT
 6000

	)

255 
	#xTrue
 1

	)

256 
	#xFÆ£
 0

	)

259 
CARD16
 
	tKeyButMask
;

267 
CARD8
 
	mbyãOrdî
;

268 
BYTE
 
	m∑d
;

269 
CARD16
 
maj‹Vîsi⁄
 
	mB16
, 
mö‹Vîsi⁄
 B16;

270 
CARD16
 
nbyãsAuthPrŸo
 
	mB16
;

271 
CARD16
 
nbyãsAuthSåög
 
	mB16
;

272 
CARD16
 
∑d2
 
	mB16
;

273 } 
	txC⁄nClõ¡Pªfix
;

276 
CARD8
 
	msuc˚ss
;

277 
BYTE
 
	mÀngthRós⁄
;

278 
CARD16
 
maj‹Vîsi⁄
 
	mB16
,

279 
mö‹Vîsi⁄
 
	mB16
;

280 
CARD16
 
Àngth
 
	mB16
;

281 } 
	txC⁄nSëupPªfix
;

285 
CARD32
 
ªÀa£
 
	mB32
;

286 
CARD32
 
ridBa£
 
	mB32
,

287 
ridMask
 
	mB32
;

288 
CARD32
 
mŸi⁄Buf„rSize
 
	mB32
;

289 
CARD16
 
nbyãsVíd‹
 
	mB16
;

290 
CARD16
 
maxReque°Size
 
	mB16
;

291 
CARD8
 
	mnumRoŸs
;

292 
CARD8
 
	mnumF‹m©s
;

293 
CARD8
 
	mimageByãOrdî
;

294 
CARD8
 
	mbôm≠BôOrdî
;

295 
CARD8
 
	mbôm≠Sˇ∆öeUnô
,

296 
	mbôm≠Sˇ∆öePad
;

297 
KeyCode
 
	mmöKeyCode
, 
	mmaxKeyCode
;

298 
CARD32
 
∑d2
 
	mB32
;

299 } 
	txC⁄nSëup
;

302 
CARD8
 
	mdïth
;

303 
CARD8
 
	mbôsPîPixñ
;

304 
CARD8
 
	msˇnLöePad
;

305 
CARD8
 
	m∑d1
;

306 
CARD32
 
∑d2
 
	mB32
;

307 } 
	txPixm≠F‹m©
;

312 
CARD8
 
	mdïth
;

313 
CARD8
 
	m∑d1
;

314 
CARD16
 
nVisuÆs
 
	mB16
;

315 
CARD32
 
∑d2
 
	mB32
;

316 } 
	txDïth
;

319 
VisuÆID
 
visuÆID
 
	mB32
;

320 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

321 
CARD8
 
	mc_˛ass
;

323 
CARD8
 
	m˛ass
;

325 
CARD8
 
	mbôsPîRGB
;

326 
CARD16
 
cﬁ‹m≠E¡rõs
 
	mB16
;

327 
CARD32
 
ªdMask
 
	mB32
, 
gªíMask
 B32, 
blueMask
 B32;

328 
CARD32
 
∑d
 
	mB32
;

329 } 
	txVisuÆTy≥
;

332 
Wödow
 
wödowId
 
	mB32
;

333 
Cﬁ‹m≠
 
deÁu…Cﬁ‹m≠
 
	mB32
;

334 
CARD32
 
whôePixñ
 
	mB32
, 
bœckPixñ
 B32;

335 
CARD32
 
cuºítI≈utMask
 
	mB32
;

336 
CARD16
 
pixWidth
 
	mB16
, 
pixHeight
 B16;

337 
CARD16
 
mmWidth
 
	mB16
, 
mmHeight
 B16;

338 
CARD16
 
möIn°ÆÀdM≠s
 
	mB16
, 
maxIn°ÆÀdM≠s
 B16;

339 
VisuÆID
 
roŸVisuÆID
 
	mB32
;

340 
CARD8
 
	mbackögSt‹e
;

341 
BOOL
 
	mßveUndîs
;

342 
CARD8
 
	mroŸDïth
;

343 
CARD8
 
	mnDïths
;

344 } 
	txWödowRoŸ
;

355 
CARD32
 
time
 
	mB32
;

356 
INT16
 
x
 
	mB16
, 
y
 B16;

357 } 
	txTimeco‹d
;

360 
CARD8
 
	mÁmûy
;

361 
BYTE
 
	m∑d
;

362 
CARD16
 
Àngth
 
	mB16
;

363 } 
	txHo°E¡ry
;

366 
INT16
 
À·SideBórög
 
	mB16
,

367 
rightSideBórög
 
	mB16
,

368 
ch¨a˘îWidth
 
	mB16
,

369 
as˚¡
 
	mB16
,

370 
des˚¡
 
	mB16
;

371 
CARD16
 
©åibuãs
 
	mB16
;

372 } 
	txCh¨Info
;

375 
Atom
 
«me
 
	mB32
;

376 
CARD32
 
vÆue
 
	mB32
;

377 } 
	txF⁄tPr›
;

383 
CARD8
 
	mÀn
;

385 
INT8
 
	mdñè
;

386 } 
	txTextE…
;

390 
CARD32
 
pixñ
 
	mB32
;

391 
CARD16
 
ªd
 
	mB16
, 
gªí
 B16, 
blue
 B16;

392 
CARD8
 
	mÊags
;

393 
CARD8
 
	m∑d
;

394 } 
	txCﬁ‹Iãm
;

398 
CARD16
 
ªd
 
	mB16
, 
gªí
 B16, 
blue
 B16, 
∑d
 B16;

399 } 
	txrgb
;

401 
CARD8
 
	tKEYCODE
;

413 
BYTE
 
	mty≥
;

414 
BYTE
 
	md©a1
;

415 
CARD16
 
£quí˚Numbî
 
	mB16
;

416 
CARD32
 
Àngth
 
	mB32
;

417 
CARD32
 
d©a00
 
	mB32
;

418 
CARD32
 
d©a01
 
	mB32
;

419 
CARD32
 
d©a02
 
	mB32
;

420 
CARD32
 
d©a03
 
	mB32
;

421 
CARD32
 
d©a04
 
	mB32
;

422 
CARD32
 
d©a05
 
	mB32
;

423 } 
	txGíîicRïly
;

428 
BYTE
 
	mty≥
;

429 
CARD8
 
	mbackögSt‹e
;

430 
CARD16
 
£quí˚Numbî
 
	mB16
;

431 
CARD32
 
Àngth
 
	mB32
;

432 
VisuÆID
 
visuÆID
 
	mB32
;

433 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

434 
CARD16
 
c_˛ass
 
	mB16
;

436 
CARD16
 
˛ass
 
	mB16
;

438 
CARD8
 
	mbôGøvôy
;

439 
CARD8
 
	mwöGøvôy
;

440 
CARD32
 
backögBôPœ√s
 
	mB32
;

441 
CARD32
 
backögPixñ
 
	mB32
;

442 
BOOL
 
	mßveUndî
;

443 
BOOL
 
	mm≠In°ÆÀd
;

444 
CARD8
 
	mm≠Sèã
;

445 
BOOL
 
	movîride
;

446 
Cﬁ‹m≠
 
cﬁ‹m≠
 
	mB32
;

447 
CARD32
 
ÆlEvítMasks
 
	mB32
;

448 
CARD32
 
yourEvítMask
 
	mB32
;

449 
CARD16
 
doNŸPr›ag©eMask
 
	mB16
;

450 
CARD16
 
∑d
 
	mB16
;

451 } 
	txGëWödowAâribuãsRïly
;

454 
BYTE
 
	mty≥
;

455 
CARD8
 
	mdïth
;

456 
CARD16
 
£quí˚Numbî
 
	mB16
;

457 
CARD32
 
Àngth
 
	mB32
;

458 
Wödow
 
roŸ
 
	mB32
;

459 
INT16
 
x
 
	mB16
, 
y
 B16;

460 
CARD16
 
width
 
	mB16
, 
height
 B16;

461 
CARD16
 
b‹dîWidth
 
	mB16
;

462 
CARD16
 
∑d1
 
	mB16
;

463 
CARD32
 
∑d2
 
	mB32
;

464 
CARD32
 
∑d3
 
	mB32
;

465 } 
	txGëGeomëryRïly
;

468 
BYTE
 
	mty≥
;

469 
BYTE
 
	m∑d1
;

470 
CARD16
 
£quí˚Numbî
 
	mB16
;

471 
CARD32
 
Àngth
 
	mB32
;

472 
Wödow
 
roŸ
 
	mB32
, 
∑ª¡
 B32;

473 
CARD16
 
nChûdªn
 
	mB16
;

474 
CARD16
 
∑d2
 
	mB16
;

475 
CARD32
 
∑d3
 
	mB32
;

476 
CARD32
 
∑d4
 
	mB32
;

477 
CARD32
 
∑d5
 
	mB32
;

478 } 
	txQuîyTªeRïly
;

481 
BYTE
 
	mty≥
;

482 
BYTE
 
	m∑d1
;

483 
CARD16
 
£quí˚Numbî
 
	mB16
;

484 
CARD32
 
Àngth
 
	mB32
;

485 
Atom
 
©om
 
	mB32
;

486 
CARD32
 
∑d2
 
	mB32
;

487 
CARD32
 
∑d3
 
	mB32
;

488 
CARD32
 
∑d4
 
	mB32
;

489 
CARD32
 
∑d5
 
	mB32
;

490 
CARD32
 
∑d6
 
	mB32
;

491 } 
	txI¡înAtomRïly
;

494 
BYTE
 
	mty≥
;

495 
BYTE
 
	m∑d1
;

496 
CARD16
 
£quí˚Numbî
 
	mB16
;

497 
CARD32
 
Àngth
 
	mB32
;

498 
CARD16
 
«meLígth
 
	mB16
;

499 
CARD16
 
∑d2
 
	mB16
;

500 
CARD32
 
∑d3
 
	mB32
;

501 
CARD32
 
∑d4
 
	mB32
;

502 
CARD32
 
∑d5
 
	mB32
;

503 
CARD32
 
∑d6
 
	mB32
;

504 
CARD32
 
∑d7
 
	mB32
;

505 } 
	txGëAtomNameRïly
;

508 
BYTE
 
	mty≥
;

509 
CARD8
 
	mf‹m©
;

510 
CARD16
 
£quí˚Numbî
 
	mB16
;

511 
CARD32
 
Àngth
 
	mB32
;

512 
Atom
 
¥›îtyTy≥
 
	mB32
;

513 
CARD32
 
byãsA·î
 
	mB32
;

514 
CARD32
 
nIãms
 
	mB32
;

515 
CARD32
 
∑d1
 
	mB32
;

516 
CARD32
 
∑d2
 
	mB32
;

517 
CARD32
 
∑d3
 
	mB32
;

518 } 
	txGëPr›îtyRïly
;

521 
BYTE
 
	mty≥
;

522 
BYTE
 
	m∑d1
;

523 
CARD16
 
£quí˚Numbî
 
	mB16
;

524 
CARD32
 
Àngth
 
	mB32
;

525 
CARD16
 
nPr›îtõs
 
	mB16
;

526 
CARD16
 
∑d2
 
	mB16
;

527 
CARD32
 
∑d3
 
	mB32
;

528 
CARD32
 
∑d4
 
	mB32
;

529 
CARD32
 
∑d5
 
	mB32
;

530 
CARD32
 
∑d6
 
	mB32
;

531 
CARD32
 
∑d7
 
	mB32
;

532 } 
	txLi°Pr›îtõsRïly
;

535 
BYTE
 
	mty≥
;

536 
BYTE
 
	m∑d1
;

537 
CARD16
 
£quí˚Numbî
 
	mB16
;

538 
CARD32
 
Àngth
 
	mB32
;

539 
Wödow
 
ow√r
 
	mB32
;

540 
CARD32
 
∑d2
 
	mB32
;

541 
CARD32
 
∑d3
 
	mB32
;

542 
CARD32
 
∑d4
 
	mB32
;

543 
CARD32
 
∑d5
 
	mB32
;

544 
CARD32
 
∑d6
 
	mB32
;

545 } 
	txGëSñe˘i⁄Ow√rRïly
;

548 
BYTE
 
	mty≥
;

549 
BYTE
 
	m°©us
;

550 
CARD16
 
£quí˚Numbî
 
	mB16
;

551 
CARD32
 
Àngth
 
	mB32
;

552 
CARD32
 
∑d1
 
	mB32
;

553 
CARD32
 
∑d2
 
	mB32
;

554 
CARD32
 
∑d3
 
	mB32
;

555 
CARD32
 
∑d4
 
	mB32
;

556 
CARD32
 
∑d5
 
	mB32
;

557 
CARD32
 
∑d6
 
	mB32
;

558 } 
	txGøbPoöãrRïly
;

560 
xGøbPoöãrRïly
 
	txGøbKeybﬂrdRïly
;

563 
BYTE
 
	mty≥
;

564 
BOOL
 
	mßmeS¸ìn
;

565 
CARD16
 
£quí˚Numbî
 
	mB16
;

566 
CARD32
 
Àngth
 
	mB32
;

567 
Wödow
 
roŸ
 
	mB32
, 
chûd
 B32;

568 
INT16
 
roŸX
 
	mB16
, 
roŸY
 B16, 
wöX
 B16, 
wöY
 B16;

569 
CARD16
 
mask
 
	mB16
;

570 
CARD16
 
∑d1
 
	mB16
;

571 
CARD32
 
∑d
 
	mB32
;

572 } 
	txQuîyPoöãrRïly
;

575 
BYTE
 
	mty≥
;

576 
BYTE
 
	m∑d1
;

577 
CARD16
 
£quí˚Numbî
 
	mB16
;

578 
CARD32
 
Àngth
 
	mB32
;

579 
CARD32
 
nEvíts
 
	mB32
;

580 
CARD32
 
∑d2
 
	mB32
;

581 
CARD32
 
∑d3
 
	mB32
;

582 
CARD32
 
∑d4
 
	mB32
;

583 
CARD32
 
∑d5
 
	mB32
;

584 
CARD32
 
∑d6
 
	mB32
;

585 } 
	txGëMŸi⁄EvítsRïly
;

588 
BYTE
 
	mty≥
;

589 
BOOL
 
	mßmeS¸ìn
;

590 
CARD16
 
£quí˚Numbî
 
	mB16
;

591 
CARD32
 
Àngth
 
	mB32
;

592 
Wödow
 
chûd
 
	mB32
;

593 
INT16
 
d°X
 
	mB16
, 
d°Y
 B16;

594 
CARD32
 
∑d2
 
	mB32
;

595 
CARD32
 
∑d3
 
	mB32
;

596 
CARD32
 
∑d4
 
	mB32
;

597 
CARD32
 
∑d5
 
	mB32
;

598 } 
	txTøn¶©eCo‹dsRïly
;

601 
BYTE
 
	mty≥
;

602 
CARD8
 
	mªvîtTo
;

603 
CARD16
 
£quí˚Numbî
 
	mB16
;

604 
CARD32
 
Àngth
 
	mB32
;

605 
Wödow
 
focus
 
	mB32
;

606 
CARD32
 
∑d1
 
	mB32
;

607 
CARD32
 
∑d2
 
	mB32
;

608 
CARD32
 
∑d3
 
	mB32
;

609 
CARD32
 
∑d4
 
	mB32
;

610 
CARD32
 
∑d5
 
	mB32
;

611 } 
	txGëI≈utFocusRïly
;

614 
BYTE
 
	mty≥
;

615 
BYTE
 
	m∑d1
;

616 
CARD16
 
£quí˚Numbî
 
	mB16
;

617 
CARD32
 
Àngth
 
	mB32
;

618 
BYTE
 
	mm≠
[32];

619 } 
	txQuîyKeym≠Rïly
;

622 
	s_xQuîyF⁄tRïly
 {

623 
BYTE
 
	mty≥
;

624 
BYTE
 
	m∑d1
;

625 
CARD16
 
£quí˚Numbî
 
	mB16
;

626 
CARD32
 
Àngth
 
	mB32
;

627 
xCh¨Info
 
	mmöBounds
;

628 #i‚de‡
WORD64


629 
CARD32
 
wÆign1
 
	mB32
;

631 
xCh¨Info
 
	mmaxBounds
;

632 #i‚de‡
WORD64


633 
CARD32
 
wÆign2
 
	mB32
;

635 
CARD16
 
möCh¨OrByã2
 
	mB16
, 
maxCh¨OrByã2
 B16;

636 
CARD16
 
deÁu…Ch¨
 
	mB16
;

637 
CARD16
 
nF⁄tPr›s
 
	mB16
;

638 
CARD8
 
	mdøwDúe˘i⁄
;

639 
CARD8
 
	mmöByã1
, 
	mmaxByã1
;

640 
BOOL
 
	mÆlCh¨sExi°
;

641 
INT16
 
f⁄tAs˚¡
 
	mB16
, 
f⁄tDes˚¡
 B16;

642 
CARD32
 
nCh¨Infos
 
	mB32
;

643 } 
	txQuîyF⁄tRïly
;

646 
BYTE
 
	mty≥
;

647 
CARD8
 
	mdøwDúe˘i⁄
;

648 
CARD16
 
£quí˚Numbî
 
	mB16
;

649 
CARD32
 
Àngth
 
	mB32
;

650 
INT16
 
f⁄tAs˚¡
 
	mB16
, 
f⁄tDes˚¡
 B16;

651 
INT16
 
ovîÆlAs˚¡
 
	mB16
, 
ovîÆlDes˚¡
 B16;

652 
INT32
 
ovîÆlWidth
 
	mB32
, 
ovîÆlLe·
 B32, 
ovîÆlRight
 B32;

653 
CARD32
 
∑d
 
	mB32
;

654 } 
	txQuîyTextExã¡sRïly
;

657 
BYTE
 
	mty≥
;

658 
BYTE
 
	m∑d1
;

659 
CARD16
 
£quí˚Numbî
 
	mB16
;

660 
CARD32
 
Àngth
 
	mB32
;

661 
CARD16
 
nF⁄ts
 
	mB16
;

662 
CARD16
 
∑d2
 
	mB16
;

663 
CARD32
 
∑d3
 
	mB32
;

664 
CARD32
 
∑d4
 
	mB32
;

665 
CARD32
 
∑d5
 
	mB32
;

666 
CARD32
 
∑d6
 
	mB32
;

667 
CARD32
 
∑d7
 
	mB32
;

668 } 
	txLi°F⁄tsRïly
;

672 
BYTE
 
	mty≥
;

673 
CARD8
 
	m«meLígth
;

674 
CARD16
 
£quí˚Numbî
 
	mB16
;

675 
CARD32
 
Àngth
 
	mB32
;

676 
xCh¨Info
 
	mmöBounds
;

677 #i‚de‡
WORD64


678 
CARD32
 
wÆign1
 
	mB32
;

680 
xCh¨Info
 
	mmaxBounds
;

681 #i‚de‡
WORD64


682 
CARD32
 
wÆign2
 
	mB32
;

684 
CARD16
 
möCh¨OrByã2
 
	mB16
, 
maxCh¨OrByã2
 B16;

685 
CARD16
 
deÁu…Ch¨
 
	mB16
;

686 
CARD16
 
nF⁄tPr›s
 
	mB16
;

687 
CARD8
 
	mdøwDúe˘i⁄
;

688 
CARD8
 
	mmöByã1
, 
	mmaxByã1
;

689 
BOOL
 
	mÆlCh¨sExi°
;

690 
INT16
 
f⁄tAs˚¡
 
	mB16
, 
f⁄tDes˚¡
 B16;

691 
CARD32
 
nRïlõs
 
	mB32
;

692 } 
	txLi°F⁄tsWôhInfoRïly
;

695 
BYTE
 
	mty≥
;

696 
BYTE
 
	m∑d1
;

697 
CARD16
 
£quí˚Numbî
 
	mB16
;

698 
CARD32
 
Àngth
 
	mB32
;

699 
CARD16
 
nP©hs
 
	mB16
;

700 
CARD16
 
∑d2
 
	mB16
;

701 
CARD32
 
∑d3
 
	mB32
;

702 
CARD32
 
∑d4
 
	mB32
;

703 
CARD32
 
∑d5
 
	mB32
;

704 
CARD32
 
∑d6
 
	mB32
;

705 
CARD32
 
∑d7
 
	mB32
;

706 } 
	txGëF⁄tP©hRïly
;

709 
BYTE
 
	mty≥
;

710 
CARD8
 
	mdïth
;

711 
CARD16
 
£quí˚Numbî
 
	mB16
;

712 
CARD32
 
Àngth
 
	mB32
;

713 
VisuÆID
 
visuÆ
 
	mB32
;

714 
CARD32
 
∑d3
 
	mB32
;

715 
CARD32
 
∑d4
 
	mB32
;

716 
CARD32
 
∑d5
 
	mB32
;

717 
CARD32
 
∑d6
 
	mB32
;

718 
CARD32
 
∑d7
 
	mB32
;

719 } 
	txGëImageRïly
;

722 
BYTE
 
	mty≥
;

723 
BYTE
 
	m∑d1
;

724 
CARD16
 
£quí˚Numbî
 
	mB16
;

725 
CARD32
 
Àngth
 
	mB32
;

726 
CARD16
 
nCﬁ‹m≠s
 
	mB16
;

727 
CARD16
 
∑d2
 
	mB16
;

728 
CARD32
 
∑d3
 
	mB32
;

729 
CARD32
 
∑d4
 
	mB32
;

730 
CARD32
 
∑d5
 
	mB32
;

731 
CARD32
 
∑d6
 
	mB32
;

732 
CARD32
 
∑d7
 
	mB32
;

733 } 
	txLi°In°ÆÀdCﬁ‹m≠sRïly
;

736 
BYTE
 
	mty≥
;

737 
BYTE
 
	m∑d1
;

738 
CARD16
 
£quí˚Numbî
 
	mB16
;

739 
CARD32
 
Àngth
 
	mB32
;

740 
CARD16
 
ªd
 
	mB16
, 
gªí
 B16, 
blue
 B16;

741 
CARD16
 
∑d2
 
	mB16
;

742 
CARD32
 
pixñ
 
	mB32
;

743 
CARD32
 
∑d3
 
	mB32
;

744 
CARD32
 
∑d4
 
	mB32
;

745 
CARD32
 
∑d5
 
	mB32
;

746 } 
	txAŒocCﬁ‹Rïly
;

749 
BYTE
 
	mty≥
;

750 
BYTE
 
	m∑d1
;

751 
CARD16
 
£quí˚Numbî
 
	mB16
;

752 
CARD32
 
Àngth
 
	mB32
;

753 
CARD32
 
pixñ
 
	mB32
;

754 
CARD16
 
exa˘Red
 
	mB16
, 
exa˘Gªí
 B16, 
exa˘Blue
 B16;

755 
CARD16
 
s¸ìnRed
 
	mB16
, 
s¸ìnGªí
 B16, 
s¸ìnBlue
 B16;

756 
CARD32
 
∑d2
 
	mB32
;

757 
CARD32
 
∑d3
 
	mB32
;

758 } 
	txAŒocNamedCﬁ‹Rïly
;

761 
BYTE
 
	mty≥
;

762 
BYTE
 
	m∑d1
;

763 
CARD16
 
£quí˚Numbî
 
	mB16
;

764 
CARD32
 
Àngth
 
	mB32
;

765 
CARD16
 
nPixñs
 
	mB16
, 
nMasks
 B16;

766 
CARD32
 
∑d3
 
	mB32
;

767 
CARD32
 
∑d4
 
	mB32
;

768 
CARD32
 
∑d5
 
	mB32
;

769 
CARD32
 
∑d6
 
	mB32
;

770 
CARD32
 
∑d7
 
	mB32
;

771 } 
	txAŒocCﬁ‹CñlsRïly
;

774 
BYTE
 
	mty≥
;

775 
BYTE
 
	m∑d1
;

776 
CARD16
 
£quí˚Numbî
 
	mB16
;

777 
CARD32
 
Àngth
 
	mB32
;

778 
CARD16
 
nPixñs
 
	mB16
;

779 
CARD16
 
∑d2
 
	mB16
;

780 
CARD32
 
ªdMask
 
	mB32
, 
gªíMask
 B32, 
blueMask
 B32;

781 
CARD32
 
∑d3
 
	mB32
;

782 
CARD32
 
∑d4
 
	mB32
;

783 } 
	txAŒocCﬁ‹Pœ√sRïly
;

786 
BYTE
 
	mty≥
;

787 
BYTE
 
	m∑d1
;

788 
CARD16
 
£quí˚Numbî
 
	mB16
;

789 
CARD32
 
Àngth
 
	mB32
;

790 
CARD16
 
nCﬁ‹s
 
	mB16
;

791 
CARD16
 
∑d2
 
	mB16
;

792 
CARD32
 
∑d3
 
	mB32
;

793 
CARD32
 
∑d4
 
	mB32
;

794 
CARD32
 
∑d5
 
	mB32
;

795 
CARD32
 
∑d6
 
	mB32
;

796 
CARD32
 
∑d7
 
	mB32
;

797 } 
	txQuîyCﬁ‹sRïly
;

800 
BYTE
 
	mty≥
;

801 
BYTE
 
	m∑d1
;

802 
CARD16
 
£quí˚Numbî
 
	mB16
;

803 
CARD32
 
Àngth
 
	mB32
;

804 
CARD16
 
exa˘Red
 
	mB16
, 
exa˘Gªí
 B16, 
exa˘Blue
 B16;

805 
CARD16
 
s¸ìnRed
 
	mB16
, 
s¸ìnGªí
 B16, 
s¸ìnBlue
 B16;

806 
CARD32
 
∑d3
 
	mB32
;

807 
CARD32
 
∑d4
 
	mB32
;

808 
CARD32
 
∑d5
 
	mB32
;

809 } 
	txLookupCﬁ‹Rïly
;

812 
BYTE
 
	mty≥
;

813 
BYTE
 
	m∑d1
;

814 
CARD16
 
£quí˚Numbî
 
	mB16
;

815 
CARD32
 
Àngth
 
	mB32
;

816 
CARD16
 
width
 
	mB16
, 
height
 B16;

817 
CARD32
 
∑d3
 
	mB32
;

818 
CARD32
 
∑d4
 
	mB32
;

819 
CARD32
 
∑d5
 
	mB32
;

820 
CARD32
 
∑d6
 
	mB32
;

821 
CARD32
 
∑d7
 
	mB32
;

822 } 
	txQuîyBe°SizeRïly
;

825 
BYTE
 
	mty≥
;

826 
BYTE
 
	m∑d1
;

827 
CARD16
 
£quí˚Numbî
 
	mB16
;

828 
CARD32
 
Àngth
 
	mB32
;

829 
BOOL
 
	m¥e£¡
;

830 
CARD8
 
	mmaj‹_›code
;

831 
CARD8
 
	mfú°_evít
;

832 
CARD8
 
	mfú°_îr‹
;

833 
CARD32
 
∑d3
 
	mB32
;

834 
CARD32
 
∑d4
 
	mB32
;

835 
CARD32
 
∑d5
 
	mB32
;

836 
CARD32
 
∑d6
 
	mB32
;

837 
CARD32
 
∑d7
 
	mB32
;

838 } 
	txQuîyExãnsi⁄Rïly
;

841 
BYTE
 
	mty≥
;

842 
CARD8
 
	mnExãnsi⁄s
;

843 
CARD16
 
£quí˚Numbî
 
	mB16
;

844 
CARD32
 
Àngth
 
	mB32
;

845 
CARD32
 
∑d2
 
	mB32
;

846 
CARD32
 
∑d3
 
	mB32
;

847 
CARD32
 
∑d4
 
	mB32
;

848 
CARD32
 
∑d5
 
	mB32
;

849 
CARD32
 
∑d6
 
	mB32
;

850 
CARD32
 
∑d7
 
	mB32
;

851 } 
	txLi°Exãnsi⁄sRïly
;

855 
BYTE
 
	mty≥
;

856 
CARD8
 
	msuc˚ss
;

857 
CARD16
 
£quí˚Numbî
 
	mB16
;

858 
CARD32
 
Àngth
 
	mB32
;

859 
CARD32
 
∑d2
 
	mB32
;

860 
CARD32
 
∑d3
 
	mB32
;

861 
CARD32
 
∑d4
 
	mB32
;

862 
CARD32
 
∑d5
 
	mB32
;

863 
CARD32
 
∑d6
 
	mB32
;

864 
CARD32
 
∑d7
 
	mB32
;

865 } 
	txSëM≠pögRïly
;

866 
xSëM≠pögRïly
 
	txSëPoöãrM≠pögRïly
;

867 
xSëM≠pögRïly
 
	txSëModifõrM≠pögRïly
;

870 
BYTE
 
	mty≥
;

871 
CARD8
 
	mnE…s
;

872 
CARD16
 
£quí˚Numbî
 
	mB16
;

873 
CARD32
 
Àngth
 
	mB32
;

874 
CARD32
 
∑d2
 
	mB32
;

875 
CARD32
 
∑d3
 
	mB32
;

876 
CARD32
 
∑d4
 
	mB32
;

877 
CARD32
 
∑d5
 
	mB32
;

878 
CARD32
 
∑d6
 
	mB32
;

879 
CARD32
 
∑d7
 
	mB32
;

880 } 
	txGëPoöãrM≠pögRïly
;

883 
BYTE
 
	mty≥
;

884 
CARD8
 
	mkeySymsPîKeyCode
;

885 
CARD16
 
£quí˚Numbî
 
	mB16
;

886 
CARD32
 
Àngth
 
	mB32
;

887 
CARD32
 
∑d2
 
	mB32
;

888 
CARD32
 
∑d3
 
	mB32
;

889 
CARD32
 
∑d4
 
	mB32
;

890 
CARD32
 
∑d5
 
	mB32
;

891 
CARD32
 
∑d6
 
	mB32
;

892 
CARD32
 
∑d7
 
	mB32
;

893 } 
	txGëKeybﬂrdM≠pögRïly
;

896 
BYTE
 
	mty≥
;

897 
CARD8
 
	mnumKeyPîModifõr
;

898 
CARD16
 
£quí˚Numbî
 
	mB16
;

899 
CARD32
 
Àngth
 
	mB32
;

900 
CARD32
 
∑d1
 
	mB32
;

901 
CARD32
 
∑d2
 
	mB32
;

902 
CARD32
 
∑d3
 
	mB32
;

903 
CARD32
 
∑d4
 
	mB32
;

904 
CARD32
 
∑d5
 
	mB32
;

905 
CARD32
 
∑d6
 
	mB32
;

906 } 
	txGëModifõrM≠pögRïly
;

909 
BYTE
 
	mty≥
;

910 
BOOL
 
	mglobÆAutoRïót
;

911 
CARD16
 
£quí˚Numbî
 
	mB16
;

912 
CARD32
 
Àngth
 
	mB32
;

913 
CARD32
 
ÀdMask
 
	mB32
;

914 
CARD8
 
	mkeyClickPî˚¡
, 
	mbñlPî˚¡
;

915 
CARD16
 
bñlPôch
 
	mB16
, 
bñlDuøti⁄
 B16;

916 
CARD16
 
∑d
 
	mB16
;

917 
BYTE
 
	mm≠
[32];

918 } 
	txGëKeybﬂrdC⁄åﬁRïly
;

921 
BYTE
 
	mty≥
;

922 
BYTE
 
	m∑d1
;

923 
CARD16
 
£quí˚Numbî
 
	mB16
;

924 
CARD32
 
Àngth
 
	mB32
;

925 
CARD16
 
ac˚lNumî©‹
 
	mB16
, 
ac˚lDíomö©‹
 B16;

926 
CARD16
 
thªshﬁd
 
	mB16
;

927 
CARD16
 
∑d2
 
	mB16
;

928 
CARD32
 
∑d3
 
	mB32
;

929 
CARD32
 
∑d4
 
	mB32
;

930 
CARD32
 
∑d5
 
	mB32
;

931 
CARD32
 
∑d6
 
	mB32
;

932 } 
	txGëPoöãrC⁄åﬁRïly
;

935 
BYTE
 
	mty≥
;

936 
BYTE
 
	m∑d1
;

937 
CARD16
 
£quí˚Numbî
 
	mB16
;

938 
CARD32
 
Àngth
 
	mB32
;

939 
CARD16
 
timeout
 
	mB16
, 
öãrvÆ
 B16;

940 
BOOL
 
	m¥e„rBœnkög
;

941 
BOOL
 
	mÆlowExposuªs
;

942 
CARD16
 
∑d2
 
	mB16
;

943 
CARD32
 
∑d3
 
	mB32
;

944 
CARD32
 
∑d4
 
	mB32
;

945 
CARD32
 
∑d5
 
	mB32
;

946 
CARD32
 
∑d6
 
	mB32
;

947 } 
	txGëS¸ìnSavîRïly
;

950 
BYTE
 
	mty≥
;

951 
BOOL
 
	míabÀd
;

952 
CARD16
 
£quí˚Numbî
 
	mB16
;

953 
CARD32
 
Àngth
 
	mB32
;

954 
CARD16
 
nHo°s
 
	mB16
;

955 
CARD16
 
∑d1
 
	mB16
;

956 
CARD32
 
∑d3
 
	mB32
;

957 
CARD32
 
∑d4
 
	mB32
;

958 
CARD32
 
∑d5
 
	mB32
;

959 
CARD32
 
∑d6
 
	mB32
;

960 
CARD32
 
∑d7
 
	mB32
;

961 } 
	txLi°Ho°sRïly
;

972 
BYTE
 
	mty≥
;

973 
BYTE
 
	mîr‹Code
;

974 
CARD16
 
£quí˚Numbî
 
	mB16
;

975 
CARD32
 
ªsour˚ID
 
	mB32
;

976 
CARD16
 
mö‹Code
 
	mB16
;

977 
CARD8
 
	mmaj‹Code
;

978 
BYTE
 
	m∑d1
;

979 
CARD32
 
∑d3
 
	mB32
;

980 
CARD32
 
∑d4
 
	mB32
;

981 
CARD32
 
∑d5
 
	mB32
;

982 
CARD32
 
∑d6
 
	mB32
;

983 
CARD32
 
∑d7
 
	mB32
;

984 } 
	txEº‹
;

991 
	s_xEvít
 {

994 
BYTE
 
	mty≥
;

995 
BYTE
 
	mdëaû
;

996 
CARD16
 
£quí˚Numbî
 
	mB16
;

997 } 
	mu
;

999 
CARD32
 
∑d00
 
	mB32
;

1000 
Time
 
time
 
	mB32
;

1001 
Wödow
 
roŸ
 
	mB32
, 
evít
 B32, 
chûd
 B32;

1002 
INT16
 
roŸX
 
	mB16
, 
roŸY
 B16, 
evítX
 B16, 
evítY
 B16;

1003 
KeyButMask
 
°©e
 
	mB16
;

1004 
BOOL
 
	mßmeS¸ìn
;

1005 
BYTE
 
	m∑d1
;

1006 } 
	mkeyBuâ⁄Poöãr
;

1008 
CARD32
 
∑d00
 
	mB32
;

1009 
Time
 
time
 
	mB32
;

1010 
Wödow
 
roŸ
 
	mB32
, 
evít
 B32, 
chûd
 B32;

1011 
INT16
 
roŸX
 
	mB16
, 
roŸY
 B16, 
evítX
 B16, 
evítY
 B16;

1012 
KeyButMask
 
°©e
 
	mB16
;

1013 
BYTE
 
	mmode
;

1014 
BYTE
 
	mÊags
;

1015 
	#ELFœgFocus
 (1<<0)

	)

1016 
	#ELFœgSameS¸ìn
 (1<<1)

	)

1017 } 
	míãrLóve
;

1019 
CARD32
 
∑d00
 
	mB32
;

1020 
Wödow
 
wödow
 
	mB32
;

1021 
BYTE
 
	mmode
;

1022 
BYTE
 
	m∑d1
, 
	m∑d2
, 
	m∑d3
;

1023 } 
	mfocus
;

1025 
CARD32
 
∑d00
 
	mB32
;

1026 
Wödow
 
wödow
 
	mB32
;

1027 
CARD16
 
x
 
	mB16
, 
y
 B16, 
width
 B16, 
height
 B16;

1028 
CARD16
 
cou¡
 
	mB16
;

1029 
CARD16
 
∑d2
 
	mB16
;

1030 } 
	mexpo£
;

1032 
CARD32
 
∑d00
 
	mB32
;

1033 
DøwabÀ
 
døwabÀ
 
	mB32
;

1034 
CARD16
 
x
 
	mB16
, 
y
 B16, 
width
 B16, 
height
 B16;

1035 
CARD16
 
mö‹Evít
 
	mB16
;

1036 
CARD16
 
cou¡
 
	mB16
;

1037 
BYTE
 
	mmaj‹Evít
;

1038 
BYTE
 
	m∑d1
, 
	m∑d2
, 
	m∑d3
;

1039 } 
	mgøphicsExposuª
;

1041 
CARD32
 
∑d00
 
	mB32
;

1042 
DøwabÀ
 
døwabÀ
 
	mB32
;

1043 
CARD16
 
mö‹Evít
 
	mB16
;

1044 
BYTE
 
	mmaj‹Evít
;

1045 
BYTE
 
	mb∑d
;

1046 } 
	mnoExposuª
;

1048 
CARD32
 
∑d00
 
	mB32
;

1049 
Wödow
 
wödow
 
	mB32
;

1050 
CARD8
 
	m°©e
;

1051 
BYTE
 
	m∑d1
, 
	m∑d2
, 
	m∑d3
;

1052 } 
	mvisibûôy
;

1054 
CARD32
 
∑d00
 
	mB32
;

1055 
Wödow
 
∑ª¡
 
	mB32
, 
wödow
 B32;

1056 
INT16
 
x
 
	mB16
, 
y
 B16;

1057 
CARD16
 
width
 
	mB16
, 
height
 B16, 
b‹dîWidth
 B16;

1058 
BOOL
 
	movîride
;

1059 
BYTE
 
	mb∑d
;

1060 } 
	m¸óãNŸify
;

1070 
CARD32
 
∑d00
 
	mB32
;

1071 
Wödow
 
evít
 
	mB32
, 
wödow
 B32;

1072 } 
	mde°royNŸify
;

1074 
CARD32
 
∑d00
 
	mB32
;

1075 
Wödow
 
evít
 
	mB32
, 
wödow
 B32;

1076 
BOOL
 
	m‰omC⁄figuª
;

1077 
BYTE
 
	m∑d1
, 
	m∑d2
, 
	m∑d3
;

1078 } 
	munm≠NŸify
;

1080 
CARD32
 
∑d00
 
	mB32
;

1081 
Wödow
 
evít
 
	mB32
, 
wödow
 B32;

1082 
BOOL
 
	movîride
;

1083 
BYTE
 
	m∑d1
, 
	m∑d2
, 
	m∑d3
;

1084 } 
	mm≠NŸify
;

1086 
CARD32
 
∑d00
 
	mB32
;

1087 
Wödow
 
∑ª¡
 
	mB32
, 
wödow
 B32;

1088 } 
	mm≠Reque°
;

1090 
CARD32
 
∑d00
 
	mB32
;

1091 
Wödow
 
evít
 
	mB32
, 
wödow
 B32, 
∑ª¡
 B32;

1092 
INT16
 
x
 
	mB16
, 
y
 B16;

1093 
BOOL
 
	movîride
;

1094 
BYTE
 
	m∑d1
, 
	m∑d2
, 
	m∑d3
;

1095 } 
	mª∑ª¡
;

1097 
CARD32
 
∑d00
 
	mB32
;

1098 
Wödow
 
evít
 
	mB32
, 
wödow
 B32, 
aboveSiblög
 B32;

1099 
INT16
 
x
 
	mB16
, 
y
 B16;

1100 
CARD16
 
width
 
	mB16
, 
height
 B16, 
b‹dîWidth
 B16;

1101 
BOOL
 
	movîride
;

1102 
BYTE
 
	mb∑d
;

1103 } 
	mc⁄figuªNŸify
;

1105 
CARD32
 
∑d00
 
	mB32
;

1106 
Wödow
 
∑ª¡
 
	mB32
, 
wödow
 B32, 
siblög
 B32;

1107 
INT16
 
x
 
	mB16
, 
y
 B16;

1108 
CARD16
 
width
 
	mB16
, 
height
 B16, 
b‹dîWidth
 B16;

1109 
CARD16
 
vÆueMask
 
	mB16
;

1110 
CARD32
 
∑d1
 
	mB32
;

1111 } 
	mc⁄figuªReque°
;

1113 
CARD32
 
∑d00
 
	mB32
;

1114 
Wödow
 
evít
 
	mB32
, 
wödow
 B32;

1115 
INT16
 
x
 
	mB16
, 
y
 B16;

1116 
CARD32
 
∑d1
 
	mB32
, 
∑d2
 B32, 
∑d3
 B32, 
∑d4
 B32;

1117 } 
	mgøvôy
;

1119 
CARD32
 
∑d00
 
	mB32
;

1120 
Wödow
 
wödow
 
	mB32
;

1121 
CARD16
 
width
 
	mB16
, 
height
 B16;

1122 } 
	mªsizeReque°
;

1126 
CARD32
 
∑d00
 
	mB32
;

1127 
Wödow
 
evít
 
	mB32
, 
wödow
 B32, 
∑ª¡
 B32;

1128 
BYTE
 
	m∂a˚
;

1129 
BYTE
 
	m∑d1
, 
	m∑d2
, 
	m∑d3
;

1130 } 
	mcúcuœã
;

1132 
CARD32
 
∑d00
 
	mB32
;

1133 
Wödow
 
wödow
 
	mB32
;

1134 
Atom
 
©om
 
	mB32
;

1135 
Time
 
time
 
	mB32
;

1136 
BYTE
 
	m°©e
;

1137 
BYTE
 
	m∑d1
;

1138 
CARD16
 
∑d2
 
	mB16
;

1139 } 
	m¥›îty
;

1141 
CARD32
 
∑d00
 
	mB32
;

1142 
Time
 
time
 
	mB32
;

1143 
Wödow
 
wödow
 
	mB32
;

1144 
Atom
 
©om
 
	mB32
;

1145 } 
	m£À˘i⁄CÀ¨
;

1147 
CARD32
 
∑d00
 
	mB32
;

1148 
Time
 
time
 
	mB32
;

1149 
Wödow
 
ow√r
 
	mB32
, 
ªque°‹
 B32;

1150 
Atom
 
£À˘i⁄
 
	mB32
, 
èrgë
 B32, 
¥›îty
 B32;

1151 } 
	m£À˘i⁄Reque°
;

1153 
CARD32
 
∑d00
 
	mB32
;

1154 
Time
 
time
 
	mB32
;

1155 
Wödow
 
ªque°‹
 
	mB32
;

1156 
Atom
 
£À˘i⁄
 
	mB32
, 
èrgë
 B32, 
¥›îty
 B32;

1157 } 
	m£À˘i⁄NŸify
;

1159 
CARD32
 
∑d00
 
	mB32
;

1160 
Wödow
 
wödow
 
	mB32
;

1161 
Cﬁ‹m≠
 
cﬁ‹m≠
 
	mB32
;

1162 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

1163 
BOOL
 
	mc_√w
;

1165 
BOOL
 
	m√w
;

1167 
BYTE
 
	m°©e
;

1168 
BYTE
 
	m∑d1
, 
	m∑d2
;

1169 } 
	mcﬁ‹m≠
;

1171 
CARD32
 
∑d00
 
	mB32
;

1172 
CARD8
 
	mªque°
;

1173 
KeyCode
 
	mfú°KeyCode
;

1174 
CARD8
 
	mcou¡
;

1175 
BYTE
 
	m∑d1
;

1176 } 
	mm≠pögNŸify
;

1178 
CARD32
 
∑d00
 
	mB32
;

1179 
Wödow
 
wödow
 
	mB32
;

1182 
Atom
 
ty≥
 
	mB32
;

1183 
INT32
 
l⁄gs0
 
	mB32
;

1184 
INT32
 
l⁄gs1
 
	mB32
;

1185 
INT32
 
l⁄gs2
 
	mB32
;

1186 
INT32
 
l⁄gs3
 
	mB32
;

1187 
INT32
 
l⁄gs4
 
	mB32
;

1188 } 
	ml
;

1190 
Atom
 
ty≥
 
	mB32
;

1191 
INT16
 
sh‹ts0
 
	mB16
;

1192 
INT16
 
sh‹ts1
 
	mB16
;

1193 
INT16
 
sh‹ts2
 
	mB16
;

1194 
INT16
 
sh‹ts3
 
	mB16
;

1195 
INT16
 
sh‹ts4
 
	mB16
;

1196 
INT16
 
sh‹ts5
 
	mB16
;

1197 
INT16
 
sh‹ts6
 
	mB16
;

1198 
INT16
 
sh‹ts7
 
	mB16
;

1199 
INT16
 
sh‹ts8
 
	mB16
;

1200 
INT16
 
sh‹ts9
 
	mB16
;

1201 } 
	ms
;

1203 
Atom
 
ty≥
 
	mB32
;

1204 
INT8
 
	mbyãs
[20];

1205 } 
	mb
;

1206 } 
	mu
;

1207 } 
	m˛õ¡Mesßge
;

1208 } 
	mu
;

1209 } 
	txEvít
;

1228 
BYTE
 
	mty≥
;

1229 
CARD8
 
	mexãnsi⁄
;

1230 
CARD16
 
£quí˚Numbî
 
	mB16
;

1231 
CARD32
 
Àngth
 
	mB32
;

1232 
CARD16
 
evty≥
 
	mB16
;

1233 
CARD16
 
∑d2
 
	mB16
;

1234 
CARD32
 
∑d3
 
	mB32
;

1235 
CARD32
 
∑d4
 
	mB32
;

1236 
CARD32
 
∑d5
 
	mB32
;

1237 
CARD32
 
∑d6
 
	mB32
;

1238 
CARD32
 
∑d7
 
	mB32
;

1239 } 
	txGíîicEvít
;

1248 
BYTE
 
	mty≥
;

1249 
BYTE
 
	mm≠
[31];

1250 } 
	txKeym≠Evít
;

1252 
	#XEvítSize
 ((
xEvít
))

	)

1260 
xGíîicRïly
 
	mgíîic
;

1261 
xGëGeomëryRïly
 
	mgeom
;

1262 
xQuîyTªeRïly
 
	måì
;

1263 
xI¡înAtomRïly
 
	m©om
;

1264 
xGëAtomNameRïly
 
	m©omName
;

1265 
xGëPr›îtyRïly
 
	m¥›îty
;

1266 
xLi°Pr›îtõsRïly
 
	mli°Pr›îtõs
;

1267 
xGëSñe˘i⁄Ow√rRïly
 
	m£À˘i⁄
;

1268 
xGøbPoöãrRïly
 
	mgøbPoöãr
;

1269 
xGøbKeybﬂrdRïly
 
	mgøbKeybﬂrd
;

1270 
xQuîyPoöãrRïly
 
	mpoöãr
;

1271 
xGëMŸi⁄EvítsRïly
 
	mmŸi⁄Evíts
;

1272 
xTøn¶©eCo‹dsRïly
 
	mco‹ds
;

1273 
xGëI≈utFocusRïly
 
	möputFocus
;

1274 
xQuîyTextExã¡sRïly
 
	mãxtExã¡s
;

1275 
xLi°F⁄tsRïly
 
	mf⁄ts
;

1276 
xGëF⁄tP©hRïly
 
	mf⁄tP©h
;

1277 
xGëImageRïly
 
	mimage
;

1278 
xLi°In°ÆÀdCﬁ‹m≠sRïly
 
	mcﬁ‹m≠s
;

1279 
xAŒocCﬁ‹Rïly
 
	mÆlocCﬁ‹
;

1280 
xAŒocNamedCﬁ‹Rïly
 
	mÆlocNamedCﬁ‹
;

1281 
xAŒocCﬁ‹CñlsRïly
 
	mcﬁ‹Cñls
;

1282 
xAŒocCﬁ‹Pœ√sRïly
 
	mcﬁ‹Pœ√s
;

1283 
xQuîyCﬁ‹sRïly
 
	mcﬁ‹s
;

1284 
xLookupCﬁ‹Rïly
 
	mlookupCﬁ‹
;

1285 
xQuîyBe°SizeRïly
 
	mbe°Size
;

1286 
xQuîyExãnsi⁄Rïly
 
	mexãnsi⁄
;

1287 
xLi°Exãnsi⁄sRïly
 
	mexãnsi⁄s
;

1288 
xSëModifõrM≠pögRïly
 
	m£tModifõrM≠pög
;

1289 
xGëModifõrM≠pögRïly
 
	mgëModifõrM≠pög
;

1290 
xSëPoöãrM≠pögRïly
 
	m£tPoöãrM≠pög
;

1291 
xGëKeybﬂrdM≠pögRïly
 
	mgëKeybﬂrdM≠pög
;

1292 
xGëPoöãrM≠pögRïly
 
	mgëPoöãrM≠pög
;

1293 
xGëPoöãrC⁄åﬁRïly
 
	mpoöãrC⁄åﬁ
;

1294 
xGëS¸ìnSavîRïly
 
	ms¸ìnSavî
;

1295 
xLi°Ho°sRïly
 
	mho°s
;

1296 
xEº‹
 
	mîr‹
;

1297 
xEvít
 
	mevít
;

1298 } 
	txRïly
;

1309 
	s_xReq
 {

1310 
CARD8
 
	mªqTy≥
;

1311 
CARD8
 
	md©a
;

1312 
CARD16
 
Àngth
 
	mB16
;

1314 } 
	txReq
;

1324 
CARD8
 
	mªqTy≥
;

1325 
BYTE
 
	m∑d
;

1326 
CARD16
 
Àngth
 
	mB16
;

1327 
CARD32
 
id
 
	mB32
;

1328 } 
	txResour˚Req
;

1331 
CARD8
 
	mªqTy≥
;

1332 
CARD8
 
	mdïth
;

1333 
CARD16
 
Àngth
 
	mB16
;

1334 
Wödow
 
wid
 
	mB32
, 
∑ª¡
 B32;

1335 
INT16
 
x
 
	mB16
, 
y
 B16;

1336 
CARD16
 
width
 
	mB16
, 
height
 B16, 
b‹dîWidth
 B16;

1337 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

1338 
CARD16
 
c_˛ass
 
	mB16
;

1340 
CARD16
 
˛ass
 
	mB16
;

1342 
VisuÆID
 
visuÆ
 
	mB32
;

1343 
CARD32
 
mask
 
	mB32
;

1344 } 
	txCª©eWödowReq
;

1347 
CARD8
 
	mªqTy≥
;

1348 
BYTE
 
	m∑d
;

1349 
CARD16
 
Àngth
 
	mB16
;

1350 
Wödow
 
wödow
 
	mB32
;

1351 
CARD32
 
vÆueMask
 
	mB32
;

1352 } 
	txCh™geWödowAâribuãsReq
;

1355 
CARD8
 
	mªqTy≥
;

1356 
BYTE
 
	mmode
;

1357 
CARD16
 
Àngth
 
	mB16
;

1358 
Wödow
 
wödow
 
	mB32
;

1359 } 
	txCh™geSaveSëReq
;

1362 
CARD8
 
	mªqTy≥
;

1363 
BYTE
 
	m∑d
;

1364 
CARD16
 
Àngth
 
	mB16
;

1365 
Wödow
 
wödow
 
	mB32
, 
∑ª¡
 B32;

1366 
INT16
 
x
 
	mB16
, 
y
 B16;

1367 } 
	txRï¨ítWödowReq
;

1370 
CARD8
 
	mªqTy≥
;

1371 
CARD8
 
	m∑d
;

1372 
CARD16
 
Àngth
 
	mB16
;

1373 
Wödow
 
wödow
 
	mB32
;

1374 
CARD16
 
mask
 
	mB16
;

1375 
CARD16
 
∑d2
 
	mB16
;

1376 } 
	txC⁄figuªWödowReq
;

1379 
CARD8
 
	mªqTy≥
;

1380 
CARD8
 
	mdúe˘i⁄
;

1381 
CARD16
 
Àngth
 
	mB16
;

1382 
Wödow
 
wödow
 
	mB32
;

1383 } 
	txCúcuœãWödowReq
;

1386 
CARD8
 
	mªqTy≥
;

1387 
BOOL
 
	m⁄lyIfExi°s
;

1388 
CARD16
 
Àngth
 
	mB16
;

1389 
CARD16
 
nbyãs
 
	mB16
;

1390 
CARD16
 
∑d
 
	mB16
;

1391 } 
	txI¡înAtomReq
;

1394 
CARD8
 
	mªqTy≥
;

1395 
CARD8
 
	mmode
;

1396 
CARD16
 
Àngth
 
	mB16
;

1397 
Wödow
 
wödow
 
	mB32
;

1398 
Atom
 
¥›îty
 
	mB32
, 
ty≥
 B32;

1399 
CARD8
 
	mf‹m©
;

1400 
BYTE
 
	m∑d
[3];

1401 
CARD32
 
nUnôs
 
	mB32
;

1402 } 
	txCh™gePr›îtyReq
;

1405 
CARD8
 
	mªqTy≥
;

1406 
BYTE
 
	m∑d
;

1407 
CARD16
 
Àngth
 
	mB16
;

1408 
Wödow
 
wödow
 
	mB32
;

1409 
Atom
 
¥›îty
 
	mB32
;

1410 } 
	txDñëePr›îtyReq
;

1413 
CARD8
 
	mªqTy≥
;

1414 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

1415 
BOOL
 
	mc_dñëe
;

1417 
BOOL
 
	mdñëe
;

1419 
CARD16
 
Àngth
 
	mB16
;

1420 
Wödow
 
wödow
 
	mB32
;

1421 
Atom
 
¥›îty
 
	mB32
, 
ty≥
 B32;

1422 
CARD32
 
l⁄gOff£t
 
	mB32
;

1423 
CARD32
 
l⁄gLígth
 
	mB32
;

1424 } 
	txGëPr›îtyReq
;

1427 
CARD8
 
	mªqTy≥
;

1428 
BYTE
 
	m∑d
;

1429 
CARD16
 
Àngth
 
	mB16
;

1430 
Wödow
 
wödow
 
	mB32
;

1431 
Atom
 
£À˘i⁄
 
	mB32
;

1432 
Time
 
time
 
	mB32
;

1433 } 
	txSëSñe˘i⁄Ow√rReq
;

1436 
CARD8
 
	mªqTy≥
;

1437 
BYTE
 
	m∑d
;

1438 
CARD16
 
Àngth
 
	mB16
;

1439 
Wödow
 
ªque°‹
 
	mB32
;

1440 
Atom
 
£À˘i⁄
 
	mB32
, 
èrgë
 B32, 
¥›îty
 B32;

1441 
Time
 
time
 
	mB32
;

1442 } 
	txC⁄vîtSñe˘i⁄Req
;

1445 
CARD8
 
	mªqTy≥
;

1446 
BOOL
 
	m¥›ag©e
;

1447 
CARD16
 
Àngth
 
	mB16
;

1448 
Wödow
 
de°ö©i⁄
 
	mB32
;

1449 
CARD32
 
evítMask
 
	mB32
;

1450 #ifde‡
WORD64


1452 
BYTE
 
	mevítd©a
[
SIZEOF
(
xEvít
)];

1454 
xEvít
 
	mevít
;

1456 } 
	txSídEvítReq
;

1459 
CARD8
 
	mªqTy≥
;

1460 
BOOL
 
	mow√rEvíts
;

1461 
CARD16
 
Àngth
 
	mB16
;

1462 
Wödow
 
gøbWödow
 
	mB32
;

1463 
CARD16
 
evítMask
 
	mB16
;

1464 
BYTE
 
	mpoöãrMode
, 
	mkeybﬂrdMode
;

1465 
Wödow
 
c⁄föeTo
 
	mB32
;

1466 
Curs‹
 
curs‹
 
	mB32
;

1467 
Time
 
time
 
	mB32
;

1468 } 
	txGøbPoöãrReq
;

1471 
CARD8
 
	mªqTy≥
;

1472 
BOOL
 
	mow√rEvíts
;

1473 
CARD16
 
Àngth
 
	mB16
;

1474 
Wödow
 
gøbWödow
 
	mB32
;

1475 
CARD16
 
evítMask
 
	mB16
;

1476 
BYTE
 
	mpoöãrMode
, 
	mkeybﬂrdMode
;

1477 
Wödow
 
c⁄föeTo
 
	mB32
;

1478 
Curs‹
 
curs‹
 
	mB32
;

1479 
CARD8
 
	mbuâ⁄
;

1480 
BYTE
 
	m∑d
;

1481 
CARD16
 
modifõrs
 
	mB16
;

1482 } 
	txGøbBuâ⁄Req
;

1485 
CARD8
 
	mªqTy≥
;

1486 
CARD8
 
	mbuâ⁄
;

1487 
CARD16
 
Àngth
 
	mB16
;

1488 
Wödow
 
gøbWödow
 
	mB32
;

1489 
CARD16
 
modifõrs
 
	mB16
;

1490 
CARD16
 
∑d
 
	mB16
;

1491 } 
	txUngøbBuâ⁄Req
;

1494 
CARD8
 
	mªqTy≥
;

1495 
BYTE
 
	m∑d
;

1496 
CARD16
 
Àngth
 
	mB16
;

1497 
Curs‹
 
curs‹
 
	mB32
;

1498 
Time
 
time
 
	mB32
;

1499 
CARD16
 
evítMask
 
	mB16
;

1500 
CARD16
 
∑d2
 
	mB16
;

1501 } 
	txCh™geA˘ivePoöãrGøbReq
;

1504 
CARD8
 
	mªqTy≥
;

1505 
BOOL
 
	mow√rEvíts
;

1506 
CARD16
 
Àngth
 
	mB16
;

1507 
Wödow
 
gøbWödow
 
	mB32
;

1508 
Time
 
time
 
	mB32
;

1509 
BYTE
 
	mpoöãrMode
, 
	mkeybﬂrdMode
;

1510 
CARD16
 
∑d
 
	mB16
;

1511 } 
	txGøbKeybﬂrdReq
;

1514 
CARD8
 
	mªqTy≥
;

1515 
BOOL
 
	mow√rEvíts
;

1516 
CARD16
 
Àngth
 
	mB16
;

1517 
Wödow
 
gøbWödow
 
	mB32
;

1518 
CARD16
 
modifõrs
 
	mB16
;

1519 
CARD8
 
	mkey
;

1520 
BYTE
 
	mpoöãrMode
, 
	mkeybﬂrdMode
;

1521 
BYTE
 
	m∑d1
, 
	m∑d2
, 
	m∑d3
;

1522 } 
	txGøbKeyReq
;

1525 
CARD8
 
	mªqTy≥
;

1526 
CARD8
 
	mkey
;

1527 
CARD16
 
Àngth
 
	mB16
;

1528 
Wödow
 
gøbWödow
 
	mB32
;

1529 
CARD16
 
modifõrs
 
	mB16
;

1530 
CARD16
 
∑d
 
	mB16
;

1531 } 
	txUngøbKeyReq
;

1534 
CARD8
 
	mªqTy≥
;

1535 
CARD8
 
	mmode
;

1536 
CARD16
 
Àngth
 
	mB16
;

1537 
Time
 
time
 
	mB32
;

1538 } 
	txAŒowEvítsReq
;

1541 
CARD8
 
	mªqTy≥
;

1542 
BYTE
 
	m∑d
;

1543 
CARD16
 
Àngth
 
	mB16
;

1544 
Wödow
 
wödow
 
	mB32
;

1545 
Time
 
°¨t
 
	mB32
, 
°›
 B32;

1546 } 
	txGëMŸi⁄EvítsReq
;

1549 
CARD8
 
	mªqTy≥
;

1550 
BYTE
 
	m∑d
;

1551 
CARD16
 
Àngth
 
	mB16
;

1552 
Wödow
 
§cWid
 
	mB32
, 
d°Wid
 B32;

1553 
INT16
 
§cX
 
	mB16
, 
§cY
 B16;

1554 } 
	txTøn¶©eCo‹dsReq
;

1557 
CARD8
 
	mªqTy≥
;

1558 
BYTE
 
	m∑d
;

1559 
CARD16
 
Àngth
 
	mB16
;

1560 
Wödow
 
§cWid
 
	mB32
, 
d°Wid
 B32;

1561 
INT16
 
§cX
 
	mB16
, 
§cY
 B16;

1562 
CARD16
 
§cWidth
 
	mB16
, 
§cHeight
 B16;

1563 
INT16
 
d°X
 
	mB16
, 
d°Y
 B16;

1564 } 
	txW¨pPoöãrReq
;

1567 
CARD8
 
	mªqTy≥
;

1568 
CARD8
 
	mªvîtTo
;

1569 
CARD16
 
Àngth
 
	mB16
;

1570 
Wödow
 
focus
 
	mB32
;

1571 
Time
 
time
 
	mB32
;

1572 } 
	txSëI≈utFocusReq
;

1575 
CARD8
 
	mªqTy≥
;

1576 
BYTE
 
	m∑d
;

1577 
CARD16
 
Àngth
 
	mB16
;

1578 
F⁄t
 
fid
 
	mB32
;

1579 
CARD16
 
nbyãs
 
	mB16
;

1580 
BYTE
 
	m∑d1
, 
	m∑d2
;

1581 } 
	txO≥nF⁄tReq
;

1584 
CARD8
 
	mªqTy≥
;

1585 
BOOL
 
	moddLígth
;

1586 
CARD16
 
Àngth
 
	mB16
;

1587 
F⁄t
 
fid
 
	mB32
;

1588 } 
	txQuîyTextExã¡sReq
;

1591 
CARD8
 
	mªqTy≥
;

1592 
BYTE
 
	m∑d
;

1593 
CARD16
 
Àngth
 
	mB16
;

1594 
CARD16
 
maxNames
 
	mB16
;

1595 
CARD16
 
nbyãs
 
	mB16
;

1596 } 
	txLi°F⁄tsReq
;

1598 
xLi°F⁄tsReq
 
	txLi°F⁄tsWôhInfoReq
;

1601 
CARD8
 
	mªqTy≥
;

1602 
BYTE
 
	m∑d
;

1603 
CARD16
 
Àngth
 
	mB16
;

1604 
CARD16
 
nF⁄ts
 
	mB16
;

1605 
BYTE
 
	m∑d1
, 
	m∑d2
;

1606 } 
	txSëF⁄tP©hReq
;

1609 
CARD8
 
	mªqTy≥
;

1610 
CARD8
 
	mdïth
;

1611 
CARD16
 
Àngth
 
	mB16
;

1612 
Pixm≠
 
pid
 
	mB32
;

1613 
DøwabÀ
 
døwabÀ
 
	mB32
;

1614 
CARD16
 
width
 
	mB16
, 
height
 B16;

1615 } 
	txCª©ePixm≠Req
;

1618 
CARD8
 
	mªqTy≥
;

1619 
BYTE
 
	m∑d
;

1620 
CARD16
 
Àngth
 
	mB16
;

1621 
GC⁄ãxt
 
gc
 
	mB32
;

1622 
DøwabÀ
 
døwabÀ
 
	mB32
;

1623 
CARD32
 
mask
 
	mB32
;

1624 } 
	txCª©eGCReq
;

1627 
CARD8
 
	mªqTy≥
;

1628 
BYTE
 
	m∑d
;

1629 
CARD16
 
Àngth
 
	mB16
;

1630 
GC⁄ãxt
 
gc
 
	mB32
;

1631 
CARD32
 
mask
 
	mB32
;

1632 } 
	txCh™geGCReq
;

1635 
CARD8
 
	mªqTy≥
;

1636 
BYTE
 
	m∑d
;

1637 
CARD16
 
Àngth
 
	mB16
;

1638 
GC⁄ãxt
 
§cGC
 
	mB32
, 
d°GC
 B32;

1639 
CARD32
 
mask
 
	mB32
;

1640 } 
	txC›yGCReq
;

1643 
CARD8
 
	mªqTy≥
;

1644 
BYTE
 
	m∑d
;

1645 
CARD16
 
Àngth
 
	mB16
;

1646 
GC⁄ãxt
 
gc
 
	mB32
;

1647 
CARD16
 
dashOff£t
 
	mB16
;

1648 
CARD16
 
nDashes
 
	mB16
;

1649 } 
	txSëDashesReq
;

1652 
CARD8
 
	mªqTy≥
;

1653 
BYTE
 
	m‹dîög
;

1654 
CARD16
 
Àngth
 
	mB16
;

1655 
GC⁄ãxt
 
gc
 
	mB32
;

1656 
INT16
 
xOrigö
 
	mB16
, 
yOrigö
 B16;

1657 } 
	txSëClùRe˘™gÀsReq
;

1660 
CARD8
 
	mªqTy≥
;

1661 
BOOL
 
	mexposuªs
;

1662 
CARD16
 
Àngth
 
	mB16
;

1663 
Wödow
 
wödow
 
	mB32
;

1664 
INT16
 
x
 
	mB16
, 
y
 B16;

1665 
CARD16
 
width
 
	mB16
, 
height
 B16;

1666 } 
	txCÀ¨AªaReq
;

1669 
CARD8
 
	mªqTy≥
;

1670 
BYTE
 
	m∑d
;

1671 
CARD16
 
Àngth
 
	mB16
;

1672 
DøwabÀ
 
§cDøwabÀ
 
	mB32
, 
d°DøwabÀ
 B32;

1673 
GC⁄ãxt
 
gc
 
	mB32
;

1674 
INT16
 
§cX
 
	mB16
, 
§cY
 B16, 
d°X
 B16, 
d°Y
 B16;

1675 
CARD16
 
width
 
	mB16
, 
height
 B16;

1676 } 
	txC›yAªaReq
;

1679 
CARD8
 
	mªqTy≥
;

1680 
BYTE
 
	m∑d
;

1681 
CARD16
 
Àngth
 
	mB16
;

1682 
DøwabÀ
 
§cDøwabÀ
 
	mB32
, 
d°DøwabÀ
 B32;

1683 
GC⁄ãxt
 
gc
 
	mB32
;

1684 
INT16
 
§cX
 
	mB16
, 
§cY
 B16, 
d°X
 B16, 
d°Y
 B16;

1685 
CARD16
 
width
 
	mB16
, 
height
 B16;

1686 
CARD32
 
bôPœ√
 
	mB32
;

1687 } 
	txC›yPœ√Req
;

1690 
CARD8
 
	mªqTy≥
;

1691 
BYTE
 
	mco‹dMode
;

1692 
CARD16
 
Àngth
 
	mB16
;

1693 
DøwabÀ
 
døwabÀ
 
	mB32
;

1694 
GC⁄ãxt
 
gc
 
	mB32
;

1695 } 
	txPﬁyPoötReq
;

1697 
xPﬁyPoötReq
 
	txPﬁyLöeReq
;

1702 
CARD8
 
	mªqTy≥
;

1703 
BYTE
 
	m∑d
;

1704 
CARD16
 
Àngth
 
	mB16
;

1705 
DøwabÀ
 
døwabÀ
 
	mB32
;

1706 
GC⁄ãxt
 
gc
 
	mB32
;

1707 } 
	txPﬁySegmítReq
;

1709 
xPﬁySegmítReq
 
	txPﬁyArcReq
;

1710 
xPﬁySegmítReq
 
	txPﬁyRe˘™gÀReq
;

1711 
xPﬁySegmítReq
 
	txPﬁyFûlRe˘™gÀReq
;

1712 
xPﬁySegmítReq
 
	txPﬁyFûlArcReq
;

1714 
	s_FûlPﬁyReq
 {

1715 
CARD8
 
	mªqTy≥
;

1716 
BYTE
 
	m∑d
;

1717 
CARD16
 
Àngth
 
	mB16
;

1718 
DøwabÀ
 
døwabÀ
 
	mB32
;

1719 
GC⁄ãxt
 
gc
 
	mB32
;

1720 
BYTE
 
	msh≠e
;

1721 
BYTE
 
	mco‹dMode
;

1722 
CARD16
 
∑d1
 
	mB16
;

1723 } 
	txFûlPﬁyReq
;

1726 
	s_PutImageReq
 {

1727 
CARD8
 
	mªqTy≥
;

1728 
CARD8
 
	mf‹m©
;

1729 
CARD16
 
Àngth
 
	mB16
;

1730 
DøwabÀ
 
døwabÀ
 
	mB32
;

1731 
GC⁄ãxt
 
gc
 
	mB32
;

1732 
CARD16
 
width
 
	mB16
, 
height
 B16;

1733 
INT16
 
d°X
 
	mB16
, 
d°Y
 B16;

1734 
CARD8
 
	mÀ·Pad
;

1735 
CARD8
 
	mdïth
;

1736 
CARD16
 
∑d
 
	mB16
;

1737 } 
	txPutImageReq
;

1740 
CARD8
 
	mªqTy≥
;

1741 
CARD8
 
	mf‹m©
;

1742 
CARD16
 
Àngth
 
	mB16
;

1743 
DøwabÀ
 
døwabÀ
 
	mB32
;

1744 
INT16
 
x
 
	mB16
, 
y
 B16;

1745 
CARD16
 
width
 
	mB16
, 
height
 B16;

1746 
CARD32
 
∂™eMask
 
	mB32
;

1747 } 
	txGëImageReq
;

1752 
CARD8
 
	mªqTy≥
;

1753 
CARD8
 
	m∑d
;

1754 
CARD16
 
Àngth
 
	mB16
;

1755 
DøwabÀ
 
døwabÀ
 
	mB32
;

1756 
GC⁄ãxt
 
gc
 
	mB32
;

1757 
INT16
 
x
 
	mB16
, 
y
 B16;

1758 } 
	txPﬁyTextReq
;

1760 
xPﬁyTextReq
 
	txPﬁyText8Req
;

1761 
xPﬁyTextReq
 
	txPﬁyText16Req
;

1764 
CARD8
 
	mªqTy≥
;

1765 
BYTE
 
	mnCh¨s
;

1766 
CARD16
 
Àngth
 
	mB16
;

1767 
DøwabÀ
 
døwabÀ
 
	mB32
;

1768 
GC⁄ãxt
 
gc
 
	mB32
;

1769 
INT16
 
x
 
	mB16
, 
y
 B16;

1770 } 
	txImageTextReq
;

1772 
xImageTextReq
 
	txImageText8Req
;

1773 
xImageTextReq
 
	txImageText16Req
;

1776 
CARD8
 
	mªqTy≥
;

1777 
BYTE
 
	mÆloc
;

1778 
CARD16
 
Àngth
 
	mB16
;

1779 
Cﬁ‹m≠
 
mid
 
	mB32
;

1780 
Wödow
 
wödow
 
	mB32
;

1781 
VisuÆID
 
visuÆ
 
	mB32
;

1782 } 
	txCª©eCﬁ‹m≠Req
;

1785 
CARD8
 
	mªqTy≥
;

1786 
BYTE
 
	m∑d
;

1787 
CARD16
 
Àngth
 
	mB16
;

1788 
Cﬁ‹m≠
 
mid
 
	mB32
;

1789 
Cﬁ‹m≠
 
§cCm≠
 
	mB32
;

1790 } 
	txC›yCﬁ‹m≠AndFªeReq
;

1793 
CARD8
 
	mªqTy≥
;

1794 
BYTE
 
	m∑d
;

1795 
CARD16
 
Àngth
 
	mB16
;

1796 
Cﬁ‹m≠
 
cm≠
 
	mB32
;

1797 
CARD16
 
ªd
 
	mB16
, 
gªí
 B16, 
blue
 B16;

1798 
CARD16
 
∑d2
 
	mB16
;

1799 } 
	txAŒocCﬁ‹Req
;

1802 
CARD8
 
	mªqTy≥
;

1803 
BYTE
 
	m∑d
;

1804 
CARD16
 
Àngth
 
	mB16
;

1805 
Cﬁ‹m≠
 
cm≠
 
	mB32
;

1806 
CARD16
 
nbyãs
 
	mB16
;

1807 
BYTE
 
	m∑d1
, 
	m∑d2
;

1808 } 
	txAŒocNamedCﬁ‹Req
;

1811 
CARD8
 
	mªqTy≥
;

1812 
BOOL
 
	mc⁄tiguous
;

1813 
CARD16
 
Àngth
 
	mB16
;

1814 
Cﬁ‹m≠
 
cm≠
 
	mB32
;

1815 
CARD16
 
cﬁ‹s
 
	mB16
, 
∂™es
 B16;

1816 } 
	txAŒocCﬁ‹CñlsReq
;

1819 
CARD8
 
	mªqTy≥
;

1820 
BOOL
 
	mc⁄tiguous
;

1821 
CARD16
 
Àngth
 
	mB16
;

1822 
Cﬁ‹m≠
 
cm≠
 
	mB32
;

1823 
CARD16
 
cﬁ‹s
 
	mB16
, 
ªd
 B16, 
gªí
 B16, 
blue
 B16;

1824 } 
	txAŒocCﬁ‹Pœ√sReq
;

1827 
CARD8
 
	mªqTy≥
;

1828 
BYTE
 
	m∑d
;

1829 
CARD16
 
Àngth
 
	mB16
;

1830 
Cﬁ‹m≠
 
cm≠
 
	mB32
;

1831 
CARD32
 
∂™eMask
 
	mB32
;

1832 } 
	txFªeCﬁ‹sReq
;

1835 
CARD8
 
	mªqTy≥
;

1836 
BYTE
 
	m∑d
;

1837 
CARD16
 
Àngth
 
	mB16
;

1838 
Cﬁ‹m≠
 
cm≠
 
	mB32
;

1839 } 
	txSt‹eCﬁ‹sReq
;

1842 
CARD8
 
	mªqTy≥
;

1843 
CARD8
 
	mÊags
;

1844 
CARD16
 
Àngth
 
	mB16
;

1845 
Cﬁ‹m≠
 
cm≠
 
	mB32
;

1846 
CARD32
 
pixñ
 
	mB32
;

1847 
CARD16
 
nbyãs
 
	mB16
;

1848 
BYTE
 
	m∑d1
, 
	m∑d2
;

1849 } 
	txSt‹eNamedCﬁ‹Req
;

1852 
CARD8
 
	mªqTy≥
;

1853 
BYTE
 
	m∑d
;

1854 
CARD16
 
Àngth
 
	mB16
;

1855 
Cﬁ‹m≠
 
cm≠
 
	mB32
;

1856 } 
	txQuîyCﬁ‹sReq
;

1859 
CARD8
 
	mªqTy≥
;

1860 
BYTE
 
	m∑d
;

1861 
CARD16
 
Àngth
 
	mB16
;

1862 
Cﬁ‹m≠
 
cm≠
 
	mB32
;

1863 
CARD16
 
nbyãs
 
	mB16
;

1864 
BYTE
 
	m∑d1
, 
	m∑d2
;

1865 } 
	txLookupCﬁ‹Req
;

1868 
CARD8
 
	mªqTy≥
;

1869 
BYTE
 
	m∑d
;

1870 
CARD16
 
Àngth
 
	mB16
;

1871 
Curs‹
 
cid
 
	mB32
;

1872 
Pixm≠
 
sour˚
 
	mB32
, 
mask
 B32;

1873 
CARD16
 
f‹eRed
 
	mB16
, 
f‹eGªí
 B16, 
f‹eBlue
 B16;

1874 
CARD16
 
backRed
 
	mB16
, 
backGªí
 B16, 
backBlue
 B16;

1875 
CARD16
 
x
 
	mB16
, 
y
 B16;

1876 } 
	txCª©eCurs‹Req
;

1879 
CARD8
 
	mªqTy≥
;

1880 
BYTE
 
	m∑d
;

1881 
CARD16
 
Àngth
 
	mB16
;

1882 
Curs‹
 
cid
 
	mB32
;

1883 
F⁄t
 
sour˚
 
	mB32
, 
mask
 B32;

1884 
CARD16
 
sour˚Ch¨
 
	mB16
, 
maskCh¨
 B16;

1885 
CARD16
 
f‹eRed
 
	mB16
, 
f‹eGªí
 B16, 
f‹eBlue
 B16;

1886 
CARD16
 
backRed
 
	mB16
, 
backGªí
 B16, 
backBlue
 B16;

1887 } 
	txCª©eGlyphCurs‹Req
;

1890 
CARD8
 
	mªqTy≥
;

1891 
BYTE
 
	m∑d
;

1892 
CARD16
 
Àngth
 
	mB16
;

1893 
Curs‹
 
curs‹
 
	mB32
;

1894 
CARD16
 
f‹eRed
 
	mB16
, 
f‹eGªí
 B16, 
f‹eBlue
 B16;

1895 
CARD16
 
backRed
 
	mB16
, 
backGªí
 B16, 
backBlue
 B16;

1896 } 
	txRecﬁ‹Curs‹Req
;

1899 
CARD8
 
	mªqTy≥
;

1900 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

1901 
CARD8
 
	mc_˛ass
;

1903 
CARD8
 
	m˛ass
;

1905 
CARD16
 
Àngth
 
	mB16
;

1906 
DøwabÀ
 
døwabÀ
 
	mB32
;

1907 
CARD16
 
width
 
	mB16
, 
height
 B16;

1908 } 
	txQuîyBe°SizeReq
;

1911 
CARD8
 
	mªqTy≥
;

1912 
BYTE
 
	m∑d
;

1913 
CARD16
 
Àngth
 
	mB16
;

1914 
CARD16
 
nbyãs
 
	mB16
;

1915 
BYTE
 
	m∑d1
, 
	m∑d2
;

1916 } 
	txQuîyExãnsi⁄Req
;

1919 
CARD8
 
	mªqTy≥
;

1920 
CARD8
 
	mnumKeyPîModifõr
;

1921 
CARD16
 
Àngth
 
	mB16
;

1922 } 
	txSëModifõrM≠pögReq
;

1925 
CARD8
 
	mªqTy≥
;

1926 
CARD8
 
	mnE…s
;

1927 
CARD16
 
Àngth
 
	mB16
;

1928 } 
	txSëPoöãrM≠pögReq
;

1931 
CARD8
 
	mªqTy≥
;

1932 
BYTE
 
	m∑d
;

1933 
CARD16
 
Àngth
 
	mB16
;

1934 
KeyCode
 
	mfú°KeyCode
;

1935 
CARD8
 
	mcou¡
;

1936 
CARD16
 
∑d1
 
	mB16
;

1937 } 
	txGëKeybﬂrdM≠pögReq
;

1940 
CARD8
 
	mªqTy≥
;

1941 
CARD8
 
	mkeyCodes
;

1942 
CARD16
 
Àngth
 
	mB16
;

1943 
KeyCode
 
	mfú°KeyCode
;

1944 
CARD8
 
	mkeySymsPîKeyCode
;

1945 
CARD16
 
∑d1
 
	mB16
;

1946 } 
	txCh™geKeybﬂrdM≠pögReq
;

1949 
CARD8
 
	mªqTy≥
;

1950 
BYTE
 
	m∑d
;

1951 
CARD16
 
Àngth
 
	mB16
;

1952 
CARD32
 
mask
 
	mB32
;

1953 } 
	txCh™geKeybﬂrdC⁄åﬁReq
;

1956 
CARD8
 
	mªqTy≥
;

1957 
INT8
 
	m≥r˚¡
;

1958 
CARD16
 
Àngth
 
	mB16
;

1959 } 
	txBñlReq
;

1962 
CARD8
 
	mªqTy≥
;

1963 
BYTE
 
	m∑d
;

1964 
CARD16
 
Àngth
 
	mB16
;

1965 
INT16
 
ac˚lNum
 
	mB16
, 
ac˚lDíum
 B16;

1966 
INT16
 
thªshﬁd
 
	mB16
;

1967 
BOOL
 
	mdoAc˚l
, 
	mdoThªsh
;

1968 } 
	txCh™gePoöãrC⁄åﬁReq
;

1971 
CARD8
 
	mªqTy≥
;

1972 
BYTE
 
	m∑d
;

1973 
CARD16
 
Àngth
 
	mB16
;

1974 
INT16
 
timeout
 
	mB16
, 
öãrvÆ
 B16;

1975 
BYTE
 
	m¥e„rBœnk
, 
	mÆlowExpo£
;

1976 
CARD16
 
∑d2
 
	mB16
;

1977 } 
	txSëS¸ìnSavîReq
;

1980 
CARD8
 
	mªqTy≥
;

1981 
BYTE
 
	mmode
;

1982 
CARD16
 
Àngth
 
	mB16
;

1983 
CARD8
 
	mho°Famûy
;

1984 
BYTE
 
	m∑d
;

1985 
CARD16
 
ho°Lígth
 
	mB16
;

1986 } 
	txCh™geHo°sReq
;

1989 
CARD8
 
	mªqTy≥
;

1990 
BYTE
 
	m∑d
;

1991 
CARD16
 
Àngth
 
	mB16
;

1992 } 
	txLi°Ho°sReq
;

1995 
CARD8
 
	mªqTy≥
;

1996 
BYTE
 
	mmode
;

1997 
CARD16
 
Àngth
 
	mB16
;

1998 } 
	txCh™geModeReq
;

2000 
xCh™geModeReq
 
	txSëAc˚ssC⁄åﬁReq
;

2001 
xCh™geModeReq
 
	txSëClo£DownModeReq
;

2002 
xCh™geModeReq
 
	txF‹˚S¸ìnSavîReq
;

2005 
CARD8
 
	mªqTy≥
;

2006 
BYTE
 
	m∑d
;

2007 
CARD16
 
Àngth
 
	mB16
;

2008 
Wödow
 
wödow
 
	mB32
;

2009 
CARD16
 
nAtoms
 
	mB16
;

2010 
INT16
 
nPosôi⁄s
 
	mB16
;

2011 } 
	txRŸ©ePr›îtõsReq
;

2017 
	#X_Rïly
 1

	)

2018 
	#X_Eº‹
 0

	)

2022 
	#X_Cª©eWödow
 1

	)

2023 
	#X_Ch™geWödowAâribuãs
 2

	)

2024 
	#X_GëWödowAâribuãs
 3

	)

2025 
	#X_De°royWödow
 4

	)

2026 
	#X_De°roySubwödows
 5

	)

2027 
	#X_Ch™geSaveSë
 6

	)

2028 
	#X_Rï¨ítWödow
 7

	)

2029 
	#X_M≠Wödow
 8

	)

2030 
	#X_M≠Subwödows
 9

	)

2031 
	#X_Unm≠Wödow
 10

	)

2032 
	#X_Unm≠Subwödows
 11

	)

2033 
	#X_C⁄figuªWödow
 12

	)

2034 
	#X_CúcuœãWödow
 13

	)

2035 
	#X_GëGeomëry
 14

	)

2036 
	#X_QuîyTªe
 15

	)

2037 
	#X_I¡înAtom
 16

	)

2038 
	#X_GëAtomName
 17

	)

2039 
	#X_Ch™gePr›îty
 18

	)

2040 
	#X_DñëePr›îty
 19

	)

2041 
	#X_GëPr›îty
 20

	)

2042 
	#X_Li°Pr›îtõs
 21

	)

2043 
	#X_SëSñe˘i⁄Ow√r
 22

	)

2044 
	#X_GëSñe˘i⁄Ow√r
 23

	)

2045 
	#X_C⁄vîtSñe˘i⁄
 24

	)

2046 
	#X_SídEvít
 25

	)

2047 
	#X_GøbPoöãr
 26

	)

2048 
	#X_UngøbPoöãr
 27

	)

2049 
	#X_GøbBuâ⁄
 28

	)

2050 
	#X_UngøbBuâ⁄
 29

	)

2051 
	#X_Ch™geA˘ivePoöãrGøb
 30

	)

2052 
	#X_GøbKeybﬂrd
 31

	)

2053 
	#X_UngøbKeybﬂrd
 32

	)

2054 
	#X_GøbKey
 33

	)

2055 
	#X_UngøbKey
 34

	)

2056 
	#X_AŒowEvíts
 35

	)

2057 
	#X_GøbSîvî
 36

	)

2058 
	#X_UngøbSîvî
 37

	)

2059 
	#X_QuîyPoöãr
 38

	)

2060 
	#X_GëMŸi⁄Evíts
 39

	)

2061 
	#X_Tøn¶©eCo‹ds
 40

	)

2062 
	#X_W¨pPoöãr
 41

	)

2063 
	#X_SëI≈utFocus
 42

	)

2064 
	#X_GëI≈utFocus
 43

	)

2065 
	#X_QuîyKeym≠
 44

	)

2066 
	#X_O≥nF⁄t
 45

	)

2067 
	#X_Clo£F⁄t
 46

	)

2068 
	#X_QuîyF⁄t
 47

	)

2069 
	#X_QuîyTextExã¡s
 48

	)

2070 
	#X_Li°F⁄ts
 49

	)

2071 
	#X_Li°F⁄tsWôhInfo
 50

	)

2072 
	#X_SëF⁄tP©h
 51

	)

2073 
	#X_GëF⁄tP©h
 52

	)

2074 
	#X_Cª©ePixm≠
 53

	)

2075 
	#X_FªePixm≠
 54

	)

2076 
	#X_Cª©eGC
 55

	)

2077 
	#X_Ch™geGC
 56

	)

2078 
	#X_C›yGC
 57

	)

2079 
	#X_SëDashes
 58

	)

2080 
	#X_SëClùRe˘™gÀs
 59

	)

2081 
	#X_FªeGC
 60

	)

2082 
	#X_CÀ¨Aªa
 61

	)

2083 
	#X_C›yAªa
 62

	)

2084 
	#X_C›yPœ√
 63

	)

2085 
	#X_PﬁyPoöt
 64

	)

2086 
	#X_PﬁyLöe
 65

	)

2087 
	#X_PﬁySegmít
 66

	)

2088 
	#X_PﬁyRe˘™gÀ
 67

	)

2089 
	#X_PﬁyArc
 68

	)

2090 
	#X_FûlPﬁy
 69

	)

2091 
	#X_PﬁyFûlRe˘™gÀ
 70

	)

2092 
	#X_PﬁyFûlArc
 71

	)

2093 
	#X_PutImage
 72

	)

2094 
	#X_GëImage
 73

	)

2095 
	#X_PﬁyText8
 74

	)

2096 
	#X_PﬁyText16
 75

	)

2097 
	#X_ImageText8
 76

	)

2098 
	#X_ImageText16
 77

	)

2099 
	#X_Cª©eCﬁ‹m≠
 78

	)

2100 
	#X_FªeCﬁ‹m≠
 79

	)

2101 
	#X_C›yCﬁ‹m≠AndFªe
 80

	)

2102 
	#X_In°ÆlCﬁ‹m≠
 81

	)

2103 
	#X_Unö°ÆlCﬁ‹m≠
 82

	)

2104 
	#X_Li°In°ÆÀdCﬁ‹m≠s
 83

	)

2105 
	#X_AŒocCﬁ‹
 84

	)

2106 
	#X_AŒocNamedCﬁ‹
 85

	)

2107 
	#X_AŒocCﬁ‹Cñls
 86

	)

2108 
	#X_AŒocCﬁ‹Pœ√s
 87

	)

2109 
	#X_FªeCﬁ‹s
 88

	)

2110 
	#X_St‹eCﬁ‹s
 89

	)

2111 
	#X_St‹eNamedCﬁ‹
 90

	)

2112 
	#X_QuîyCﬁ‹s
 91

	)

2113 
	#X_LookupCﬁ‹
 92

	)

2114 
	#X_Cª©eCurs‹
 93

	)

2115 
	#X_Cª©eGlyphCurs‹
 94

	)

2116 
	#X_FªeCurs‹
 95

	)

2117 
	#X_Recﬁ‹Curs‹
 96

	)

2118 
	#X_QuîyBe°Size
 97

	)

2119 
	#X_QuîyExãnsi⁄
 98

	)

2120 
	#X_Li°Exãnsi⁄s
 99

	)

2121 
	#X_Ch™geKeybﬂrdM≠pög
 100

	)

2122 
	#X_GëKeybﬂrdM≠pög
 101

	)

2123 
	#X_Ch™geKeybﬂrdC⁄åﬁ
 102

	)

2124 
	#X_GëKeybﬂrdC⁄åﬁ
 103

	)

2125 
	#X_Bñl
 104

	)

2126 
	#X_Ch™gePoöãrC⁄åﬁ
 105

	)

2127 
	#X_GëPoöãrC⁄åﬁ
 106

	)

2128 
	#X_SëS¸ìnSavî
 107

	)

2129 
	#X_GëS¸ìnSavî
 108

	)

2130 
	#X_Ch™geHo°s
 109

	)

2131 
	#X_Li°Ho°s
 110

	)

2132 
	#X_SëAc˚ssC⁄åﬁ
 111

	)

2133 
	#X_SëClo£DownMode
 112

	)

2134 
	#X_KûlClõ¡
 113

	)

2135 
	#X_RŸ©ePr›îtõs
 114

	)

2136 
	#X_F‹˚S¸ìnSavî
 115

	)

2137 
	#X_SëPoöãrM≠pög
 116

	)

2138 
	#X_GëPoöãrM≠pög
 117

	)

2139 
	#X_SëModifõrM≠pög
 118

	)

2140 
	#X_GëModifõrM≠pög
 119

	)

2141 
	#X_NoO≥øti⁄
 127

	)

2144 #unde‡
Wödow


2145 #unde‡
DøwabÀ


2146 #unde‡
F⁄t


2147 #unde‡
Pixm≠


2148 #unde‡
Curs‹


2149 #unde‡
Cﬁ‹m≠


2150 #unde‡
GC⁄ãxt


2151 #unde‡
Atom


2152 #unde‡
VisuÆID


2153 #unde‡
Time


2154 #unde‡
KeyCode


2155 #unde‡
KeySym


	@/usr/include/X11/Xutil.h

49 #i‚de‡
_X11_XUTIL_H_


50 
	#_X11_XUTIL_H_


	)

53 
	~<X11/Xlib.h
>

54 
	~<X11/keysym.h
>

60 
	#NoVÆue
 0x0000

	)

61 
	#XVÆue
 0x0001

	)

62 
	#YVÆue
 0x0002

	)

63 
	#WidthVÆue
 0x0004

	)

64 
	#HeightVÆue
 0x0008

	)

65 
	#AŒVÆues
 0x000F

	)

66 
	#XNeg©ive
 0x0010

	)

67 
	#YNeg©ive
 0x0020

	)

74 
	mÊags
;

75 
	mx
, 
	my
;

76 
	mwidth
, 
	mheight
;

77 
	mmö_width
, 
	mmö_height
;

78 
	mmax_width
, 
	mmax_height
;

79 
	mwidth_öc
, 
	mheight_öc
;

81 
	mx
;

82 
	my
;

83 } 
	mmö_a•e˘
, 
	mmax_a•e˘
;

84 
	mba£_width
, 
	mba£_height
;

85 
	mwö_gøvôy
;

86 } 
	tXSizeHöts
;

94 
	#USPosôi⁄
 (1L << 0Ë

	)

95 
	#USSize
 (1L << 1Ë

	)

97 
	#PPosôi⁄
 (1L << 2Ë

	)

98 
	#PSize
 (1L << 3Ë

	)

99 
	#PMöSize
 (1L << 4Ë

	)

100 
	#PMaxSize
 (1L << 5Ë

	)

101 
	#PResizeInc
 (1L << 6Ë

	)

102 
	#PA•e˘
 (1L << 7Ë

	)

103 
	#PBa£Size
 (1L << 8Ë

	)

104 
	#PWöGøvôy
 (1L << 9Ë

	)

107 
	#PAŒHöts
 (
PPosôi⁄
|
PSize
|
PMöSize
|
PMaxSize
|
PResizeInc
|
PA•e˘
)

	)

112 
	mÊags
;

113 
Boﬁ
 
	möput
;

115 
	möôül_°©e
;

116 
Pixm≠
 
	mic⁄_pixm≠
;

117 
Wödow
 
	mic⁄_wödow
;

118 
	mic⁄_x
, 
	mic⁄_y
;

119 
Pixm≠
 
	mic⁄_mask
;

120 
XID
 
	mwödow_group
;

122 } 
	tXWMHöts
;

126 
	#I≈utHöt
 (1L << 0)

	)

127 
	#SèãHöt
 (1L << 1)

	)

128 
	#Ic⁄Pixm≠Höt
 (1L << 2)

	)

129 
	#Ic⁄WödowHöt
 (1L << 3)

	)

130 
	#Ic⁄Posôi⁄Höt
 (1L << 4)

	)

131 
	#Ic⁄MaskHöt
 (1L << 5)

	)

132 
	#WödowGroupHöt
 (1L << 6)

	)

133 
	#AŒHöts
 (
I≈utHöt
|
SèãHöt
|
Ic⁄Pixm≠Höt
|
Ic⁄WödowHöt
| \

134 
Ic⁄Posôi⁄Höt
|
Ic⁄MaskHöt
|
WödowGroupHöt
)

	)

135 
	#XUrgícyHöt
 (1L << 8)

	)

138 
	#WôhdøwnSèã
 0

	)

139 
	#N‹mÆSèã
 1

	)

140 
	#Ic⁄icSèã
 3

	)

145 
	#D⁄tC¨eSèã
 0

	)

146 
	#ZoomSèã
 2

	)

147 
	#I«˘iveSèã
 4

	)

156 *
	mvÆue
;

157 
Atom
 
	mícodög
;

158 
	mf‹m©
;

159 
	mnôems
;

160 } 
	tXTextPr›îty
;

162 
	#XNoMem‹y
 -1

	)

163 
	#XLoˇÀNŸSuµ‹ãd
 -2

	)

164 
	#XC⁄vîãrNŸFound
 -3

	)

167 
	mXSåögStyÀ
,

168 
	mXCompoundTextStyÀ
,

169 
	mXTextStyÀ
,

170 
	mXStdICCTextStyÀ
,

172 
	mXUTF8SåögStyÀ


173 } 
	tXICCEncodögStyÀ
;

176 
	mmö_width
, 
	mmö_height
;

177 
	mmax_width
, 
	mmax_height
;

178 
	mwidth_öc
, 
	mheight_öc
;

179 } 
	tXIc⁄Size
;

182 *
	mªs_«me
;

183 *
	mªs_˛ass
;

184 } 
	tXCœssHöt
;

186 #ifde‡
XUTIL_DEFINE_FUNCTIONS


187 
XDe°royImage
(

188 
XImage
 *
ximage
);

189 
XGëPixñ
(

190 
XImage
 *
ximage
,

191 
x
, 
y
);

192 
XPutPixñ
(

193 
XImage
 *
ximage
,

194 
x
, 
y
,

195 
pixñ
);

196 
XImage
 *
XSubImage
(

197 
XImage
 *
ximage
,

198 
x
, 
y
,

199 
width
, 
height
);

200 
XAddPixñ
(

201 
XImage
 *
ximage
,

202 
vÆue
);

208 
	#XDe°royImage
(
ximage
) \

209 ((*((
ximage
)->
f
.
de°roy_image
))((ximage)))

	)

210 
	#XGëPixñ
(
ximage
, 
x
, 
y
) \

211 ((*((
ximage
)->
f
.
gë_pixñ
))((ximage), (
x
), (
y
)))

	)

212 
	#XPutPixñ
(
ximage
, 
x
, 
y
, 
pixñ
) \

213 ((*((
ximage
)->
f
.
put_pixñ
))((ximage), (
x
), (
y
), (
pixñ
)))

	)

214 
	#XSubImage
(
ximage
, 
x
, 
y
, 
width
, 
height
) \

215 ((*((
ximage
)->
f
.
sub_image
))((ximage), (
x
), (
y
), (
width
), (
height
)))

	)

216 
	#XAddPixñ
(
ximage
, 
vÆue
) \

217 ((*((
ximage
)->
f
.
add_pixñ
))((ximage), (
vÆue
)))

	)

223 
	s_XCompo£Sètus
 {

224 
XPoöãr
 
	mcompo£_±r
;

225 
	mch¨s_m©ched
;

226 } 
	tXCompo£Sètus
;

231 
	#IsKey∑dKey
(
keysym
) \

232 (((
KeySym
)(
keysym
Ë>
XK_KP_S∑˚
Ë&& ((KeySym)(keysymË<
XK_KP_EquÆ
))

	)

234 
	#IsPriv©eKey∑dKey
(
keysym
) \

235 (((
KeySym
)(
keysym
Ë>0x11000000Ë&& ((KeySym)(keysymË<0x1100FFFF))

	)

237 
	#IsCurs‹Key
(
keysym
) \

238 (((
KeySym
)(
keysym
Ë>
XK_Home
Ë&& ((KeySym)(keysymË< 
XK_Sñe˘
))

	)

240 
	#IsPFKey
(
keysym
) \

241 (((
KeySym
)(
keysym
Ë>
XK_KP_F1
Ë&& ((KeySym)(keysymË<
XK_KP_F4
))

	)

243 
	#IsFun˘i⁄Key
(
keysym
) \

244 (((
KeySym
)(
keysym
Ë>
XK_F1
Ë&& ((KeySym)(keysymË<
XK_F35
))

	)

246 
	#IsMiscFun˘i⁄Key
(
keysym
) \

247 (((
KeySym
)(
keysym
Ë>
XK_Sñe˘
Ë&& ((KeySym)(keysymË<
XK_Bªak
))

	)

249 #ifde‡
XK_XKB_KEYS


250 
	#IsModifõrKey
(
keysym
) \

251 ((((
KeySym
)(
keysym
Ë>
XK_Shi·_L
Ë&& ((KeySym)(keysymË<
XK_Hy≥r_R
)) \

252 || (((
KeySym
)(
keysym
Ë>
XK_ISO_Lock
) && \

253 ((
KeySym
)(
keysym
Ë<
XK_ISO_La°_Group_Lock
)) \

254 || ((
KeySym
)(
keysym
Ë=
XK_Mode_swôch
) \

255 || ((
KeySym
)(
keysym
Ë=
XK_Num_Lock
))

	)

257 
	#IsModifõrKey
(
keysym
) \

258 ((((
KeySym
)(
keysym
Ë>
XK_Shi·_L
Ë&& ((KeySym)(keysymË<
XK_Hy≥r_R
)) \

259 || ((
KeySym
)(
keysym
Ë=
XK_Mode_swôch
) \

260 || ((
KeySym
)(
keysym
Ë=
XK_Num_Lock
))

	)

265 
_XRegi⁄
 *
	tRegi⁄
;

269 
	#Re˘™gÀOut
 0

	)

270 
	#Re˘™gÀIn
 1

	)

271 
	#Re˘™gÀP¨t
 2

	)

280 
VisuÆ
 *
	mvisuÆ
;

281 
VisuÆID
 
	mvisuÆid
;

282 
	ms¸ìn
;

283 
	mdïth
;

284 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

285 
	mc_˛ass
;

287 
	m˛ass
;

289 
	mªd_mask
;

290 
	mgªí_mask
;

291 
	mblue_mask
;

292 
	mcﬁ‹m≠_size
;

293 
	mbôs_≥r_rgb
;

294 } 
	tXVisuÆInfo
;

296 
	#VisuÆNoMask
 0x0

	)

297 
	#VisuÆIDMask
 0x1

	)

298 
	#VisuÆS¸ìnMask
 0x2

	)

299 
	#VisuÆDïthMask
 0x4

	)

300 
	#VisuÆCœssMask
 0x8

	)

301 
	#VisuÆRedMaskMask
 0x10

	)

302 
	#VisuÆGªíMaskMask
 0x20

	)

303 
	#VisuÆBlueMaskMask
 0x40

	)

304 
	#VisuÆCﬁ‹m≠SizeMask
 0x80

	)

305 
	#VisuÆBôsPîRGBMask
 0x100

	)

306 
	#VisuÆAŒMask
 0x1FF

	)

313 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

314 
	mªd_max
;

315 
	mªd_mu…
;

316 
	mgªí_max
;

317 
	mgªí_mu…
;

318 
	mblue_max
;

319 
	mblue_mu…
;

320 
	mba£_pixñ
;

321 
VisuÆID
 
	mvisuÆid
;

322 
XID
 
	mkûlid
;

323 } 
	tXSènd¨dCﬁ‹m≠
;

325 
	#Rñó£ByFªeögCﬁ‹m≠
 ((
XID
Ë1LË

	)

331 
	#Bôm≠Suc˚ss
 0

	)

332 
	#Bôm≠O≥nFaûed
 1

	)

333 
	#Bôm≠FûeInvÆid
 2

	)

334 
	#Bôm≠NoMem‹y
 3

	)

345 
	#XCSUCCESS
 0

	)

346 
	#XCNOMEM
 1

	)

347 
	#XCNOENT
 2

	)

349 
	tXC⁄ãxt
;

351 
	#XUniqueC⁄ãxt
(Ë((
XC⁄ãxt
Ë
	`XrmUniqueQu¨k
())

	)

352 
	#XSåögToC⁄ãxt
(
°rög
Ë((
XC⁄ãxt
Ë
	`XrmSåögToQu¨k
(°rög))

	)

354 
_XFUNCPROTOBEGIN


358 
XCœssHöt
 *
XAŒocCœssHöt
 (

362 
XIc⁄Size
 *
XAŒocIc⁄Size
 (

366 
XSizeHöts
 *
XAŒocSizeHöts
 (

370 
XSènd¨dCﬁ‹m≠
 *
XAŒocSènd¨dCﬁ‹m≠
 (

374 
XWMHöts
 *
XAŒocWMHöts
 (

378 
XClùBox
(

379 
Regi⁄
 ,

380 
XRe˘™gÀ
*

383 
Regi⁄
 
XCª©eRegi⁄
(

387 c⁄° *
XDeÁu…Såög
 ();

389 
XDñëeC⁄ãxt
(

390 
Di•œy
* ,

391 
XID
 ,

392 
XC⁄ãxt


395 
XDe°royRegi⁄
(

396 
Regi⁄


399 
XEm±yRegi⁄
(

400 
Regi⁄


403 
XEquÆRegi⁄
(

404 
Regi⁄
 ,

405 
Regi⁄


408 
XFödC⁄ãxt
(

409 
Di•œy
* ,

410 
XID
 ,

411 
XC⁄ãxt
 ,

412 
XPoöãr
*

415 
Sètus
 
XGëCœssHöt
(

416 
Di•œy
* ,

417 
Wödow
 ,

418 
XCœssHöt
*

421 
Sètus
 
XGëIc⁄Sizes
(

422 
Di•œy
* ,

423 
Wödow
 ,

424 
XIc⁄Size
** ,

428 
Sètus
 
XGëN‹mÆHöts
(

429 
Di•œy
* ,

430 
Wödow
 ,

431 
XSizeHöts
*

434 
Sètus
 
XGëRGBCﬁ‹m≠s
(

435 
Di•œy
* ,

436 
Wödow
 ,

437 
XSènd¨dCﬁ‹m≠
** ,

439 
Atom


442 
Sètus
 
XGëSizeHöts
(

443 
Di•œy
* ,

444 
Wödow
 ,

445 
XSizeHöts
* ,

446 
Atom


449 
Sètus
 
XGëSènd¨dCﬁ‹m≠
(

450 
Di•œy
* ,

451 
Wödow
 ,

452 
XSènd¨dCﬁ‹m≠
* ,

453 
Atom


456 
Sètus
 
XGëTextPr›îty
(

457 
Di•œy
* ,

458 
Wödow
 ,

459 
XTextPr›îty
* ,

460 
Atom


463 
XVisuÆInfo
 *
XGëVisuÆInfo
(

464 
Di•œy
* ,

466 
XVisuÆInfo
* ,

470 
Sètus
 
XGëWMClõ¡Machöe
(

471 
Di•œy
* ,

472 
Wödow
 ,

473 
XTextPr›îty
*

476 
XWMHöts
 *
XGëWMHöts
(

477 
Di•œy
* ,

478 
Wödow


481 
Sètus
 
XGëWMIc⁄Name
(

482 
Di•œy
* ,

483 
Wödow
 ,

484 
XTextPr›îty
*

487 
Sètus
 
XGëWMName
(

488 
Di•œy
* ,

489 
Wödow
 ,

490 
XTextPr›îty
*

493 
Sètus
 
XGëWMN‹mÆHöts
(

494 
Di•œy
* ,

495 
Wödow
 ,

496 
XSizeHöts
* ,

500 
Sètus
 
XGëWMSizeHöts
(

501 
Di•œy
* ,

502 
Wödow
 ,

503 
XSizeHöts
* ,

505 
Atom


508 
Sètus
 
XGëZoomHöts
(

509 
Di•œy
* ,

510 
Wödow
 ,

511 
XSizeHöts
*

514 
XI¡î£˘Regi⁄
(

515 
Regi⁄
 ,

516 
Regi⁄
 ,

517 
Regi⁄


520 
XC⁄vîtCa£
(

521 
KeySym
 ,

522 
KeySym
* ,

523 
KeySym
*

526 
XLookupSåög
(

527 
XKeyEvít
* ,

530 
KeySym
* ,

531 
XCompo£Sètus
*

534 
Sètus
 
XM©chVisuÆInfo
(

535 
Di•œy
* ,

539 
XVisuÆInfo
*

542 
XOff£tRegi⁄
(

543 
Regi⁄
 ,

548 
Boﬁ
 
XPoötInRegi⁄
(

549 
Regi⁄
 ,

554 
Regi⁄
 
XPﬁyg⁄Regi⁄
(

555 
XPoöt
* ,

560 
XRe˘InRegi⁄
(

561 
Regi⁄
 ,

568 
XSaveC⁄ãxt
(

569 
Di•œy
* ,

570 
XID
 ,

571 
XC⁄ãxt
 ,

572 
_Xc⁄°
 *

575 
XSëCœssHöt
(

576 
Di•œy
* ,

577 
Wödow
 ,

578 
XCœssHöt
*

581 
XSëIc⁄Sizes
(

582 
Di•œy
* ,

583 
Wödow
 ,

584 
XIc⁄Size
* ,

588 
XSëN‹mÆHöts
(

589 
Di•œy
* ,

590 
Wödow
 ,

591 
XSizeHöts
*

594 
XSëRGBCﬁ‹m≠s
(

595 
Di•œy
* ,

596 
Wödow
 ,

597 
XSènd¨dCﬁ‹m≠
* ,

599 
Atom


602 
XSëSizeHöts
(

603 
Di•œy
* ,

604 
Wödow
 ,

605 
XSizeHöts
* ,

606 
Atom


609 
XSëSènd¨dPr›îtõs
(

610 
Di•œy
* ,

611 
Wödow
 ,

612 
_Xc⁄°
 * ,

613 
_Xc⁄°
 * ,

614 
Pixm≠
 ,

617 
XSizeHöts
*

620 
XSëTextPr›îty
(

621 
Di•œy
* ,

622 
Wödow
 ,

623 
XTextPr›îty
* ,

624 
Atom


627 
XSëWMClõ¡Machöe
(

628 
Di•œy
* ,

629 
Wödow
 ,

630 
XTextPr›îty
*

633 
XSëWMHöts
(

634 
Di•œy
* ,

635 
Wödow
 ,

636 
XWMHöts
*

639 
XSëWMIc⁄Name
(

640 
Di•œy
* ,

641 
Wödow
 ,

642 
XTextPr›îty
*

645 
XSëWMName
(

646 
Di•œy
* ,

647 
Wödow
 ,

648 
XTextPr›îty
*

651 
XSëWMN‹mÆHöts
(

652 
Di•œy
* ,

653 
Wödow
 ,

654 
XSizeHöts
*

657 
XSëWMPr›îtõs
(

658 
Di•œy
* ,

659 
Wödow
 ,

660 
XTextPr›îty
* ,

661 
XTextPr›îty
* ,

664 
XSizeHöts
* ,

665 
XWMHöts
* ,

666 
XCœssHöt
*

669 
XmbSëWMPr›îtõs
(

670 
Di•œy
* ,

671 
Wödow
 ,

672 
_Xc⁄°
 * ,

673 
_Xc⁄°
 * ,

676 
XSizeHöts
* ,

677 
XWMHöts
* ,

678 
XCœssHöt
*

681 
Xutf8SëWMPr›îtõs
(

682 
Di•œy
* ,

683 
Wödow
 ,

684 
_Xc⁄°
 * ,

685 
_Xc⁄°
 * ,

688 
XSizeHöts
* ,

689 
XWMHöts
* ,

690 
XCœssHöt
*

693 
XSëWMSizeHöts
(

694 
Di•œy
* ,

695 
Wödow
 ,

696 
XSizeHöts
* ,

697 
Atom


700 
XSëRegi⁄
(

701 
Di•œy
* ,

702 
GC
 ,

703 
Regi⁄


706 
XSëSènd¨dCﬁ‹m≠
(

707 
Di•œy
* ,

708 
Wödow
 ,

709 
XSènd¨dCﬁ‹m≠
* ,

710 
Atom


713 
XSëZoomHöts
(

714 
Di•œy
* ,

715 
Wödow
 ,

716 
XSizeHöts
*

719 
XShrökRegi⁄
(

720 
Regi⁄
 ,

725 
Sètus
 
XSåögLi°ToTextPr›îty
(

728 
XTextPr›îty
*

731 
XSubåa˘Regi⁄
(

732 
Regi⁄
 ,

733 
Regi⁄
 ,

734 
Regi⁄


737 
XmbTextLi°ToTextPr›îty
(

738 
Di•œy
* 
di•œy
,

739 ** 
li°
,

740 
cou¡
,

741 
XICCEncodögStyÀ
 
°yÀ
,

742 
XTextPr›îty
* 
ãxt_¥›_ªtu∫


745 
XwcTextLi°ToTextPr›îty
(

746 
Di•œy
* 
di•œy
,

747 
wch¨_t
** 
li°
,

748 
cou¡
,

749 
XICCEncodögStyÀ
 
°yÀ
,

750 
XTextPr›îty
* 
ãxt_¥›_ªtu∫


753 
Xutf8TextLi°ToTextPr›îty
(

754 
Di•œy
* 
di•œy
,

755 ** 
li°
,

756 
cou¡
,

757 
XICCEncodögStyÀ
 
°yÀ
,

758 
XTextPr›îty
* 
ãxt_¥›_ªtu∫


761 
XwcFªeSåögLi°
(

762 
wch¨_t
** 
li°


765 
Sètus
 
XTextPr›îtyToSåögLi°
(

766 
XTextPr›îty
* ,

771 
XmbTextPr›îtyToTextLi°
(

772 
Di•œy
* 
di•œy
,

773 c⁄° 
XTextPr›îty
* 
ãxt_¥›
,

774 *** 
li°_ªtu∫
,

775 * 
cou¡_ªtu∫


778 
XwcTextPr›îtyToTextLi°
(

779 
Di•œy
* 
di•œy
,

780 c⁄° 
XTextPr›îty
* 
ãxt_¥›
,

781 
wch¨_t
*** 
li°_ªtu∫
,

782 * 
cou¡_ªtu∫


785 
Xutf8TextPr›îtyToTextLi°
(

786 
Di•œy
* 
di•œy
,

787 c⁄° 
XTextPr›îty
* 
ãxt_¥›
,

788 *** 
li°_ªtu∫
,

789 * 
cou¡_ªtu∫


792 
XUni⁄Re˘WôhRegi⁄
(

793 
XRe˘™gÀ
* ,

794 
Regi⁄
 ,

795 
Regi⁄


798 
XUni⁄Regi⁄
(

799 
Regi⁄
 ,

800 
Regi⁄
 ,

801 
Regi⁄


804 
XWMGeomëry
(

805 
Di•œy
* ,

807 
_Xc⁄°
 * ,

808 
_Xc⁄°
 * ,

810 
XSizeHöts
* ,

818 
XX‹Regi⁄
(

819 
Regi⁄
 ,

820 
Regi⁄
 ,

821 
Regi⁄


824 
	g_XFUNCPROTOEND


	@/usr/include/X11/cursorfont.h

29 #i‚de‡
_X11_CURSORFONT_H_


30 
	#_X11_CURSORFONT_H_


	)

32 
	#XC_num_glyphs
 154

	)

33 
	#XC_X_curs‹
 0

	)

34 
	#XC_¨row
 2

	)

35 
	#XC_ba£d_¨row_down
 4

	)

36 
	#XC_ba£d_¨row_up
 6

	)

37 
	#XC_bﬂt
 8

	)

38 
	#XC_bogosôy
 10

	)

39 
	#XC_bŸtom_À·_c‹√r
 12

	)

40 
	#XC_bŸtom_right_c‹√r
 14

	)

41 
	#XC_bŸtom_side
 16

	)

42 
	#XC_bŸtom_ãe
 18

	)

43 
	#XC_box_•úÆ
 20

	)

44 
	#XC_˚¡î_±r
 22

	)

45 
	#XC_cú˛e
 24

	)

46 
	#XC_˛ock
 26

	)

47 
	#XC_cof„e_mug
 28

	)

48 
	#XC_¸oss
 30

	)

49 
	#XC_¸oss_ªvî£
 32

	)

50 
	#XC_¸osshaú
 34

	)

51 
	#XC_düm⁄d_¸oss
 36

	)

52 
	#XC_dŸ
 38

	)

53 
	#XC_dŸbox
 40

	)

54 
	#XC_doubÀ_¨row
 42

	)

55 
	#XC_dø·_œrge
 44

	)

56 
	#XC_dø·_smÆl
 46

	)

57 
	#XC_dø≥d_box
 48

	)

58 
	#XC_exch™ge
 50

	)

59 
	#XC_Êeur
 52

	)

60 
	#XC_gobbÀr
 54

	)

61 
	#XC_gumby
 56

	)

62 
	#XC_h™d1
 58

	)

63 
	#XC_h™d2
 60

	)

64 
	#XC_hóπ
 62

	)

65 
	#XC_ic⁄
 64

	)

66 
	#XC_ú⁄_¸oss
 66

	)

67 
	#XC_À·_±r
 68

	)

68 
	#XC_À·_side
 70

	)

69 
	#XC_À·_ãe
 72

	)

70 
	#XC_À·buâ⁄
 74

	)

71 
	#XC_Œ_™gÀ
 76

	)

72 
	#XC_Ã_™gÀ
 78

	)

73 
	#XC_m™
 80

	)

74 
	#XC_middÀbuâ⁄
 82

	)

75 
	#XC_mou£
 84

	)

76 
	#XC_≥ncû
 86

	)

77 
	#XC_pú©e
 88

	)

78 
	#XC_∂us
 90

	)

79 
	#XC_que°i⁄_¨row
 92

	)

80 
	#XC_right_±r
 94

	)

81 
	#XC_right_side
 96

	)

82 
	#XC_right_ãe
 98

	)

83 
	#XC_rightbuâ⁄
 100

	)

84 
	#XC_πl_logo
 102

	)

85 
	#XC_ßûbﬂt
 104

	)

86 
	#XC_sb_down_¨row
 106

	)

87 
	#XC_sb_h_doubÀ_¨row
 108

	)

88 
	#XC_sb_À·_¨row
 110

	)

89 
	#XC_sb_right_¨row
 112

	)

90 
	#XC_sb_up_¨row
 114

	)

91 
	#XC_sb_v_doubÀ_¨row
 116

	)

92 
	#XC_shuâÀ
 118

	)

93 
	#XC_sizög
 120

	)

94 
	#XC_•idî
 122

	)

95 
	#XC_•øyˇn
 124

	)

96 
	#XC_°¨
 126

	)

97 
	#XC_èrgë
 128

	)

98 
	#XC_t¸oss
 130

	)

99 
	#XC_t›_À·_¨row
 132

	)

100 
	#XC_t›_À·_c‹√r
 134

	)

101 
	#XC_t›_right_c‹√r
 136

	)

102 
	#XC_t›_side
 138

	)

103 
	#XC_t›_ãe
 140

	)

104 
	#XC_åek
 142

	)

105 
	#XC_ul_™gÀ
 144

	)

106 
	#XC_umbªŒa
 146

	)

107 
	#XC_ur_™gÀ
 148

	)

108 
	#XC_w©ch
 150

	)

109 
	#XC_xãrm
 152

	)

	@/usr/include/X11/extensions/Xinerama.h

27 #i‚de‡
_Xöîama_h


28 
	#_Xöîama_h


	)

30 
	~<X11/Xlib.h
>

33 
	ms¸ìn_numbî
;

34 
	mx_‹g
;

35 
	my_‹g
;

36 
	mwidth
;

37 
	mheight
;

38 } 
	tXöîamaS¸ìnInfo
;

40 
_XFUNCPROTOBEGIN


42 
Boﬁ
 
XöîamaQuîyExãnsi⁄
 (

43 
Di•œy
 *
dpy
,

44 *
evít_ba£
,

45 *
îr‹_ba£


48 
Sètus
 
XöîamaQuîyVîsi⁄
(

49 
Di•œy
 *
dpy
,

50 *
maj‹_vîsi⁄p
,

51 *
mö‹_vîsi⁄p


54 
Boﬁ
 
XöîamaIsA˘ive
(
Di•œy
 *
dpy
);

65 
XöîamaS¸ìnInfo
 *

66 
XöîamaQuîyS¸ìns
(

67 
Di•œy
 *
dpy
,

68 *
numbî


71 
	g_XFUNCPROTOEND


	@/usr/include/X11/keysym.h

49 
	#XK_MISCELLANY


	)

50 
	#XK_XKB_KEYS


	)

51 
	#XK_LATIN1


	)

52 
	#XK_LATIN2


	)

53 
	#XK_LATIN3


	)

54 
	#XK_LATIN4


	)

55 
	#XK_LATIN8


	)

56 
	#XK_LATIN9


	)

57 
	#XK_CAUCASUS


	)

58 
	#XK_GREEK


	)

59 
	#XK_KATAKANA


	)

60 
	#XK_ARABIC


	)

61 
	#XK_CYRILLIC


	)

62 
	#XK_HEBREW


	)

63 
	#XK_THAI


	)

64 
	#XK_KOREAN


	)

65 
	#XK_ARMENIAN


	)

66 
	#XK_GEORGIAN


	)

67 
	#XK_VIETNAMESE


	)

68 
	#XK_CURRENCY


	)

69 
	#XK_MATHEMATICAL


	)

70 
	#XK_BRAILLE


	)

71 
	#XK_SINHALA


	)

73 
	~<X11/keysymdef.h
>

	@/usr/include/X11/keysymdef.h

115 
	#XK_VoidSymbﬁ
 0xfffff‡

	)

117 #ifde‡
XK_MISCELLANY


124 
	#XK_BackS∑˚
 0xff08

	)

125 
	#XK_Tab
 0xff09

	)

126 
	#XK_Löe„ed
 0xff0®

	)

127 
	#XK_CÀ¨
 0xff0b

	)

128 
	#XK_Rëu∫
 0xff0d

	)

129 
	#XK_Pau£
 0xff13

	)

130 
	#XK_S¸ﬁl_Lock
 0xff14

	)

131 
	#XK_Sys_Req
 0xff15

	)

132 
	#XK_Esˇ≥
 0xff1b

	)

133 
	#XK_Dñëe
 0xfff‡

	)

139 
	#XK_Mu…i_key
 0xff20

	)

140 
	#XK_Codeöput
 0xff37

	)

141 
	#XK_SögÀC™did©e
 0xff3c

	)

142 
	#XK_Mu…ùÀC™did©e
 0xff3d

	)

143 
	#XK_PªviousC™did©e
 0xff3e

	)

147 
	#XK_K™ji
 0xff21

	)

148 
	#XK_Muhík™
 0xff22

	)

149 
	#XK_Hík™_Mode
 0xff23

	)

150 
	#XK_Hík™
 0xff23

	)

151 
	#XK_Romaji
 0xff24

	)

152 
	#XK_Húag™a
 0xff25

	)

153 
	#XK_K©ak™a
 0xff26

	)

154 
	#XK_Húag™a_K©ak™a
 0xff27

	)

155 
	#XK_Zíkaku
 0xff28

	)

156 
	#XK_H™kaku
 0xff29

	)

157 
	#XK_Zíkaku_H™kaku
 0xff2®

	)

158 
	#XK_Touroku
 0xff2b

	)

159 
	#XK_Massyo
 0xff2¯

	)

160 
	#XK_K™a_Lock
 0xff2d

	)

161 
	#XK_K™a_Shi·
 0xff2ê

	)

162 
	#XK_Eisu_Shi·
 0xff2‡

	)

163 
	#XK_Eisu_toggÀ
 0xff30

	)

164 
	#XK_K™ji_B™gou
 0xff37

	)

165 
	#XK_Zí_Koho
 0xff3d

	)

166 
	#XK_M´_Koho
 0xff3ê

	)

172 
	#XK_Home
 0xff50

	)

173 
	#XK_Le·
 0xff51

	)

174 
	#XK_Up
 0xff52

	)

175 
	#XK_Right
 0xff53

	)

176 
	#XK_Down
 0xff54

	)

177 
	#XK_Pri‹
 0xff55

	)

178 
	#XK_Page_Up
 0xff55

	)

179 
	#XK_Next
 0xff56

	)

180 
	#XK_Page_Down
 0xff56

	)

181 
	#XK_End
 0xff57

	)

182 
	#XK_Begö
 0xff58

	)

187 
	#XK_Sñe˘
 0xff60

	)

188 
	#XK_Pröt
 0xff61

	)

189 
	#XK_Execuã
 0xff62

	)

190 
	#XK_In£π
 0xff63

	)

191 
	#XK_Undo
 0xff65

	)

192 
	#XK_Redo
 0xff66

	)

193 
	#XK_Míu
 0xff67

	)

194 
	#XK_Föd
 0xff68

	)

195 
	#XK_C™˚l
 0xff69

	)

196 
	#XK_Hñp
 0xff6®

	)

197 
	#XK_Bªak
 0xff6b

	)

198 
	#XK_Mode_swôch
 0xff7ê

	)

199 
	#XK_s¸ùt_swôch
 0xff7ê

	)

200 
	#XK_Num_Lock
 0xff7f

	)

204 
	#XK_KP_S∑˚
 0xff80

	)

205 
	#XK_KP_Tab
 0xff89

	)

206 
	#XK_KP_E¡î
 0xff8d

	)

207 
	#XK_KP_F1
 0xff91

	)

208 
	#XK_KP_F2
 0xff92

	)

209 
	#XK_KP_F3
 0xff93

	)

210 
	#XK_KP_F4
 0xff94

	)

211 
	#XK_KP_Home
 0xff95

	)

212 
	#XK_KP_Le·
 0xff96

	)

213 
	#XK_KP_Up
 0xff97

	)

214 
	#XK_KP_Right
 0xff98

	)

215 
	#XK_KP_Down
 0xff99

	)

216 
	#XK_KP_Pri‹
 0xff9a

	)

217 
	#XK_KP_Page_Up
 0xff9a

	)

218 
	#XK_KP_Next
 0xff9b

	)

219 
	#XK_KP_Page_Down
 0xff9b

	)

220 
	#XK_KP_End
 0xff9c

	)

221 
	#XK_KP_Begö
 0xff9d

	)

222 
	#XK_KP_In£π
 0xff9e

	)

223 
	#XK_KP_Dñëe
 0xff9f

	)

224 
	#XK_KP_EquÆ
 0xffbd

	)

225 
	#XK_KP_Mu…ùly
 0xfÁa

	)

226 
	#XK_KP_Add
 0xfÁb

	)

227 
	#XK_KP_Sï¨©‹
 0xfÁ¯

	)

228 
	#XK_KP_Subåa˘
 0xfÁd

	)

229 
	#XK_KP_DecimÆ
 0xfÁe

	)

230 
	#XK_KP_Divide
 0xfÁf

	)

232 
	#XK_KP_0
 0xffb0

	)

233 
	#XK_KP_1
 0xffb1

	)

234 
	#XK_KP_2
 0xffb2

	)

235 
	#XK_KP_3
 0xffb3

	)

236 
	#XK_KP_4
 0xffb4

	)

237 
	#XK_KP_5
 0xffb5

	)

238 
	#XK_KP_6
 0xffb6

	)

239 
	#XK_KP_7
 0xffb7

	)

240 
	#XK_KP_8
 0xffb8

	)

241 
	#XK_KP_9
 0xffb9

	)

252 
	#XK_F1
 0xffbe

	)

253 
	#XK_F2
 0xffbf

	)

254 
	#XK_F3
 0xffc0

	)

255 
	#XK_F4
 0xffc1

	)

256 
	#XK_F5
 0xffc2

	)

257 
	#XK_F6
 0xffc3

	)

258 
	#XK_F7
 0xffc4

	)

259 
	#XK_F8
 0xffc5

	)

260 
	#XK_F9
 0xffc6

	)

261 
	#XK_F10
 0xffc7

	)

262 
	#XK_F11
 0xffc8

	)

263 
	#XK_L1
 0xffc8

	)

264 
	#XK_F12
 0xffc9

	)

265 
	#XK_L2
 0xffc9

	)

266 
	#XK_F13
 0xffˇ

	)

267 
	#XK_L3
 0xffˇ

	)

268 
	#XK_F14
 0xffcb

	)

269 
	#XK_L4
 0xffcb

	)

270 
	#XK_F15
 0xffcc

	)

271 
	#XK_L5
 0xffcc

	)

272 
	#XK_F16
 0xffcd

	)

273 
	#XK_L6
 0xffcd

	)

274 
	#XK_F17
 0xff˚

	)

275 
	#XK_L7
 0xff˚

	)

276 
	#XK_F18
 0xffcf

	)

277 
	#XK_L8
 0xffcf

	)

278 
	#XK_F19
 0xffd0

	)

279 
	#XK_L9
 0xffd0

	)

280 
	#XK_F20
 0xffd1

	)

281 
	#XK_L10
 0xffd1

	)

282 
	#XK_F21
 0xffd2

	)

283 
	#XK_R1
 0xffd2

	)

284 
	#XK_F22
 0xffd3

	)

285 
	#XK_R2
 0xffd3

	)

286 
	#XK_F23
 0xffd4

	)

287 
	#XK_R3
 0xffd4

	)

288 
	#XK_F24
 0xffd5

	)

289 
	#XK_R4
 0xffd5

	)

290 
	#XK_F25
 0xffd6

	)

291 
	#XK_R5
 0xffd6

	)

292 
	#XK_F26
 0xffd7

	)

293 
	#XK_R6
 0xffd7

	)

294 
	#XK_F27
 0xffd8

	)

295 
	#XK_R7
 0xffd8

	)

296 
	#XK_F28
 0xffd9

	)

297 
	#XK_R8
 0xffd9

	)

298 
	#XK_F29
 0xffda

	)

299 
	#XK_R9
 0xffda

	)

300 
	#XK_F30
 0xffdb

	)

301 
	#XK_R10
 0xffdb

	)

302 
	#XK_F31
 0xffdc

	)

303 
	#XK_R11
 0xffdc

	)

304 
	#XK_F32
 0xffdd

	)

305 
	#XK_R12
 0xffdd

	)

306 
	#XK_F33
 0xffde

	)

307 
	#XK_R13
 0xffde

	)

308 
	#XK_F34
 0xffdf

	)

309 
	#XK_R14
 0xffdf

	)

310 
	#XK_F35
 0xf„0

	)

311 
	#XK_R15
 0xf„0

	)

315 
	#XK_Shi·_L
 0xf„1

	)

316 
	#XK_Shi·_R
 0xf„2

	)

317 
	#XK_C⁄åﬁ_L
 0xf„3

	)

318 
	#XK_C⁄åﬁ_R
 0xf„4

	)

319 
	#XK_C≠s_Lock
 0xf„5

	)

320 
	#XK_Shi·_Lock
 0xf„6

	)

322 
	#XK_Mëa_L
 0xf„7

	)

323 
	#XK_Mëa_R
 0xf„8

	)

324 
	#XK_A…_L
 0xf„9

	)

325 
	#XK_A…_R
 0xf„®

	)

326 
	#XK_Su≥r_L
 0xf„b

	)

327 
	#XK_Su≥r_R
 0xf„¯

	)

328 
	#XK_Hy≥r_L
 0xf„d

	)

329 
	#XK_Hy≥r_R
 0xf„ê

	)

338 #ifde‡
XK_XKB_KEYS


339 
	#XK_ISO_Lock
 0x„01

	)

340 
	#XK_ISO_Levñ2_L©ch
 0x„02

	)

341 
	#XK_ISO_Levñ3_Shi·
 0x„03

	)

342 
	#XK_ISO_Levñ3_L©ch
 0x„04

	)

343 
	#XK_ISO_Levñ3_Lock
 0x„05

	)

344 
	#XK_ISO_Levñ5_Shi·
 0x„11

	)

345 
	#XK_ISO_Levñ5_L©ch
 0x„12

	)

346 
	#XK_ISO_Levñ5_Lock
 0x„13

	)

347 
	#XK_ISO_Group_Shi·
 0xff7ê

	)

348 
	#XK_ISO_Group_L©ch
 0x„06

	)

349 
	#XK_ISO_Group_Lock
 0x„07

	)

350 
	#XK_ISO_Next_Group
 0x„08

	)

351 
	#XK_ISO_Next_Group_Lock
 0x„09

	)

352 
	#XK_ISO_Pªv_Group
 0x„0a

	)

353 
	#XK_ISO_Pªv_Group_Lock
 0x„0b

	)

354 
	#XK_ISO_Fú°_Group
 0x„0c

	)

355 
	#XK_ISO_Fú°_Group_Lock
 0x„0d

	)

356 
	#XK_ISO_La°_Group
 0x„0e

	)

357 
	#XK_ISO_La°_Group_Lock
 0x„0f

	)

359 
	#XK_ISO_Le·_Tab
 0x„20

	)

360 
	#XK_ISO_Move_Löe_Up
 0x„21

	)

361 
	#XK_ISO_Move_Löe_Down
 0x„22

	)

362 
	#XK_ISO_P¨tül_Löe_Up
 0x„23

	)

363 
	#XK_ISO_P¨tül_Löe_Down
 0x„24

	)

364 
	#XK_ISO_P¨tül_S∑˚_Le·
 0x„25

	)

365 
	#XK_ISO_P¨tül_S∑˚_Right
 0x„26

	)

366 
	#XK_ISO_Së_M¨gö_Le·
 0x„27

	)

367 
	#XK_ISO_Së_M¨gö_Right
 0x„28

	)

368 
	#XK_ISO_Rñó£_M¨gö_Le·
 0x„29

	)

369 
	#XK_ISO_Rñó£_M¨gö_Right
 0x„2a

	)

370 
	#XK_ISO_Rñó£_BŸh_M¨gös
 0x„2b

	)

371 
	#XK_ISO_Fa°_Curs‹_Le·
 0x„2c

	)

372 
	#XK_ISO_Fa°_Curs‹_Right
 0x„2d

	)

373 
	#XK_ISO_Fa°_Curs‹_Up
 0x„2e

	)

374 
	#XK_ISO_Fa°_Curs‹_Down
 0x„2f

	)

375 
	#XK_ISO_C⁄töuous_Undîlöe
 0x„30

	)

376 
	#XK_ISO_Disc⁄töuous_Undîlöe
 0x„31

	)

377 
	#XK_ISO_Emphasize
 0x„32

	)

378 
	#XK_ISO_Cíãr_Obje˘
 0x„33

	)

379 
	#XK_ISO_E¡î
 0x„34

	)

381 
	#XK_dód_gøve
 0x„50

	)

382 
	#XK_dód_acuã
 0x„51

	)

383 
	#XK_dód_cúcumÊex
 0x„52

	)

384 
	#XK_dód_tûde
 0x„53

	)

385 
	#XK_dód_≥ri•omíi
 0x„53

	)

386 
	#XK_dód_ma¸⁄
 0x„54

	)

387 
	#XK_dód_bªve
 0x„55

	)

388 
	#XK_dód_abovedŸ
 0x„56

	)

389 
	#XK_dód_düîesis
 0x„57

	)

390 
	#XK_dód_abovîög
 0x„58

	)

391 
	#XK_dód_doubÀacuã
 0x„59

	)

392 
	#XK_dód_ˇr⁄
 0x„5a

	)

393 
	#XK_dód_˚dûœ
 0x„5b

	)

394 
	#XK_dód_og⁄ek
 0x„5c

	)

395 
	#XK_dód_iŸa
 0x„5d

	)

396 
	#XK_dód_voi˚d_sound
 0x„5e

	)

397 
	#XK_dód_£mivoi˚d_sound
 0x„5f

	)

398 
	#XK_dód_bñowdŸ
 0x„60

	)

399 
	#XK_dód_hook
 0x„61

	)

400 
	#XK_dód_h‹n
 0x„62

	)

401 
	#XK_dód_°roke
 0x„63

	)

402 
	#XK_dód_abovecomma
 0x„64

	)

403 
	#XK_dód_psûi
 0x„64

	)

404 
	#XK_dód_abovîevî£dcomma
 0x„65

	)

405 
	#XK_dód_dasü
 0x„65

	)

406 
	#XK_dód_doubÀgøve
 0x„66

	)

407 
	#XK_dód_bñowrög
 0x„67

	)

408 
	#XK_dód_bñowma¸⁄
 0x„68

	)

409 
	#XK_dód_bñowcúcumÊex
 0x„69

	)

410 
	#XK_dód_bñowtûde
 0x„6a

	)

411 
	#XK_dód_bñowbªve
 0x„6b

	)

412 
	#XK_dód_bñowdüîesis
 0x„6c

	)

413 
	#XK_dód_övîãdbªve
 0x„6d

	)

414 
	#XK_dód_bñowcomma
 0x„6e

	)

415 
	#XK_dód_cuºícy
 0x„6f

	)

418 
	#XK_dód_a
 0x„80

	)

419 
	#XK_dód_A
 0x„81

	)

420 
	#XK_dód_e
 0x„82

	)

421 
	#XK_dód_E
 0x„83

	)

422 
	#XK_dód_i
 0x„84

	)

423 
	#XK_dód_I
 0x„85

	)

424 
	#XK_dód_o
 0x„86

	)

425 
	#XK_dód_O
 0x„87

	)

426 
	#XK_dód_u
 0x„88

	)

427 
	#XK_dód_U
 0x„89

	)

428 
	#XK_dód_smÆl_schwa
 0x„8a

	)

429 
	#XK_dód_ˇpôÆ_schwa
 0x„8b

	)

431 
	#XK_Fú°_VútuÆ_S¸ìn
 0x„d0

	)

432 
	#XK_Pªv_VútuÆ_S¸ìn
 0x„d1

	)

433 
	#XK_Next_VútuÆ_S¸ìn
 0x„d2

	)

434 
	#XK_La°_VútuÆ_S¸ìn
 0x„d4

	)

435 
	#XK_Tîmö©e_Sîvî
 0x„d5

	)

437 
	#XK_Ac˚ssX_E«bÀ
 0x„70

	)

438 
	#XK_Ac˚ssX_Fìdback_E«bÀ
 0x„71

	)

439 
	#XK_RïótKeys_E«bÀ
 0x„72

	)

440 
	#XK_SlowKeys_E«bÀ
 0x„73

	)

441 
	#XK_Boun˚Keys_E«bÀ
 0x„74

	)

442 
	#XK_StickyKeys_E«bÀ
 0x„75

	)

443 
	#XK_Mou£Keys_E«bÀ
 0x„76

	)

444 
	#XK_Mou£Keys_Ac˚l_E«bÀ
 0x„77

	)

445 
	#XK_Ovîœy1_E«bÀ
 0x„78

	)

446 
	#XK_Ovîœy2_E«bÀ
 0x„79

	)

447 
	#XK_AudibÀBñl_E«bÀ
 0x„7a

	)

449 
	#XK_Poöãr_Le·
 0x„e0

	)

450 
	#XK_Poöãr_Right
 0x„e1

	)

451 
	#XK_Poöãr_Up
 0x„e2

	)

452 
	#XK_Poöãr_Down
 0x„e3

	)

453 
	#XK_Poöãr_UpLe·
 0x„e4

	)

454 
	#XK_Poöãr_UpRight
 0x„e5

	)

455 
	#XK_Poöãr_DownLe·
 0x„e6

	)

456 
	#XK_Poöãr_DownRight
 0x„e7

	)

457 
	#XK_Poöãr_Buâ⁄_DÊt
 0x„e8

	)

458 
	#XK_Poöãr_Buâ⁄1
 0x„e9

	)

459 
	#XK_Poöãr_Buâ⁄2
 0x„ó

	)

460 
	#XK_Poöãr_Buâ⁄3
 0x„eb

	)

461 
	#XK_Poöãr_Buâ⁄4
 0x„ec

	)

462 
	#XK_Poöãr_Buâ⁄5
 0x„ed

	)

463 
	#XK_Poöãr_DblClick_DÊt
 0x„ì

	)

464 
	#XK_Poöãr_DblClick1
 0x„ef

	)

465 
	#XK_Poöãr_DblClick2
 0x„f0

	)

466 
	#XK_Poöãr_DblClick3
 0x„f1

	)

467 
	#XK_Poöãr_DblClick4
 0x„f2

	)

468 
	#XK_Poöãr_DblClick5
 0x„f3

	)

469 
	#XK_Poöãr_Døg_DÊt
 0x„f4

	)

470 
	#XK_Poöãr_Døg1
 0x„f5

	)

471 
	#XK_Poöãr_Døg2
 0x„f6

	)

472 
	#XK_Poöãr_Døg3
 0x„f7

	)

473 
	#XK_Poöãr_Døg4
 0x„f8

	)

474 
	#XK_Poöãr_Døg5
 0x„fd

	)

476 
	#XK_Poöãr_E«bÀKeys
 0x„f9

	)

477 
	#XK_Poöãr_Ac˚Àøã
 0x„Á

	)

478 
	#XK_Poöãr_DÊtBäNext
 0x„fb

	)

479 
	#XK_Poöãr_DÊtBäPªv
 0x„fc

	)

488 #ifde‡
XK_3270


489 
	#XK_3270_Du∂iˇã
 0xfd01

	)

490 
	#XK_3270_FõldM¨k
 0xfd02

	)

491 
	#XK_3270_Right2
 0xfd03

	)

492 
	#XK_3270_Le·2
 0xfd04

	)

493 
	#XK_3270_BackTab
 0xfd05

	)

494 
	#XK_3270_Eø£EOF
 0xfd06

	)

495 
	#XK_3270_Eø£I≈ut
 0xfd07

	)

496 
	#XK_3270_Re£t
 0xfd08

	)

497 
	#XK_3270_Quô
 0xfd09

	)

498 
	#XK_3270_PA1
 0xfd0a

	)

499 
	#XK_3270_PA2
 0xfd0b

	)

500 
	#XK_3270_PA3
 0xfd0c

	)

501 
	#XK_3270_Te°
 0xfd0d

	)

502 
	#XK_3270_Aân
 0xfd0e

	)

503 
	#XK_3270_Curs‹Blök
 0xfd0f

	)

504 
	#XK_3270_A…Curs‹
 0xfd10

	)

505 
	#XK_3270_KeyClick
 0xfd11

	)

506 
	#XK_3270_Jump
 0xfd12

	)

507 
	#XK_3270_Idít
 0xfd13

	)

508 
	#XK_3270_RuÀ
 0xfd14

	)

509 
	#XK_3270_C›y
 0xfd15

	)

510 
	#XK_3270_Pœy
 0xfd16

	)

511 
	#XK_3270_Sëup
 0xfd17

	)

512 
	#XK_3270_Rec‹d
 0xfd18

	)

513 
	#XK_3270_Ch™geS¸ìn
 0xfd19

	)

514 
	#XK_3270_DñëeW‹d
 0xfd1a

	)

515 
	#XK_3270_ExSñe˘
 0xfd1b

	)

516 
	#XK_3270_Curs‹Sñe˘
 0xfd1c

	)

517 
	#XK_3270_PrötS¸ìn
 0xfd1d

	)

518 
	#XK_3270_E¡î
 0xfd1e

	)

526 #ifde‡
XK_LATIN1


527 
	#XK_•a˚
 0x0020

	)

528 
	#XK_ex˛am
 0x0021

	)

529 
	#XK_quŸedbl
 0x0022

	)

530 
	#XK_numbîsign
 0x0023

	)

531 
	#XK_dﬁœr
 0x0024

	)

532 
	#XK_≥r˚¡
 0x0025

	)

533 
	#XK_am≥rßnd
 0x0026

	)

534 
	#XK_≠o°r›he
 0x0027

	)

535 
	#XK_quŸîight
 0x0027

	)

536 
	#XK_∑ª∆e·
 0x0028

	)

537 
	#XK_∑ªƒight
 0x0029

	)

538 
	#XK_a°îisk
 0x002®

	)

539 
	#XK_∂us
 0x002b

	)

540 
	#XK_comma
 0x002¯

	)

541 
	#XK_möus
 0x002d

	)

542 
	#XK_≥riod
 0x002ê

	)

543 
	#XK_¶ash
 0x002‡

	)

544 
	#XK_0
 0x0030

	)

545 
	#XK_1
 0x0031

	)

546 
	#XK_2
 0x0032

	)

547 
	#XK_3
 0x0033

	)

548 
	#XK_4
 0x0034

	)

549 
	#XK_5
 0x0035

	)

550 
	#XK_6
 0x0036

	)

551 
	#XK_7
 0x0037

	)

552 
	#XK_8
 0x0038

	)

553 
	#XK_9
 0x0039

	)

554 
	#XK_cﬁ⁄
 0x003®

	)

555 
	#XK_£micﬁ⁄
 0x003b

	)

556 
	#XK_Àss
 0x003¯

	)

557 
	#XK_equÆ
 0x003d

	)

558 
	#XK_gª©î
 0x003ê

	)

559 
	#XK_que°i⁄
 0x003‡

	)

560 
	#XK_©
 0x0040

	)

561 
	#XK_A
 0x0041

	)

562 
	#XK_B
 0x0042

	)

563 
	#XK_C
 0x0043

	)

564 
	#XK_D
 0x0044

	)

565 
	#XK_E
 0x0045

	)

566 
	#XK_F
 0x0046

	)

567 
	#XK_G
 0x0047

	)

568 
	#XK_H
 0x0048

	)

569 
	#XK_I
 0x0049

	)

570 
	#XK_J
 0x004®

	)

571 
	#XK_K
 0x004b

	)

572 
	#XK_L
 0x004¯

	)

573 
	#XK_M
 0x004d

	)

574 
	#XK_N
 0x004ê

	)

575 
	#XK_O
 0x004‡

	)

576 
	#XK_P
 0x0050

	)

577 
	#XK_Q
 0x0051

	)

578 
	#XK_R
 0x0052

	)

579 
	#XK_S
 0x0053

	)

580 
	#XK_T
 0x0054

	)

581 
	#XK_U
 0x0055

	)

582 
	#XK_V
 0x0056

	)

583 
	#XK_W
 0x0057

	)

584 
	#XK_X
 0x0058

	)

585 
	#XK_Y
 0x0059

	)

586 
	#XK_Z
 0x005®

	)

587 
	#XK_bøckëÀ·
 0x005b

	)

588 
	#XK_back¶ash
 0x005¯

	)

589 
	#XK_bøckëright
 0x005d

	)

590 
	#XK_asciicúcum
 0x005ê

	)

591 
	#XK_undîsc‹e
 0x005‡

	)

592 
	#XK_gøve
 0x0060

	)

593 
	#XK_quŸñe·
 0x0060

	)

594 
	#XK_a
 0x0061

	)

595 
	#XK_b
 0x0062

	)

596 
	#XK_c
 0x0063

	)

597 
	#XK_d
 0x0064

	)

598 
	#XK_e
 0x0065

	)

599 
	#XK_f
 0x0066

	)

600 
	#XK_g
 0x0067

	)

601 
	#XK_h
 0x0068

	)

602 
	#XK_i
 0x0069

	)

603 
	#XK_j
 0x006®

	)

604 
	#XK_k
 0x006b

	)

605 
	#XK_l
 0x006¯

	)

606 
	#XK_m
 0x006d

	)

607 
	#XK_n
 0x006ê

	)

608 
	#XK_o
 0x006‡

	)

609 
	#XK_p
 0x0070

	)

610 
	#XK_q
 0x0071

	)

611 
	#XK_r
 0x0072

	)

612 
	#XK_s
 0x0073

	)

613 
	#XK_t
 0x0074

	)

614 
	#XK_u
 0x0075

	)

615 
	#XK_v
 0x0076

	)

616 
	#XK_w
 0x0077

	)

617 
	#XK_x
 0x0078

	)

618 
	#XK_y
 0x0079

	)

619 
	#XK_z
 0x007®

	)

620 
	#XK_bø˚À·
 0x007b

	)

621 
	#XK_b¨
 0x007¯

	)

622 
	#XK_bø˚right
 0x007d

	)

623 
	#XK_asciôûde
 0x007ê

	)

625 
	#XK_nobªak•a˚
 0x00a0

	)

626 
	#XK_ex˛amdown
 0x00a1

	)

627 
	#XK_˚¡
 0x00a2

	)

628 
	#XK_°îlög
 0x00a3

	)

629 
	#XK_cuºícy
 0x00a4

	)

630 
	#XK_yí
 0x00a5

	)

631 
	#XK_brokíb¨
 0x00a6

	)

632 
	#XK_£˘i⁄
 0x00a7

	)

633 
	#XK_düîesis
 0x00a8

	)

634 
	#XK_c›yright
 0x00a9

	)

635 
	#XK_‹d„mööe
 0x00Ø

	)

636 
	#XK_guûÀmŸÀ·
 0x00ab

	)

637 
	#XK_nŸsign
 0x00a¯

	)

638 
	#XK_hyphí
 0x00ad

	)

639 
	#XK_ªgi°îed
 0x00´

	)

640 
	#XK_ma¸⁄
 0x00a‡

	)

641 
	#XK_degªe
 0x00b0

	)

642 
	#XK_∂usmöus
 0x00b1

	)

643 
	#XK_twosu≥ri‹
 0x00b2

	)

644 
	#XK_thªesu≥ri‹
 0x00b3

	)

645 
	#XK_acuã
 0x00b4

	)

646 
	#XK_mu
 0x00b5

	)

647 
	#XK_∑øgøph
 0x00b6

	)

648 
	#XK_≥riod˚¡îed
 0x00b7

	)

649 
	#XK_˚dûœ
 0x00b8

	)

650 
	#XK_⁄esu≥ri‹
 0x00b9

	)

651 
	#XK_masculöe
 0x00b®

	)

652 
	#XK_guûÀmŸright
 0x00bb

	)

653 
	#XK_⁄equ¨ãr
 0x00b¯

	)

654 
	#XK_⁄ehÆf
 0x00bd

	)

655 
	#XK_thªequ¨ãrs
 0x00bê

	)

656 
	#XK_que°i⁄down
 0x00b‡

	)

657 
	#XK_Agøve
 0x00c0

	)

658 
	#XK_Aacuã
 0x00c1

	)

659 
	#XK_AcúcumÊex
 0x00c2

	)

660 
	#XK_Atûde
 0x00c3

	)

661 
	#XK_Adüîesis
 0x00c4

	)

662 
	#XK_Arög
 0x00c5

	)

663 
	#XK_AE
 0x00c6

	)

664 
	#XK_C˚dûœ
 0x00c7

	)

665 
	#XK_Egøve
 0x00c8

	)

666 
	#XK_Eacuã
 0x00c9

	)

667 
	#XK_EcúcumÊex
 0x00ˇ

	)

668 
	#XK_Edüîesis
 0x00cb

	)

669 
	#XK_Igøve
 0x00c¯

	)

670 
	#XK_Iacuã
 0x00cd

	)

671 
	#XK_IcúcumÊex
 0x00˚

	)

672 
	#XK_Idüîesis
 0x00c‡

	)

673 
	#XK_ETH
 0x00d0

	)

674 
	#XK_Eth
 0x00d0

	)

675 
	#XK_Ntûde
 0x00d1

	)

676 
	#XK_Ogøve
 0x00d2

	)

677 
	#XK_Oacuã
 0x00d3

	)

678 
	#XK_OcúcumÊex
 0x00d4

	)

679 
	#XK_Otûde
 0x00d5

	)

680 
	#XK_Odüîesis
 0x00d6

	)

681 
	#XK_mu…ùly
 0x00d7

	)

682 
	#XK_O¶ash
 0x00d8

	)

683 
	#XK_Ooblique
 0x00d8

	)

684 
	#XK_Ugøve
 0x00d9

	)

685 
	#XK_Uacuã
 0x00d®

	)

686 
	#XK_UcúcumÊex
 0x00db

	)

687 
	#XK_Udüîesis
 0x00d¯

	)

688 
	#XK_Yacuã
 0x00dd

	)

689 
	#XK_THORN
 0x00dê

	)

690 
	#XK_Th‹n
 0x00dê

	)

691 
	#XK_ssh¨p
 0x00d‡

	)

692 
	#XK_agøve
 0x00e0

	)

693 
	#XK_Øcuã
 0x00e1

	)

694 
	#XK_acúcumÊex
 0x00e2

	)

695 
	#XK_©ûde
 0x00e3

	)

696 
	#XK_adüîesis
 0x00e4

	)

697 
	#XK_¨ög
 0x00e5

	)

698 
	#XK_´
 0x00e6

	)

699 
	#XK_c˚dûœ
 0x00e7

	)

700 
	#XK_egøve
 0x00e8

	)

701 
	#XK_ócuã
 0x00e9

	)

702 
	#XK_ecúcumÊex
 0x00ó

	)

703 
	#XK_edüîesis
 0x00eb

	)

704 
	#XK_igøve
 0x00e¯

	)

705 
	#XK_ücuã
 0x00ed

	)

706 
	#XK_icúcumÊex
 0x00ì

	)

707 
	#XK_idüîesis
 0x00e‡

	)

708 
	#XK_ëh
 0x00f0

	)

709 
	#XK_¡ûde
 0x00f1

	)

710 
	#XK_ogøve
 0x00f2

	)

711 
	#XK_ﬂcuã
 0x00f3

	)

712 
	#XK_ocúcumÊex
 0x00f4

	)

713 
	#XK_Ÿûde
 0x00f5

	)

714 
	#XK_odüîesis
 0x00f6

	)

715 
	#XK_divisi⁄
 0x00f7

	)

716 
	#XK_o¶ash
 0x00f8

	)

717 
	#XK_ooblique
 0x00f8

	)

718 
	#XK_ugøve
 0x00f9

	)

719 
	#XK_uacuã
 0x00Á

	)

720 
	#XK_ucúcumÊex
 0x00fb

	)

721 
	#XK_udüîesis
 0x00f¯

	)

722 
	#XK_yacuã
 0x00fd

	)

723 
	#XK_th‹n
 0x00„

	)

724 
	#XK_ydüîesis
 0x00f‡

	)

732 #ifde‡
XK_LATIN2


733 
	#XK_Aog⁄ek
 0x01a1

	)

734 
	#XK_bªve
 0x01a2

	)

735 
	#XK_L°roke
 0x01a3

	)

736 
	#XK_Lˇr⁄
 0x01a5

	)

737 
	#XK_Sacuã
 0x01a6

	)

738 
	#XK_Sˇr⁄
 0x01a9

	)

739 
	#XK_S˚dûœ
 0x01Ø

	)

740 
	#XK_Tˇr⁄
 0x01ab

	)

741 
	#XK_Zacuã
 0x01a¯

	)

742 
	#XK_Zˇr⁄
 0x01´

	)

743 
	#XK_ZabovedŸ
 0x01a‡

	)

744 
	#XK_aog⁄ek
 0x01b1

	)

745 
	#XK_og⁄ek
 0x01b2

	)

746 
	#XK_l°roke
 0x01b3

	)

747 
	#XK_lˇr⁄
 0x01b5

	)

748 
	#XK_ßcuã
 0x01b6

	)

749 
	#XK_ˇr⁄
 0x01b7

	)

750 
	#XK_sˇr⁄
 0x01b9

	)

751 
	#XK_s˚dûœ
 0x01b®

	)

752 
	#XK_tˇr⁄
 0x01bb

	)

753 
	#XK_zacuã
 0x01b¯

	)

754 
	#XK_doubÀacuã
 0x01bd

	)

755 
	#XK_zˇr⁄
 0x01bê

	)

756 
	#XK_zabovedŸ
 0x01b‡

	)

757 
	#XK_Racuã
 0x01c0

	)

758 
	#XK_Abªve
 0x01c3

	)

759 
	#XK_Lacuã
 0x01c5

	)

760 
	#XK_Cacuã
 0x01c6

	)

761 
	#XK_Cˇr⁄
 0x01c8

	)

762 
	#XK_Eog⁄ek
 0x01ˇ

	)

763 
	#XK_Eˇr⁄
 0x01c¯

	)

764 
	#XK_Dˇr⁄
 0x01c‡

	)

765 
	#XK_D°roke
 0x01d0

	)

766 
	#XK_Nacuã
 0x01d1

	)

767 
	#XK_Nˇr⁄
 0x01d2

	)

768 
	#XK_OdoubÀacuã
 0x01d5

	)

769 
	#XK_Rˇr⁄
 0x01d8

	)

770 
	#XK_Urög
 0x01d9

	)

771 
	#XK_UdoubÀacuã
 0x01db

	)

772 
	#XK_T˚dûœ
 0x01dê

	)

773 
	#XK_øcuã
 0x01e0

	)

774 
	#XK_abªve
 0x01e3

	)

775 
	#XK_œcuã
 0x01e5

	)

776 
	#XK_ˇcuã
 0x01e6

	)

777 
	#XK_cˇr⁄
 0x01e8

	)

778 
	#XK_eog⁄ek
 0x01ó

	)

779 
	#XK_eˇr⁄
 0x01e¯

	)

780 
	#XK_dˇr⁄
 0x01e‡

	)

781 
	#XK_d°roke
 0x01f0

	)

782 
	#XK_«cuã
 0x01f1

	)

783 
	#XK_nˇr⁄
 0x01f2

	)

784 
	#XK_odoubÀacuã
 0x01f5

	)

785 
	#XK_rˇr⁄
 0x01f8

	)

786 
	#XK_urög
 0x01f9

	)

787 
	#XK_udoubÀacuã
 0x01fb

	)

788 
	#XK_t˚dûœ
 0x01„

	)

789 
	#XK_abovedŸ
 0x01f‡

	)

797 #ifde‡
XK_LATIN3


798 
	#XK_H°roke
 0x02a1

	)

799 
	#XK_HcúcumÊex
 0x02a6

	)

800 
	#XK_IabovedŸ
 0x02a9

	)

801 
	#XK_Gbªve
 0x02ab

	)

802 
	#XK_JcúcumÊex
 0x02a¯

	)

803 
	#XK_h°roke
 0x02b1

	)

804 
	#XK_hcúcumÊex
 0x02b6

	)

805 
	#XK_idŸÀss
 0x02b9

	)

806 
	#XK_gbªve
 0x02bb

	)

807 
	#XK_jcúcumÊex
 0x02b¯

	)

808 
	#XK_CabovedŸ
 0x02c5

	)

809 
	#XK_CcúcumÊex
 0x02c6

	)

810 
	#XK_GabovedŸ
 0x02d5

	)

811 
	#XK_GcúcumÊex
 0x02d8

	)

812 
	#XK_Ubªve
 0x02dd

	)

813 
	#XK_ScúcumÊex
 0x02dê

	)

814 
	#XK_ˇbovedŸ
 0x02e5

	)

815 
	#XK_ccúcumÊex
 0x02e6

	)

816 
	#XK_gabovedŸ
 0x02f5

	)

817 
	#XK_gcúcumÊex
 0x02f8

	)

818 
	#XK_ubªve
 0x02fd

	)

819 
	#XK_scúcumÊex
 0x02„

	)

828 #ifde‡
XK_LATIN4


829 
	#XK_kø
 0x03a2

	)

830 
	#XK_k≠∑
 0x03a2

	)

831 
	#XK_R˚dûœ
 0x03a3

	)

832 
	#XK_Itûde
 0x03a5

	)

833 
	#XK_L˚dûœ
 0x03a6

	)

834 
	#XK_Ema¸⁄
 0x03Ø

	)

835 
	#XK_G˚dûœ
 0x03ab

	)

836 
	#XK_T¶ash
 0x03a¯

	)

837 
	#XK_r˚dûœ
 0x03b3

	)

838 
	#XK_ôûde
 0x03b5

	)

839 
	#XK_l˚dûœ
 0x03b6

	)

840 
	#XK_ema¸⁄
 0x03b®

	)

841 
	#XK_g˚dûœ
 0x03bb

	)

842 
	#XK_t¶ash
 0x03b¯

	)

843 
	#XK_ENG
 0x03bd

	)

844 
	#XK_íg
 0x03b‡

	)

845 
	#XK_Ama¸⁄
 0x03c0

	)

846 
	#XK_Iog⁄ek
 0x03c7

	)

847 
	#XK_EabovedŸ
 0x03c¯

	)

848 
	#XK_Ima¸⁄
 0x03c‡

	)

849 
	#XK_N˚dûœ
 0x03d1

	)

850 
	#XK_Oma¸⁄
 0x03d2

	)

851 
	#XK_K˚dûœ
 0x03d3

	)

852 
	#XK_Uog⁄ek
 0x03d9

	)

853 
	#XK_Utûde
 0x03dd

	)

854 
	#XK_Uma¸⁄
 0x03dê

	)

855 
	#XK_ama¸⁄
 0x03e0

	)

856 
	#XK_iog⁄ek
 0x03e7

	)

857 
	#XK_óbovedŸ
 0x03e¯

	)

858 
	#XK_ima¸⁄
 0x03e‡

	)

859 
	#XK_n˚dûœ
 0x03f1

	)

860 
	#XK_oma¸⁄
 0x03f2

	)

861 
	#XK_k˚dûœ
 0x03f3

	)

862 
	#XK_uog⁄ek
 0x03f9

	)

863 
	#XK_utûde
 0x03fd

	)

864 
	#XK_uma¸⁄
 0x03„

	)

870 #ifde‡
XK_LATIN8


871 
	#XK_WcúcumÊex
 0x1000174

	)

872 
	#XK_wcúcumÊex
 0x1000175

	)

873 
	#XK_YcúcumÊex
 0x1000176

	)

874 
	#XK_ycúcumÊex
 0x1000177

	)

875 
	#XK_BabovedŸ
 0x1001e02

	)

876 
	#XK_babovedŸ
 0x1001e03

	)

877 
	#XK_DabovedŸ
 0x1001e0®

	)

878 
	#XK_dabovedŸ
 0x1001e0b

	)

879 
	#XK_FabovedŸ
 0x1001e1ê

	)

880 
	#XK_ÁbovedŸ
 0x1001e1‡

	)

881 
	#XK_MabovedŸ
 0x1001e40

	)

882 
	#XK_mabovedŸ
 0x1001e41

	)

883 
	#XK_PabovedŸ
 0x1001e56

	)

884 
	#XK_∑bovedŸ
 0x1001e57

	)

885 
	#XK_SabovedŸ
 0x1001e60

	)

886 
	#XK_ßbovedŸ
 0x1001e61

	)

887 
	#XK_TabovedŸ
 0x1001e6®

	)

888 
	#XK_èbovedŸ
 0x1001e6b

	)

889 
	#XK_Wgøve
 0x1001e80

	)

890 
	#XK_wgøve
 0x1001e81

	)

891 
	#XK_Wacuã
 0x1001e82

	)

892 
	#XK_wacuã
 0x1001e83

	)

893 
	#XK_Wdüîesis
 0x1001e84

	)

894 
	#XK_wdüîesis
 0x1001e85

	)

895 
	#XK_Ygøve
 0x1001ef2

	)

896 
	#XK_ygøve
 0x1001ef3

	)

904 #ifde‡
XK_LATIN9


905 
	#XK_OE
 0x13b¯

	)

906 
	#XK_€
 0x13bd

	)

907 
	#XK_Ydüîesis
 0x13bê

	)

915 #ifde‡
XK_KATAKANA


916 
	#XK_ovîlöe
 0x047ê

	)

917 
	#XK_k™a_fuŒ°›
 0x04a1

	)

918 
	#XK_k™a_›íögbøckë
 0x04a2

	)

919 
	#XK_k™a_˛osögbøckë
 0x04a3

	)

920 
	#XK_k™a_comma
 0x04a4

	)

921 
	#XK_k™a_c⁄jun˘ive
 0x04a5

	)

922 
	#XK_k™a_middÀdŸ
 0x04a5

	)

923 
	#XK_k™a_WO
 0x04a6

	)

924 
	#XK_k™a_a
 0x04a7

	)

925 
	#XK_k™a_i
 0x04a8

	)

926 
	#XK_k™a_u
 0x04a9

	)

927 
	#XK_k™a_e
 0x04Ø

	)

928 
	#XK_k™a_o
 0x04ab

	)

929 
	#XK_k™a_ya
 0x04a¯

	)

930 
	#XK_k™a_yu
 0x04ad

	)

931 
	#XK_k™a_yo
 0x04´

	)

932 
	#XK_k™a_tsu
 0x04a‡

	)

933 
	#XK_k™a_tu
 0x04a‡

	)

934 
	#XK_¥ﬁ⁄gedsound
 0x04b0

	)

935 
	#XK_k™a_A
 0x04b1

	)

936 
	#XK_k™a_I
 0x04b2

	)

937 
	#XK_k™a_U
 0x04b3

	)

938 
	#XK_k™a_E
 0x04b4

	)

939 
	#XK_k™a_O
 0x04b5

	)

940 
	#XK_k™a_KA
 0x04b6

	)

941 
	#XK_k™a_KI
 0x04b7

	)

942 
	#XK_k™a_KU
 0x04b8

	)

943 
	#XK_k™a_KE
 0x04b9

	)

944 
	#XK_k™a_KO
 0x04b®

	)

945 
	#XK_k™a_SA
 0x04bb

	)

946 
	#XK_k™a_SHI
 0x04b¯

	)

947 
	#XK_k™a_SU
 0x04bd

	)

948 
	#XK_k™a_SE
 0x04bê

	)

949 
	#XK_k™a_SO
 0x04b‡

	)

950 
	#XK_k™a_TA
 0x04c0

	)

951 
	#XK_k™a_CHI
 0x04c1

	)

952 
	#XK_k™a_TI
 0x04c1

	)

953 
	#XK_k™a_TSU
 0x04c2

	)

954 
	#XK_k™a_TU
 0x04c2

	)

955 
	#XK_k™a_TE
 0x04c3

	)

956 
	#XK_k™a_TO
 0x04c4

	)

957 
	#XK_k™a_NA
 0x04c5

	)

958 
	#XK_k™a_NI
 0x04c6

	)

959 
	#XK_k™a_NU
 0x04c7

	)

960 
	#XK_k™a_NE
 0x04c8

	)

961 
	#XK_k™a_NO
 0x04c9

	)

962 
	#XK_k™a_HA
 0x04ˇ

	)

963 
	#XK_k™a_HI
 0x04cb

	)

964 
	#XK_k™a_FU
 0x04c¯

	)

965 
	#XK_k™a_HU
 0x04c¯

	)

966 
	#XK_k™a_HE
 0x04cd

	)

967 
	#XK_k™a_HO
 0x04˚

	)

968 
	#XK_k™a_MA
 0x04c‡

	)

969 
	#XK_k™a_MI
 0x04d0

	)

970 
	#XK_k™a_MU
 0x04d1

	)

971 
	#XK_k™a_ME
 0x04d2

	)

972 
	#XK_k™a_MO
 0x04d3

	)

973 
	#XK_k™a_YA
 0x04d4

	)

974 
	#XK_k™a_YU
 0x04d5

	)

975 
	#XK_k™a_YO
 0x04d6

	)

976 
	#XK_k™a_RA
 0x04d7

	)

977 
	#XK_k™a_RI
 0x04d8

	)

978 
	#XK_k™a_RU
 0x04d9

	)

979 
	#XK_k™a_RE
 0x04d®

	)

980 
	#XK_k™a_RO
 0x04db

	)

981 
	#XK_k™a_WA
 0x04d¯

	)

982 
	#XK_k™a_N
 0x04dd

	)

983 
	#XK_voi˚dsound
 0x04dê

	)

984 
	#XK_£mivoi˚dsound
 0x04d‡

	)

985 
	#XK_k™a_swôch
 0xff7ê

	)

993 #ifde‡
XK_ARABIC


994 
	#XK_F¨si_0
 0x10006f0

	)

995 
	#XK_F¨si_1
 0x10006f1

	)

996 
	#XK_F¨si_2
 0x10006f2

	)

997 
	#XK_F¨si_3
 0x10006f3

	)

998 
	#XK_F¨si_4
 0x10006f4

	)

999 
	#XK_F¨si_5
 0x10006f5

	)

1000 
	#XK_F¨si_6
 0x10006f6

	)

1001 
	#XK_F¨si_7
 0x10006f7

	)

1002 
	#XK_F¨si_8
 0x10006f8

	)

1003 
	#XK_F¨si_9
 0x10006f9

	)

1004 
	#XK_Aøbic_≥r˚¡
 0x100066®

	)

1005 
	#XK_Aøbic_su≥rs¸ùt_Æef
 0x1000670

	)

1006 
	#XK_Aøbic_âeh
 0x1000679

	)

1007 
	#XK_Aøbic_≥h
 0x100067ê

	)

1008 
	#XK_Aøbic_tcheh
 0x1000686

	)

1009 
	#XK_Aøbic_ddÆ
 0x1000688

	)

1010 
	#XK_Aøbic_ºeh
 0x1000691

	)

1011 
	#XK_Aøbic_comma
 0x05a¯

	)

1012 
	#XK_Aøbic_fuŒ°›
 0x10006d4

	)

1013 
	#XK_Aøbic_0
 0x1000660

	)

1014 
	#XK_Aøbic_1
 0x1000661

	)

1015 
	#XK_Aøbic_2
 0x1000662

	)

1016 
	#XK_Aøbic_3
 0x1000663

	)

1017 
	#XK_Aøbic_4
 0x1000664

	)

1018 
	#XK_Aøbic_5
 0x1000665

	)

1019 
	#XK_Aøbic_6
 0x1000666

	)

1020 
	#XK_Aøbic_7
 0x1000667

	)

1021 
	#XK_Aøbic_8
 0x1000668

	)

1022 
	#XK_Aøbic_9
 0x1000669

	)

1023 
	#XK_Aøbic_£micﬁ⁄
 0x05bb

	)

1024 
	#XK_Aøbic_que°i⁄_m¨k
 0x05b‡

	)

1025 
	#XK_Aøbic_hamza
 0x05c1

	)

1026 
	#XK_Aøbic_madda⁄Æef
 0x05c2

	)

1027 
	#XK_Aøbic_hamza⁄Æef
 0x05c3

	)

1028 
	#XK_Aøbic_hamza⁄waw
 0x05c4

	)

1029 
	#XK_Aøbic_hamzaundîÆef
 0x05c5

	)

1030 
	#XK_Aøbic_hamza⁄yeh
 0x05c6

	)

1031 
	#XK_Aøbic_Æef
 0x05c7

	)

1032 
	#XK_Aøbic_beh
 0x05c8

	)

1033 
	#XK_Aøbic_ãhm¨buè
 0x05c9

	)

1034 
	#XK_Aøbic_ãh
 0x05ˇ

	)

1035 
	#XK_Aøbic_theh
 0x05cb

	)

1036 
	#XK_Aøbic_jìm
 0x05c¯

	)

1037 
	#XK_Aøbic_hah
 0x05cd

	)

1038 
	#XK_Aøbic_khah
 0x05˚

	)

1039 
	#XK_Aøbic_dÆ
 0x05c‡

	)

1040 
	#XK_Aøbic_thÆ
 0x05d0

	)

1041 
	#XK_Aøbic_ø
 0x05d1

	)

1042 
	#XK_Aøbic_zaö
 0x05d2

	)

1043 
	#XK_Aøbic_£í
 0x05d3

	)

1044 
	#XK_Aøbic_shìn
 0x05d4

	)

1045 
	#XK_Aøbic_ßd
 0x05d5

	)

1046 
	#XK_Aøbic_dad
 0x05d6

	)

1047 
	#XK_Aøbic_èh
 0x05d7

	)

1048 
	#XK_Aøbic_zah
 0x05d8

	)

1049 
	#XK_Aøbic_aö
 0x05d9

	)

1050 
	#XK_Aøbic_ghaö
 0x05d®

	)

1051 
	#XK_Aøbic_ètwìl
 0x05e0

	)

1052 
	#XK_Aøbic_„h
 0x05e1

	)

1053 
	#XK_Aøbic_qaf
 0x05e2

	)

1054 
	#XK_Aøbic_kaf
 0x05e3

	)

1055 
	#XK_Aøbic_œm
 0x05e4

	)

1056 
	#XK_Aøbic_mìm
 0x05e5

	)

1057 
	#XK_Aøbic_no⁄
 0x05e6

	)

1058 
	#XK_Aøbic_ha
 0x05e7

	)

1059 
	#XK_Aøbic_heh
 0x05e7

	)

1060 
	#XK_Aøbic_waw
 0x05e8

	)

1061 
	#XK_Aøbic_Æefmaksuø
 0x05e9

	)

1062 
	#XK_Aøbic_yeh
 0x05ó

	)

1063 
	#XK_Aøbic_Áth©™
 0x05eb

	)

1064 
	#XK_Aøbic_damm©™
 0x05e¯

	)

1065 
	#XK_Aøbic_ka§©™
 0x05ed

	)

1066 
	#XK_Aøbic_Átha
 0x05ì

	)

1067 
	#XK_Aøbic_damma
 0x05e‡

	)

1068 
	#XK_Aøbic_ka§a
 0x05f0

	)

1069 
	#XK_Aøbic_shadda
 0x05f1

	)

1070 
	#XK_Aøbic_sukun
 0x05f2

	)

1071 
	#XK_Aøbic_madda_above
 0x1000653

	)

1072 
	#XK_Aøbic_hamza_above
 0x1000654

	)

1073 
	#XK_Aøbic_hamza_bñow
 0x1000655

	)

1074 
	#XK_Aøbic_jeh
 0x1000698

	)

1075 
	#XK_Aøbic_veh
 0x10006a4

	)

1076 
	#XK_Aøbic_keheh
 0x10006a9

	)

1077 
	#XK_Aøbic_gaf
 0x10006a‡

	)

1078 
	#XK_Aøbic_no⁄_ghu¬a
 0x10006b®

	)

1079 
	#XK_Aøbic_heh_dﬂchashmì
 0x10006bê

	)

1080 
	#XK_F¨si_yeh
 0x10006c¯

	)

1081 
	#XK_Aøbic_Ársi_yeh
 0x10006c¯

	)

1082 
	#XK_Aøbic_yeh_b¨ì
 0x10006d2

	)

1083 
	#XK_Aøbic_heh_gﬂl
 0x10006c1

	)

1084 
	#XK_Aøbic_swôch
 0xff7ê

	)

1091 #ifde‡
XK_CYRILLIC


1092 
	#XK_Cyrûlic_GHE_b¨
 0x1000492

	)

1093 
	#XK_Cyrûlic_ghe_b¨
 0x1000493

	)

1094 
	#XK_Cyrûlic_ZHE_des˚ndî
 0x1000496

	)

1095 
	#XK_Cyrûlic_zhe_des˚ndî
 0x1000497

	)

1096 
	#XK_Cyrûlic_KA_des˚ndî
 0x100049®

	)

1097 
	#XK_Cyrûlic_ka_des˚ndî
 0x100049b

	)

1098 
	#XK_Cyrûlic_KA_vît°roke
 0x100049¯

	)

1099 
	#XK_Cyrûlic_ka_vît°roke
 0x100049d

	)

1100 
	#XK_Cyrûlic_EN_des˚ndî
 0x10004a2

	)

1101 
	#XK_Cyrûlic_í_des˚ndî
 0x10004a3

	)

1102 
	#XK_Cyrûlic_U_°øight
 0x10004´

	)

1103 
	#XK_Cyrûlic_u_°øight
 0x10004a‡

	)

1104 
	#XK_Cyrûlic_U_°øight_b¨
 0x10004b0

	)

1105 
	#XK_Cyrûlic_u_°øight_b¨
 0x10004b1

	)

1106 
	#XK_Cyrûlic_HA_des˚ndî
 0x10004b2

	)

1107 
	#XK_Cyrûlic_ha_des˚ndî
 0x10004b3

	)

1108 
	#XK_Cyrûlic_CHE_des˚ndî
 0x10004b6

	)

1109 
	#XK_Cyrûlic_che_des˚ndî
 0x10004b7

	)

1110 
	#XK_Cyrûlic_CHE_vît°roke
 0x10004b8

	)

1111 
	#XK_Cyrûlic_che_vît°roke
 0x10004b9

	)

1112 
	#XK_Cyrûlic_SHHA
 0x10004b®

	)

1113 
	#XK_Cyrûlic_shha
 0x10004bb

	)

1115 
	#XK_Cyrûlic_SCHWA
 0x10004d8

	)

1116 
	#XK_Cyrûlic_schwa
 0x10004d9

	)

1117 
	#XK_Cyrûlic_I_ma¸⁄
 0x10004e2

	)

1118 
	#XK_Cyrûlic_i_ma¸⁄
 0x10004e3

	)

1119 
	#XK_Cyrûlic_O_b¨
 0x10004e8

	)

1120 
	#XK_Cyrûlic_o_b¨
 0x10004e9

	)

1121 
	#XK_Cyrûlic_U_ma¸⁄
 0x10004ì

	)

1122 
	#XK_Cyrûlic_u_ma¸⁄
 0x10004e‡

	)

1124 
	#XK_Sîbün_dje
 0x06a1

	)

1125 
	#XK_Ma˚d⁄ü_gje
 0x06a2

	)

1126 
	#XK_Cyrûlic_io
 0x06a3

	)

1127 
	#XK_Ukøöün_õ
 0x06a4

	)

1128 
	#XK_Ukønün_je
 0x06a4

	)

1129 
	#XK_Ma˚d⁄ü_d£
 0x06a5

	)

1130 
	#XK_Ukøöün_i
 0x06a6

	)

1131 
	#XK_Ukønün_i
 0x06a6

	)

1132 
	#XK_Ukøöün_yi
 0x06a7

	)

1133 
	#XK_Ukønün_yi
 0x06a7

	)

1134 
	#XK_Cyrûlic_je
 0x06a8

	)

1135 
	#XK_Sîbün_je
 0x06a8

	)

1136 
	#XK_Cyrûlic_lje
 0x06a9

	)

1137 
	#XK_Sîbün_lje
 0x06a9

	)

1138 
	#XK_Cyrûlic_nje
 0x06Ø

	)

1139 
	#XK_Sîbün_nje
 0x06Ø

	)

1140 
	#XK_Sîbün_tshe
 0x06ab

	)

1141 
	#XK_Ma˚d⁄ü_kje
 0x06a¯

	)

1142 
	#XK_Ukøöün_ghe_wôh_u±u∫
 0x06ad

	)

1143 
	#XK_Byñ‹ussün_sh‹tu
 0x06´

	)

1144 
	#XK_Cyrûlic_dzhe
 0x06a‡

	)

1145 
	#XK_Sîbün_dze
 0x06a‡

	)

1146 
	#XK_numîosign
 0x06b0

	)

1147 
	#XK_Sîbün_DJE
 0x06b1

	)

1148 
	#XK_Ma˚d⁄ü_GJE
 0x06b2

	)

1149 
	#XK_Cyrûlic_IO
 0x06b3

	)

1150 
	#XK_Ukøöün_IE
 0x06b4

	)

1151 
	#XK_Ukønün_JE
 0x06b4

	)

1152 
	#XK_Ma˚d⁄ü_DSE
 0x06b5

	)

1153 
	#XK_Ukøöün_I
 0x06b6

	)

1154 
	#XK_Ukønün_I
 0x06b6

	)

1155 
	#XK_Ukøöün_YI
 0x06b7

	)

1156 
	#XK_Ukønün_YI
 0x06b7

	)

1157 
	#XK_Cyrûlic_JE
 0x06b8

	)

1158 
	#XK_Sîbün_JE
 0x06b8

	)

1159 
	#XK_Cyrûlic_LJE
 0x06b9

	)

1160 
	#XK_Sîbün_LJE
 0x06b9

	)

1161 
	#XK_Cyrûlic_NJE
 0x06b®

	)

1162 
	#XK_Sîbün_NJE
 0x06b®

	)

1163 
	#XK_Sîbün_TSHE
 0x06bb

	)

1164 
	#XK_Ma˚d⁄ü_KJE
 0x06b¯

	)

1165 
	#XK_Ukøöün_GHE_WITH_UPTURN
 0x06bd

	)

1166 
	#XK_Byñ‹ussün_SHORTU
 0x06bê

	)

1167 
	#XK_Cyrûlic_DZHE
 0x06b‡

	)

1168 
	#XK_Sîbün_DZE
 0x06b‡

	)

1169 
	#XK_Cyrûlic_yu
 0x06c0

	)

1170 
	#XK_Cyrûlic_a
 0x06c1

	)

1171 
	#XK_Cyrûlic_be
 0x06c2

	)

1172 
	#XK_Cyrûlic_t£
 0x06c3

	)

1173 
	#XK_Cyrûlic_de
 0x06c4

	)

1174 
	#XK_Cyrûlic_õ
 0x06c5

	)

1175 
	#XK_Cyrûlic_ef
 0x06c6

	)

1176 
	#XK_Cyrûlic_ghe
 0x06c7

	)

1177 
	#XK_Cyrûlic_ha
 0x06c8

	)

1178 
	#XK_Cyrûlic_i
 0x06c9

	)

1179 
	#XK_Cyrûlic_sh‹ti
 0x06ˇ

	)

1180 
	#XK_Cyrûlic_ka
 0x06cb

	)

1181 
	#XK_Cyrûlic_ñ
 0x06c¯

	)

1182 
	#XK_Cyrûlic_em
 0x06cd

	)

1183 
	#XK_Cyrûlic_í
 0x06˚

	)

1184 
	#XK_Cyrûlic_o
 0x06c‡

	)

1185 
	#XK_Cyrûlic_≥
 0x06d0

	)

1186 
	#XK_Cyrûlic_ya
 0x06d1

	)

1187 
	#XK_Cyrûlic_î
 0x06d2

	)

1188 
	#XK_Cyrûlic_es
 0x06d3

	)

1189 
	#XK_Cyrûlic_ã
 0x06d4

	)

1190 
	#XK_Cyrûlic_u
 0x06d5

	)

1191 
	#XK_Cyrûlic_zhe
 0x06d6

	)

1192 
	#XK_Cyrûlic_ve
 0x06d7

	)

1193 
	#XK_Cyrûlic_so·sign
 0x06d8

	)

1194 
	#XK_Cyrûlic_yîu
 0x06d9

	)

1195 
	#XK_Cyrûlic_ze
 0x06d®

	)

1196 
	#XK_Cyrûlic_sha
 0x06db

	)

1197 
	#XK_Cyrûlic_e
 0x06d¯

	)

1198 
	#XK_Cyrûlic_shcha
 0x06dd

	)

1199 
	#XK_Cyrûlic_che
 0x06dê

	)

1200 
	#XK_Cyrûlic_h¨dsign
 0x06d‡

	)

1201 
	#XK_Cyrûlic_YU
 0x06e0

	)

1202 
	#XK_Cyrûlic_A
 0x06e1

	)

1203 
	#XK_Cyrûlic_BE
 0x06e2

	)

1204 
	#XK_Cyrûlic_TSE
 0x06e3

	)

1205 
	#XK_Cyrûlic_DE
 0x06e4

	)

1206 
	#XK_Cyrûlic_IE
 0x06e5

	)

1207 
	#XK_Cyrûlic_EF
 0x06e6

	)

1208 
	#XK_Cyrûlic_GHE
 0x06e7

	)

1209 
	#XK_Cyrûlic_HA
 0x06e8

	)

1210 
	#XK_Cyrûlic_I
 0x06e9

	)

1211 
	#XK_Cyrûlic_SHORTI
 0x06ó

	)

1212 
	#XK_Cyrûlic_KA
 0x06eb

	)

1213 
	#XK_Cyrûlic_EL
 0x06e¯

	)

1214 
	#XK_Cyrûlic_EM
 0x06ed

	)

1215 
	#XK_Cyrûlic_EN
 0x06ì

	)

1216 
	#XK_Cyrûlic_O
 0x06e‡

	)

1217 
	#XK_Cyrûlic_PE
 0x06f0

	)

1218 
	#XK_Cyrûlic_YA
 0x06f1

	)

1219 
	#XK_Cyrûlic_ER
 0x06f2

	)

1220 
	#XK_Cyrûlic_ES
 0x06f3

	)

1221 
	#XK_Cyrûlic_TE
 0x06f4

	)

1222 
	#XK_Cyrûlic_U
 0x06f5

	)

1223 
	#XK_Cyrûlic_ZHE
 0x06f6

	)

1224 
	#XK_Cyrûlic_VE
 0x06f7

	)

1225 
	#XK_Cyrûlic_SOFTSIGN
 0x06f8

	)

1226 
	#XK_Cyrûlic_YERU
 0x06f9

	)

1227 
	#XK_Cyrûlic_ZE
 0x06Á

	)

1228 
	#XK_Cyrûlic_SHA
 0x06fb

	)

1229 
	#XK_Cyrûlic_E
 0x06f¯

	)

1230 
	#XK_Cyrûlic_SHCHA
 0x06fd

	)

1231 
	#XK_Cyrûlic_CHE
 0x06„

	)

1232 
	#XK_Cyrûlic_HARDSIGN
 0x06f‡

	)

1241 #ifde‡
XK_GREEK


1242 
	#XK_Gªek_ALPHAac˚¡
 0x07a1

	)

1243 
	#XK_Gªek_EPSILONac˚¡
 0x07a2

	)

1244 
	#XK_Gªek_ETAac˚¡
 0x07a3

	)

1245 
	#XK_Gªek_IOTAac˚¡
 0x07a4

	)

1246 
	#XK_Gªek_IOTAdõªsis
 0x07a5

	)

1247 
	#XK_Gªek_IOTAdüîesis
 0x07a5

	)

1248 
	#XK_Gªek_OMICRONac˚¡
 0x07a7

	)

1249 
	#XK_Gªek_UPSILONac˚¡
 0x07a8

	)

1250 
	#XK_Gªek_UPSILONdõªsis
 0x07a9

	)

1251 
	#XK_Gªek_OMEGAac˚¡
 0x07ab

	)

1252 
	#XK_Gªek_ac˚¡dõªsis
 0x07´

	)

1253 
	#XK_Gªek_h‹izb¨
 0x07a‡

	)

1254 
	#XK_Gªek_ÆphØc˚¡
 0x07b1

	)

1255 
	#XK_Gªek_ïsû⁄ac˚¡
 0x07b2

	)

1256 
	#XK_Gªek_ëØc˚¡
 0x07b3

	)

1257 
	#XK_Gªek_iŸØc˚¡
 0x07b4

	)

1258 
	#XK_Gªek_iŸadõªsis
 0x07b5

	)

1259 
	#XK_Gªek_iŸØc˚¡dõªsis
 0x07b6

	)

1260 
	#XK_Gªek_omi¸⁄ac˚¡
 0x07b7

	)

1261 
	#XK_Gªek_upsû⁄ac˚¡
 0x07b8

	)

1262 
	#XK_Gªek_upsû⁄dõªsis
 0x07b9

	)

1263 
	#XK_Gªek_upsû⁄ac˚¡dõªsis
 0x07b®

	)

1264 
	#XK_Gªek_omegØc˚¡
 0x07bb

	)

1265 
	#XK_Gªek_ALPHA
 0x07c1

	)

1266 
	#XK_Gªek_BETA
 0x07c2

	)

1267 
	#XK_Gªek_GAMMA
 0x07c3

	)

1268 
	#XK_Gªek_DELTA
 0x07c4

	)

1269 
	#XK_Gªek_EPSILON
 0x07c5

	)

1270 
	#XK_Gªek_ZETA
 0x07c6

	)

1271 
	#XK_Gªek_ETA
 0x07c7

	)

1272 
	#XK_Gªek_THETA
 0x07c8

	)

1273 
	#XK_Gªek_IOTA
 0x07c9

	)

1274 
	#XK_Gªek_KAPPA
 0x07ˇ

	)

1275 
	#XK_Gªek_LAMDA
 0x07cb

	)

1276 
	#XK_Gªek_LAMBDA
 0x07cb

	)

1277 
	#XK_Gªek_MU
 0x07c¯

	)

1278 
	#XK_Gªek_NU
 0x07cd

	)

1279 
	#XK_Gªek_XI
 0x07˚

	)

1280 
	#XK_Gªek_OMICRON
 0x07c‡

	)

1281 
	#XK_Gªek_PI
 0x07d0

	)

1282 
	#XK_Gªek_RHO
 0x07d1

	)

1283 
	#XK_Gªek_SIGMA
 0x07d2

	)

1284 
	#XK_Gªek_TAU
 0x07d4

	)

1285 
	#XK_Gªek_UPSILON
 0x07d5

	)

1286 
	#XK_Gªek_PHI
 0x07d6

	)

1287 
	#XK_Gªek_CHI
 0x07d7

	)

1288 
	#XK_Gªek_PSI
 0x07d8

	)

1289 
	#XK_Gªek_OMEGA
 0x07d9

	)

1290 
	#XK_Gªek_Æpha
 0x07e1

	)

1291 
	#XK_Gªek_bëa
 0x07e2

	)

1292 
	#XK_Gªek_gamma
 0x07e3

	)

1293 
	#XK_Gªek_dñè
 0x07e4

	)

1294 
	#XK_Gªek_ïsû⁄
 0x07e5

	)

1295 
	#XK_Gªek_zëa
 0x07e6

	)

1296 
	#XK_Gªek_ëa
 0x07e7

	)

1297 
	#XK_Gªek_thëa
 0x07e8

	)

1298 
	#XK_Gªek_iŸa
 0x07e9

	)

1299 
	#XK_Gªek_k≠∑
 0x07ó

	)

1300 
	#XK_Gªek_œmda
 0x07eb

	)

1301 
	#XK_Gªek_œmbda
 0x07eb

	)

1302 
	#XK_Gªek_mu
 0x07e¯

	)

1303 
	#XK_Gªek_nu
 0x07ed

	)

1304 
	#XK_Gªek_xi
 0x07ì

	)

1305 
	#XK_Gªek_omi¸⁄
 0x07e‡

	)

1306 
	#XK_Gªek_pi
 0x07f0

	)

1307 
	#XK_Gªek_rho
 0x07f1

	)

1308 
	#XK_Gªek_sigma
 0x07f2

	)

1309 
	#XK_Gªek_föÆsmÆlsigma
 0x07f3

	)

1310 
	#XK_Gªek_èu
 0x07f4

	)

1311 
	#XK_Gªek_upsû⁄
 0x07f5

	)

1312 
	#XK_Gªek_phi
 0x07f6

	)

1313 
	#XK_Gªek_chi
 0x07f7

	)

1314 
	#XK_Gªek_psi
 0x07f8

	)

1315 
	#XK_Gªek_omega
 0x07f9

	)

1316 
	#XK_Gªek_swôch
 0xff7ê

	)

1325 #ifde‡
XK_TECHNICAL


1326 
	#XK_À·ødiˇl
 0x08a1

	)

1327 
	#XK_t›À·ødiˇl
 0x08a2

	)

1328 
	#XK_h‹izc⁄√˘‹
 0x08a3

	)

1329 
	#XK_t›öãgøl
 0x08a4

	)

1330 
	#XK_bŸöãgøl
 0x08a5

	)

1331 
	#XK_vîtc⁄√˘‹
 0x08a6

	)

1332 
	#XK_t›À·sqbøckë
 0x08a7

	)

1333 
	#XK_bŸÀ·sqbøckë
 0x08a8

	)

1334 
	#XK_t›rightsqbøckë
 0x08a9

	)

1335 
	#XK_bŸrightsqbøckë
 0x08Ø

	)

1336 
	#XK_t›À·∑ªns
 0x08ab

	)

1337 
	#XK_bŸÀ·∑ªns
 0x08a¯

	)

1338 
	#XK_t›righç¨ís
 0x08ad

	)

1339 
	#XK_bŸrighç¨ís
 0x08´

	)

1340 
	#XK_À·middÀcuæybø˚
 0x08a‡

	)

1341 
	#XK_rightmiddÀcuæybø˚
 0x08b0

	)

1342 
	#XK_t›À·summ©i⁄
 0x08b1

	)

1343 
	#XK_bŸÀ·summ©i⁄
 0x08b2

	)

1344 
	#XK_t›vîtsumm©i⁄c⁄√˘‹
 0x08b3

	)

1345 
	#XK_bŸvîtsumm©i⁄c⁄√˘‹
 0x08b4

	)

1346 
	#XK_t›rightsumm©i⁄
 0x08b5

	)

1347 
	#XK_bŸrightsumm©i⁄
 0x08b6

	)

1348 
	#XK_rightmiddÀsumm©i⁄
 0x08b7

	)

1349 
	#XK_Às°h™equÆ
 0x08b¯

	)

1350 
	#XK_nŸequÆ
 0x08bd

	)

1351 
	#XK_gª©îth™equÆ
 0x08bê

	)

1352 
	#XK_öãgøl
 0x08b‡

	)

1353 
	#XK_thîef‹e
 0x08c0

	)

1354 
	#XK_v¨üti⁄
 0x08c1

	)

1355 
	#XK_öföôy
 0x08c2

	)

1356 
	#XK_«bœ
 0x08c5

	)

1357 
	#XK_≠¥oxim©e
 0x08c8

	)

1358 
	#XK_simû¨equÆ
 0x08c9

	)

1359 
	#XK_if⁄lyif
 0x08cd

	)

1360 
	#XK_im∂õs
 0x08˚

	)

1361 
	#XK_idítiˇl
 0x08c‡

	)

1362 
	#XK_ødiˇl
 0x08d6

	)

1363 
	#XK_ö˛udedö
 0x08d®

	)

1364 
	#XK_ö˛udes
 0x08db

	)

1365 
	#XK_öãr£˘i⁄
 0x08d¯

	)

1366 
	#XK_uni⁄
 0x08dd

	)

1367 
	#XK_logiˇœnd
 0x08dê

	)

1368 
	#XK_logiˇl‹
 0x08d‡

	)

1369 
	#XK_∑πüldîiv©ive
 0x08e‡

	)

1370 
	#XK_fun˘i⁄
 0x08f6

	)

1371 
	#XK_À·¨row
 0x08fb

	)

1372 
	#XK_u∑ºow
 0x08f¯

	)

1373 
	#XK_righèºow
 0x08fd

	)

1374 
	#XK_dow«ºow
 0x08„

	)

1383 #ifde‡
XK_SPECIAL


1384 
	#XK_bœnk
 0x09df

	)

1385 
	#XK_sﬁiddüm⁄d
 0x09e0

	)

1386 
	#XK_checkîbﬂrd
 0x09e1

	)

1387 
	#XK_ht
 0x09e2

	)

1388 
	#XK_ff
 0x09e3

	)

1389 
	#XK_¸
 0x09e4

	)

1390 
	#XK_lf
 0x09e5

	)

1391 
	#XK_∆
 0x09e8

	)

1392 
	#XK_vt
 0x09e9

	)

1393 
	#XK_lowrightc‹√r
 0x09ó

	)

1394 
	#XK_u¥ightc‹√r
 0x09eb

	)

1395 
	#XK_u∂e·c‹√r
 0x09e¯

	)

1396 
	#XK_lowÀ·c‹√r
 0x09ed

	)

1397 
	#XK_¸ossöglöes
 0x09ì

	)

1398 
	#XK_h‹izlöesˇn1
 0x09e‡

	)

1399 
	#XK_h‹izlöesˇn3
 0x09f0

	)

1400 
	#XK_h‹izlöesˇn5
 0x09f1

	)

1401 
	#XK_h‹izlöesˇn7
 0x09f2

	)

1402 
	#XK_h‹izlöesˇn9
 0x09f3

	)

1403 
	#XK_À·t
 0x09f4

	)

1404 
	#XK_righâ
 0x09f5

	)

1405 
	#XK_bŸt
 0x09f6

	)

1406 
	#XK_t›t
 0x09f7

	)

1407 
	#XK_vîtb¨
 0x09f8

	)

1417 #ifde‡
XK_PUBLISHING


1418 
	#XK_em•a˚
 0x0Ø1

	)

1419 
	#XK_í•a˚
 0x0Ø2

	)

1420 
	#XK_em3•a˚
 0x0Ø3

	)

1421 
	#XK_em4•a˚
 0x0Ø4

	)

1422 
	#XK_digô•a˚
 0x0Ø5

	)

1423 
	#XK_pun˘•a˚
 0x0Ø6

	)

1424 
	#XK_thö•a˚
 0x0Ø7

	)

1425 
	#XK_haú•a˚
 0x0Ø8

	)

1426 
	#XK_emdash
 0x0Ø9

	)

1427 
	#XK_ídash
 0x0Ø®

	)

1428 
	#XK_signifbœnk
 0x0Ø¯

	)

1429 
	#XK_ñlùsis
 0x0Øê

	)

1430 
	#XK_doubba£löedŸ
 0x0Ø‡

	)

1431 
	#XK_⁄ëhúd
 0x0ab0

	)

1432 
	#XK_twŸhúds
 0x0ab1

	)

1433 
	#XK_⁄efi·h
 0x0ab2

	)

1434 
	#XK_twofi·hs
 0x0ab3

	)

1435 
	#XK_thªefi·hs
 0x0ab4

	)

1436 
	#XK_fourfi·hs
 0x0ab5

	)

1437 
	#XK_⁄esixth
 0x0ab6

	)

1438 
	#XK_fivesixths
 0x0ab7

	)

1439 
	#XK_ˇªof
 0x0ab8

	)

1440 
	#XK_figdash
 0x0abb

	)

1441 
	#XK_À·™gÀbøckë
 0x0ab¯

	)

1442 
	#XK_decimÆpoöt
 0x0abd

	)

1443 
	#XK_righèngÀbøckë
 0x0abê

	)

1444 
	#XK_m¨kî
 0x0abf

	)

1445 
	#XK_⁄ìighth
 0x0ac3

	)

1446 
	#XK_thªìighths
 0x0ac4

	)

1447 
	#XK_fivìighths
 0x0ac5

	)

1448 
	#XK_£víeighths
 0x0ac6

	)

1449 
	#XK_åadem¨k
 0x0ac9

	)

1450 
	#XK_sig«tuªm¨k
 0x0aˇ

	)

1451 
	#XK_åadem¨köcú˛e
 0x0acb

	)

1452 
	#XK_À·›íåüngÀ
 0x0ac¯

	)

1453 
	#XK_right›íåüngÀ
 0x0acd

	)

1454 
	#XK_em›ícú˛e
 0x0a˚

	)

1455 
	#XK_em›íª˘™gÀ
 0x0ac‡

	)

1456 
	#XK_À·sögÀquŸem¨k
 0x0ad0

	)

1457 
	#XK_rightsögÀquŸem¨k
 0x0ad1

	)

1458 
	#XK_À·doubÀquŸem¨k
 0x0ad2

	)

1459 
	#XK_rightdoubÀquŸem¨k
 0x0ad3

	)

1460 
	#XK_¥es¸ùti⁄
 0x0ad4

	)

1461 
	#XK_möuãs
 0x0ad6

	)

1462 
	#XK_£c⁄ds
 0x0ad7

	)

1463 
	#XK_œtö¸oss
 0x0ad9

	)

1464 
	#XK_hexagøm
 0x0ada

	)

1465 
	#XK_fûÀdª˘buŒë
 0x0adb

	)

1466 
	#XK_fûÀdÀ·åibuŒë
 0x0ad¯

	)

1467 
	#XK_fûÀdrighâribuŒë
 0x0add

	)

1468 
	#XK_emfûÀdcú˛e
 0x0adê

	)

1469 
	#XK_emfûÀdª˘
 0x0ad‡

	)

1470 
	#XK_í›ícúcbuŒë
 0x0´0

	)

1471 
	#XK_í›ísqu¨ebuŒë
 0x0´1

	)

1472 
	#XK_›íª˘buŒë
 0x0´2

	)

1473 
	#XK_›íåibuŒëup
 0x0´3

	)

1474 
	#XK_›íåibuŒëdown
 0x0´4

	)

1475 
	#XK_›í°¨
 0x0´5

	)

1476 
	#XK_ífûÀdcúcbuŒë
 0x0´6

	)

1477 
	#XK_ífûÀdsqbuŒë
 0x0´7

	)

1478 
	#XK_fûÀdåibuŒëup
 0x0´8

	)

1479 
	#XK_fûÀdåibuŒëdown
 0x0´9

	)

1480 
	#XK_À·poöãr
 0x0´®

	)

1481 
	#XK_righçoöãr
 0x0´b

	)

1482 
	#XK_˛ub
 0x0´¯

	)

1483 
	#XK_düm⁄d
 0x0´d

	)

1484 
	#XK_hóπ
 0x0´ê

	)

1485 
	#XK_mÆã£¸oss
 0x0af0

	)

1486 
	#XK_daggî
 0x0af1

	)

1487 
	#XK_doubÀdaggî
 0x0af2

	)

1488 
	#XK_checkm¨k
 0x0af3

	)

1489 
	#XK_bÆlŸ¸oss
 0x0af4

	)

1490 
	#XK_musiˇlsh¨p
 0x0af5

	)

1491 
	#XK_musiˇlÊ©
 0x0af6

	)

1492 
	#XK_mÆesymbﬁ
 0x0af7

	)

1493 
	#XK_„mÆesymbﬁ
 0x0af8

	)

1494 
	#XK_ãÀph⁄e
 0x0af9

	)

1495 
	#XK_ãÀph⁄îec‹dî
 0x0aÁ

	)

1496 
	#XK_ph⁄ogøphc›yright
 0x0afb

	)

1497 
	#XK_ˇªt
 0x0af¯

	)

1498 
	#XK_sögÀlowquŸem¨k
 0x0afd

	)

1499 
	#XK_doubÀlowquŸem¨k
 0x0a„

	)

1500 
	#XK_curs‹
 0x0aff

	)

1508 #ifde‡
XK_APL


1509 
	#XK_À·ˇªt
 0x0ba3

	)

1510 
	#XK_rightˇªt
 0x0ba6

	)

1511 
	#XK_downˇªt
 0x0ba8

	)

1512 
	#XK_upˇªt
 0x0ba9

	)

1513 
	#XK_ovîb¨
 0x0bc0

	)

1514 
	#XK_dow¡ack
 0x0bc2

	)

1515 
	#XK_upsh€
 0x0bc3

	)

1516 
	#XK_down°ûe
 0x0bc4

	)

1517 
	#XK_undîb¨
 0x0bc6

	)

1518 
	#XK_jŸ
 0x0bˇ

	)

1519 
	#XK_quad
 0x0bc¯

	)

1520 
	#XK_u±ack
 0x0b˚

	)

1521 
	#XK_cú˛e
 0x0bc‡

	)

1522 
	#XK_up°ûe
 0x0bd3

	)

1523 
	#XK_downsh€
 0x0bd6

	)

1524 
	#XK_rightsh€
 0x0bd8

	)

1525 
	#XK_À·sh€
 0x0bd®

	)

1526 
	#XK_À·èck
 0x0bd¯

	)

1527 
	#XK_righâack
 0x0bf¯

	)

1535 #ifde‡
XK_HEBREW


1536 
	#XK_hebªw_doubÀlowlöe
 0x0cd‡

	)

1537 
	#XK_hebªw_Æïh
 0x0˚0

	)

1538 
	#XK_hebªw_bë
 0x0˚1

	)

1539 
	#XK_hebªw_bëh
 0x0˚1

	)

1540 
	#XK_hebªw_gimñ
 0x0˚2

	)

1541 
	#XK_hebªw_gimmñ
 0x0˚2

	)

1542 
	#XK_hebªw_dÆë
 0x0˚3

	)

1543 
	#XK_hebªw_dÆëh
 0x0˚3

	)

1544 
	#XK_hebªw_he
 0x0˚4

	)

1545 
	#XK_hebªw_waw
 0x0˚5

	)

1546 
	#XK_hebªw_zaö
 0x0˚6

	)

1547 
	#XK_hebªw_zayö
 0x0˚6

	)

1548 
	#XK_hebªw_chë
 0x0˚7

	)

1549 
	#XK_hebªw_hë
 0x0˚7

	)

1550 
	#XK_hebªw_ãt
 0x0˚8

	)

1551 
	#XK_hebªw_ãth
 0x0˚8

	)

1552 
	#XK_hebªw_yod
 0x0˚9

	)

1553 
	#XK_hebªw_föÆk≠h
 0x0˚®

	)

1554 
	#XK_hebªw_k≠h
 0x0˚b

	)

1555 
	#XK_hebªw_œmed
 0x0˚¯

	)

1556 
	#XK_hebªw_föÆmem
 0x0˚d

	)

1557 
	#XK_hebªw_mem
 0x0˚ê

	)

1558 
	#XK_hebªw_föÆnun
 0x0˚‡

	)

1559 
	#XK_hebªw_nun
 0x0cf0

	)

1560 
	#XK_hebªw_ßmech
 0x0cf1

	)

1561 
	#XK_hebªw_ßmekh
 0x0cf1

	)

1562 
	#XK_hebªw_ayö
 0x0cf2

	)

1563 
	#XK_hebªw_föÆ≥
 0x0cf3

	)

1564 
	#XK_hebªw_≥
 0x0cf4

	)

1565 
	#XK_hebªw_föÆzade
 0x0cf5

	)

1566 
	#XK_hebªw_föÆzadi
 0x0cf5

	)

1567 
	#XK_hebªw_zade
 0x0cf6

	)

1568 
	#XK_hebªw_zadi
 0x0cf6

	)

1569 
	#XK_hebªw_q›h
 0x0cf7

	)

1570 
	#XK_hebªw_kuf
 0x0cf7

	)

1571 
	#XK_hebªw_ªsh
 0x0cf8

	)

1572 
	#XK_hebªw_shö
 0x0cf9

	)

1573 
	#XK_hebªw_èw
 0x0cÁ

	)

1574 
	#XK_hebªw_èf
 0x0cÁ

	)

1575 
	#XK_Hebªw_swôch
 0xff7ê

	)

1583 #ifde‡
XK_THAI


1584 
	#XK_Thai_kokai
 0x0da1

	)

1585 
	#XK_Thai_khokhai
 0x0da2

	)

1586 
	#XK_Thai_khokhu©
 0x0da3

	)

1587 
	#XK_Thai_khokhwai
 0x0da4

	)

1588 
	#XK_Thai_khokh⁄
 0x0da5

	)

1589 
	#XK_Thai_kh‹akh™g
 0x0da6

	)

1590 
	#XK_Thai_ng⁄gu
 0x0da7

	)

1591 
	#XK_Thai_choch™
 0x0da8

	)

1592 
	#XK_Thai_chochög
 0x0da9

	)

1593 
	#XK_Thai_choch™g
 0x0dØ

	)

1594 
	#XK_Thai_soso
 0x0dab

	)

1595 
	#XK_Thai_choch€
 0x0da¯

	)

1596 
	#XK_Thai_yoyög
 0x0dad

	)

1597 
	#XK_Thai_dochada
 0x0d´

	)

1598 
	#XK_Thai_t›©ak
 0x0da‡

	)

1599 
	#XK_Thai_thŸh™
 0x0db0

	)

1600 
	#XK_Thai_th⁄™gm⁄tho
 0x0db1

	)

1601 
	#XK_Thai_th›huthao
 0x0db2

	)

1602 
	#XK_Thai_n⁄í
 0x0db3

	)

1603 
	#XK_Thai_dodek
 0x0db4

	)

1604 
	#XK_Thai_tŸao
 0x0db5

	)

1605 
	#XK_Thai_thŸhung
 0x0db6

	)

1606 
	#XK_Thai_thŸhah™
 0x0db7

	)

1607 
	#XK_Thai_thŸh⁄g
 0x0db8

	)

1608 
	#XK_Thai_n⁄u
 0x0db9

	)

1609 
	#XK_Thai_bobaimai
 0x0db®

	)

1610 
	#XK_Thai_p›œ
 0x0dbb

	)

1611 
	#XK_Thai_ph›hung
 0x0db¯

	)

1612 
	#XK_Thai_foÁ
 0x0dbd

	)

1613 
	#XK_Thai_ph›h™
 0x0dbê

	)

1614 
	#XK_Thai_foÁn
 0x0db‡

	)

1615 
	#XK_Thai_phoßmphao
 0x0dc0

	)

1616 
	#XK_Thai_moma
 0x0dc1

	)

1617 
	#XK_Thai_yoyak
 0x0dc2

	)

1618 
	#XK_Thai_r‹ua
 0x0dc3

	)

1619 
	#XK_Thai_ru
 0x0dc4

	)

1620 
	#XK_Thai_lﬁög
 0x0dc5

	)

1621 
	#XK_Thai_lu
 0x0dc6

	)

1622 
	#XK_Thai_wow´n
 0x0dc7

	)

1623 
	#XK_Thai_soßœ
 0x0dc8

	)

1624 
	#XK_Thai_s‹usi
 0x0dc9

	)

1625 
	#XK_Thai_sosua
 0x0dˇ

	)

1626 
	#XK_Thai_hohù
 0x0dcb

	)

1627 
	#XK_Thai_lochuœ
 0x0dc¯

	)

1628 
	#XK_Thai_ﬂng
 0x0dcd

	)

1629 
	#XK_Thai_h⁄okhuk
 0x0d˚

	)

1630 
	#XK_Thai_∑iy™noi
 0x0dc‡

	)

1631 
	#XK_Thai_ßøa
 0x0dd0

	)

1632 
	#XK_Thai_maih™ak©
 0x0dd1

	)

1633 
	#XK_Thai_ßøØ
 0x0dd2

	)

1634 
	#XK_Thai_ßøam
 0x0dd3

	)

1635 
	#XK_Thai_ßøi
 0x0dd4

	)

1636 
	#XK_Thai_ßøii
 0x0dd5

	)

1637 
	#XK_Thai_ßøue
 0x0dd6

	)

1638 
	#XK_Thai_ßøuì
 0x0dd7

	)

1639 
	#XK_Thai_ßøu
 0x0dd8

	)

1640 
	#XK_Thai_ßøuu
 0x0dd9

	)

1641 
	#XK_Thai_phöthu
 0x0dd®

	)

1642 
	#XK_Thai_maih™ak©_maôho
 0x0dde

	)

1643 
	#XK_Thai_baht
 0x0dd‡

	)

1644 
	#XK_Thai_ßøe
 0x0de0

	)

1645 
	#XK_Thai_ßø´
 0x0de1

	)

1646 
	#XK_Thai_ßøo
 0x0de2

	)

1647 
	#XK_Thai_ßøaimaimu™
 0x0de3

	)

1648 
	#XK_Thai_ßøaimaimÆai
 0x0de4

	)

1649 
	#XK_Thai_œkkh™gyao
 0x0de5

	)

1650 
	#XK_Thai_maiyamok
 0x0de6

	)

1651 
	#XK_Thai_maôaikhu
 0x0de7

	)

1652 
	#XK_Thai_maõk
 0x0de8

	)

1653 
	#XK_Thai_maôho
 0x0de9

	)

1654 
	#XK_Thai_maôri
 0x0dó

	)

1655 
	#XK_Thai_maich©èwa
 0x0deb

	)

1656 
	#XK_Thai_th™thakh©
 0x0de¯

	)

1657 
	#XK_Thai_nikhahô
 0x0ded

	)

1658 
	#XK_Thai_Àksun
 0x0df0

	)

1659 
	#XK_Thai_Àknung
 0x0df1

	)

1660 
	#XK_Thai_Àks⁄g
 0x0df2

	)

1661 
	#XK_Thai_Àkßm
 0x0df3

	)

1662 
	#XK_Thai_Àksi
 0x0df4

	)

1663 
	#XK_Thai_Àkha
 0x0df5

	)

1664 
	#XK_Thai_Àkhok
 0x0df6

	)

1665 
	#XK_Thai_Àkchë
 0x0df7

	)

1666 
	#XK_Thai_Àk∑ë
 0x0df8

	)

1667 
	#XK_Thai_Àkkao
 0x0df9

	)

1675 #ifde‡
XK_KOREAN


1677 
	#XK_H™gul
 0xff31

	)

1678 
	#XK_H™gul_Sèπ
 0xff32

	)

1679 
	#XK_H™gul_End
 0xff33

	)

1680 
	#XK_H™gul_H™ja
 0xff34

	)

1681 
	#XK_H™gul_Jamo
 0xff35

	)

1682 
	#XK_H™gul_Romaja
 0xff36

	)

1683 
	#XK_H™gul_Codeöput
 0xff37

	)

1684 
	#XK_H™gul_Je⁄ja
 0xff38

	)

1685 
	#XK_H™gul_B™ja
 0xff39

	)

1686 
	#XK_H™gul_PªH™ja
 0xff3®

	)

1687 
	#XK_H™gul_Po°H™ja
 0xff3b

	)

1688 
	#XK_H™gul_SögÀC™did©e
 0xff3¯

	)

1689 
	#XK_H™gul_Mu…ùÀC™did©e
 0xff3d

	)

1690 
	#XK_H™gul_PªviousC™did©e
 0xff3ê

	)

1691 
	#XK_H™gul_S≥cül
 0xff3‡

	)

1692 
	#XK_H™gul_swôch
 0xff7ê

	)

1695 
	#XK_H™gul_Kiyeog
 0x0ó1

	)

1696 
	#XK_H™gul_SßngKiyeog
 0x0ó2

	)

1697 
	#XK_H™gul_KiyeogSios
 0x0ó3

	)

1698 
	#XK_H™gul_Nõun
 0x0ó4

	)

1699 
	#XK_H™gul_NõunJõuj
 0x0ó5

	)

1700 
	#XK_H™gul_NõunHõuh
 0x0ó6

	)

1701 
	#XK_H™gul_Dikeud
 0x0ó7

	)

1702 
	#XK_H™gul_SßngDikeud
 0x0ó8

	)

1703 
	#XK_H™gul_Rõul
 0x0ó9

	)

1704 
	#XK_H™gul_RõulKiyeog
 0x0óa

	)

1705 
	#XK_H™gul_RõulMõum
 0x0ób

	)

1706 
	#XK_H™gul_RõulPõub
 0x0óc

	)

1707 
	#XK_H™gul_RõulSios
 0x0ód

	)

1708 
	#XK_H™gul_RõulTõut
 0x0óe

	)

1709 
	#XK_H™gul_RõulPhõuf
 0x0óf

	)

1710 
	#XK_H™gul_RõulHõuh
 0x0eb0

	)

1711 
	#XK_H™gul_Mõum
 0x0eb1

	)

1712 
	#XK_H™gul_Põub
 0x0eb2

	)

1713 
	#XK_H™gul_SßngPõub
 0x0eb3

	)

1714 
	#XK_H™gul_PõubSios
 0x0eb4

	)

1715 
	#XK_H™gul_Sios
 0x0eb5

	)

1716 
	#XK_H™gul_SßngSios
 0x0eb6

	)

1717 
	#XK_H™gul_Ieung
 0x0eb7

	)

1718 
	#XK_H™gul_Jõuj
 0x0eb8

	)

1719 
	#XK_H™gul_SßngJõuj
 0x0eb9

	)

1720 
	#XK_H™gul_Cõuc
 0x0eba

	)

1721 
	#XK_H™gul_Khõuq
 0x0ebb

	)

1722 
	#XK_H™gul_Tõut
 0x0ebc

	)

1723 
	#XK_H™gul_Phõuf
 0x0ebd

	)

1724 
	#XK_H™gul_Hõuh
 0x0ebe

	)

1727 
	#XK_H™gul_A
 0x0ebf

	)

1728 
	#XK_H™gul_AE
 0x0ec0

	)

1729 
	#XK_H™gul_YA
 0x0ec1

	)

1730 
	#XK_H™gul_YAE
 0x0ec2

	)

1731 
	#XK_H™gul_EO
 0x0ec3

	)

1732 
	#XK_H™gul_E
 0x0ec4

	)

1733 
	#XK_H™gul_YEO
 0x0ec5

	)

1734 
	#XK_H™gul_YE
 0x0ec6

	)

1735 
	#XK_H™gul_O
 0x0ec7

	)

1736 
	#XK_H™gul_WA
 0x0ec8

	)

1737 
	#XK_H™gul_WAE
 0x0ec9

	)

1738 
	#XK_H™gul_OE
 0x0eˇ

	)

1739 
	#XK_H™gul_YO
 0x0ecb

	)

1740 
	#XK_H™gul_U
 0x0ecc

	)

1741 
	#XK_H™gul_WEO
 0x0ecd

	)

1742 
	#XK_H™gul_WE
 0x0e˚

	)

1743 
	#XK_H™gul_WI
 0x0ecf

	)

1744 
	#XK_H™gul_YU
 0x0ed0

	)

1745 
	#XK_H™gul_EU
 0x0ed1

	)

1746 
	#XK_H™gul_YI
 0x0ed2

	)

1747 
	#XK_H™gul_I
 0x0ed3

	)

1750 
	#XK_H™gul_J_Kiyeog
 0x0ed4

	)

1751 
	#XK_H™gul_J_SßngKiyeog
 0x0ed5

	)

1752 
	#XK_H™gul_J_KiyeogSios
 0x0ed6

	)

1753 
	#XK_H™gul_J_Nõun
 0x0ed7

	)

1754 
	#XK_H™gul_J_NõunJõuj
 0x0ed8

	)

1755 
	#XK_H™gul_J_NõunHõuh
 0x0ed9

	)

1756 
	#XK_H™gul_J_Dikeud
 0x0eda

	)

1757 
	#XK_H™gul_J_Rõul
 0x0edb

	)

1758 
	#XK_H™gul_J_RõulKiyeog
 0x0edc

	)

1759 
	#XK_H™gul_J_RõulMõum
 0x0edd

	)

1760 
	#XK_H™gul_J_RõulPõub
 0x0ede

	)

1761 
	#XK_H™gul_J_RõulSios
 0x0edf

	)

1762 
	#XK_H™gul_J_RõulTõut
 0x0ì0

	)

1763 
	#XK_H™gul_J_RõulPhõuf
 0x0ì1

	)

1764 
	#XK_H™gul_J_RõulHõuh
 0x0ì2

	)

1765 
	#XK_H™gul_J_Mõum
 0x0ì3

	)

1766 
	#XK_H™gul_J_Põub
 0x0ì4

	)

1767 
	#XK_H™gul_J_PõubSios
 0x0ì5

	)

1768 
	#XK_H™gul_J_Sios
 0x0ì6

	)

1769 
	#XK_H™gul_J_SßngSios
 0x0ì7

	)

1770 
	#XK_H™gul_J_Ieung
 0x0ì8

	)

1771 
	#XK_H™gul_J_Jõuj
 0x0ì9

	)

1772 
	#XK_H™gul_J_Cõuc
 0x0ìa

	)

1773 
	#XK_H™gul_J_Khõuq
 0x0ìb

	)

1774 
	#XK_H™gul_J_Tõut
 0x0ìc

	)

1775 
	#XK_H™gul_J_Phõuf
 0x0ìd

	)

1776 
	#XK_H™gul_J_Hõuh
 0x0ìe

	)

1779 
	#XK_H™gul_RõulYe‹öHõuh
 0x0ìf

	)

1780 
	#XK_H™gul_Sunkye⁄geumMõum
 0x0ef0

	)

1781 
	#XK_H™gul_Sunkye⁄geumPõub
 0x0ef1

	)

1782 
	#XK_H™gul_P™Sios
 0x0ef2

	)

1783 
	#XK_H™gul_KkogjiDÆröIeung
 0x0ef3

	)

1784 
	#XK_H™gul_Sunkye⁄geumPhõuf
 0x0ef4

	)

1785 
	#XK_H™gul_Ye‹öHõuh
 0x0ef5

	)

1788 
	#XK_H™gul_AøeA
 0x0ef6

	)

1789 
	#XK_H™gul_AøeAE
 0x0ef7

	)

1792 
	#XK_H™gul_J_P™Sios
 0x0ef8

	)

1793 
	#XK_H™gul_J_KkogjiDÆröIeung
 0x0ef9

	)

1794 
	#XK_H™gul_J_Ye‹öHõuh
 0x0eÁ

	)

1797 
	#XK_K‹ón_W⁄
 0x0ef‡

	)

1805 #ifde‡
XK_ARMENIAN


1806 
	#XK_Armíün_lig©uª_ew
 0x1000587

	)

1807 
	#XK_Armíün_fuŒ_°›
 0x1000589

	)

1808 
	#XK_Armíün_vîjakë
 0x1000589

	)

1809 
	#XK_Armíün_£∑øti⁄_m¨k
 0x100055d

	)

1810 
	#XK_Armíün_but
 0x100055d

	)

1811 
	#XK_Armíün_hyphí
 0x100058®

	)

1812 
	#XK_Armíün_yíèm«
 0x100058®

	)

1813 
	#XK_Armíün_ex˛am
 0x100055¯

	)

1814 
	#XK_Armíün_am™ak
 0x100055¯

	)

1815 
	#XK_Armíün_ac˚¡
 0x100055b

	)

1816 
	#XK_Armíün_shesht
 0x100055b

	)

1817 
	#XK_Armíün_que°i⁄
 0x100055ê

	)

1818 
	#XK_Armíün_∑ruyk
 0x100055ê

	)

1819 
	#XK_Armíün_AYB
 0x1000531

	)

1820 
	#XK_Armíün_ayb
 0x1000561

	)

1821 
	#XK_Armíün_BEN
 0x1000532

	)

1822 
	#XK_Armíün_bí
 0x1000562

	)

1823 
	#XK_Armíün_GIM
 0x1000533

	)

1824 
	#XK_Armíün_gim
 0x1000563

	)

1825 
	#XK_Armíün_DA
 0x1000534

	)

1826 
	#XK_Armíün_da
 0x1000564

	)

1827 
	#XK_Armíün_YECH
 0x1000535

	)

1828 
	#XK_Armíün_yech
 0x1000565

	)

1829 
	#XK_Armíün_ZA
 0x1000536

	)

1830 
	#XK_Armíün_za
 0x1000566

	)

1831 
	#XK_Armíün_E
 0x1000537

	)

1832 
	#XK_Armíün_e
 0x1000567

	)

1833 
	#XK_Armíün_AT
 0x1000538

	)

1834 
	#XK_Armíün_©
 0x1000568

	)

1835 
	#XK_Armíün_TO
 0x1000539

	)

1836 
	#XK_Armíün_to
 0x1000569

	)

1837 
	#XK_Armíün_ZHE
 0x100053®

	)

1838 
	#XK_Armíün_zhe
 0x100056®

	)

1839 
	#XK_Armíün_INI
 0x100053b

	)

1840 
	#XK_Armíün_öi
 0x100056b

	)

1841 
	#XK_Armíün_LYUN
 0x100053¯

	)

1842 
	#XK_Armíün_lyun
 0x100056¯

	)

1843 
	#XK_Armíün_KHE
 0x100053d

	)

1844 
	#XK_Armíün_khe
 0x100056d

	)

1845 
	#XK_Armíün_TSA
 0x100053ê

	)

1846 
	#XK_Armíün_tß
 0x100056ê

	)

1847 
	#XK_Armíün_KEN
 0x100053‡

	)

1848 
	#XK_Armíün_kí
 0x100056‡

	)

1849 
	#XK_Armíün_HO
 0x1000540

	)

1850 
	#XK_Armíün_ho
 0x1000570

	)

1851 
	#XK_Armíün_DZA
 0x1000541

	)

1852 
	#XK_Armíün_dza
 0x1000571

	)

1853 
	#XK_Armíün_GHAT
 0x1000542

	)

1854 
	#XK_Armíün_gh©
 0x1000572

	)

1855 
	#XK_Armíün_TCHE
 0x1000543

	)

1856 
	#XK_Armíün_tche
 0x1000573

	)

1857 
	#XK_Armíün_MEN
 0x1000544

	)

1858 
	#XK_Armíün_mí
 0x1000574

	)

1859 
	#XK_Armíün_HI
 0x1000545

	)

1860 
	#XK_Armíün_hi
 0x1000575

	)

1861 
	#XK_Armíün_NU
 0x1000546

	)

1862 
	#XK_Armíün_nu
 0x1000576

	)

1863 
	#XK_Armíün_SHA
 0x1000547

	)

1864 
	#XK_Armíün_sha
 0x1000577

	)

1865 
	#XK_Armíün_VO
 0x1000548

	)

1866 
	#XK_Armíün_vo
 0x1000578

	)

1867 
	#XK_Armíün_CHA
 0x1000549

	)

1868 
	#XK_Armíün_cha
 0x1000579

	)

1869 
	#XK_Armíün_PE
 0x100054®

	)

1870 
	#XK_Armíün_≥
 0x100057®

	)

1871 
	#XK_Armíün_JE
 0x100054b

	)

1872 
	#XK_Armíün_je
 0x100057b

	)

1873 
	#XK_Armíün_RA
 0x100054¯

	)

1874 
	#XK_Armíün_ø
 0x100057¯

	)

1875 
	#XK_Armíün_SE
 0x100054d

	)

1876 
	#XK_Armíün_£
 0x100057d

	)

1877 
	#XK_Armíün_VEV
 0x100054ê

	)

1878 
	#XK_Armíün_vev
 0x100057ê

	)

1879 
	#XK_Armíün_TYUN
 0x100054‡

	)

1880 
	#XK_Armíün_tyun
 0x100057‡

	)

1881 
	#XK_Armíün_RE
 0x1000550

	)

1882 
	#XK_Armíün_ª
 0x1000580

	)

1883 
	#XK_Armíün_TSO
 0x1000551

	)

1884 
	#XK_Armíün_tso
 0x1000581

	)

1885 
	#XK_Armíün_VYUN
 0x1000552

	)

1886 
	#XK_Armíün_vyun
 0x1000582

	)

1887 
	#XK_Armíün_PYUR
 0x1000553

	)

1888 
	#XK_Armíün_pyur
 0x1000583

	)

1889 
	#XK_Armíün_KE
 0x1000554

	)

1890 
	#XK_Armíün_ke
 0x1000584

	)

1891 
	#XK_Armíün_O
 0x1000555

	)

1892 
	#XK_Armíün_o
 0x1000585

	)

1893 
	#XK_Armíün_FE
 0x1000556

	)

1894 
	#XK_Armíün_„
 0x1000586

	)

1895 
	#XK_Armíün_≠o°r›he
 0x100055®

	)

1902 #ifde‡
XK_GEORGIAN


1903 
	#XK_Ge‹gün_™
 0x10010d0

	)

1904 
	#XK_Ge‹gün_b™
 0x10010d1

	)

1905 
	#XK_Ge‹gün_g™
 0x10010d2

	)

1906 
	#XK_Ge‹gün_d⁄
 0x10010d3

	)

1907 
	#XK_Ge‹gün_í
 0x10010d4

	)

1908 
	#XK_Ge‹gün_vö
 0x10010d5

	)

1909 
	#XK_Ge‹gün_zí
 0x10010d6

	)

1910 
	#XK_Ge‹gün_èn
 0x10010d7

	)

1911 
	#XK_Ge‹gün_ö
 0x10010d8

	)

1912 
	#XK_Ge‹gün_k™
 0x10010d9

	)

1913 
	#XK_Ge‹gün_œs
 0x10010d®

	)

1914 
	#XK_Ge‹gün_m™
 0x10010db

	)

1915 
	#XK_Ge‹gün_«r
 0x10010d¯

	)

1916 
	#XK_Ge‹gün_⁄
 0x10010dd

	)

1917 
	#XK_Ge‹gün_∑r
 0x10010dê

	)

1918 
	#XK_Ge‹gün_zh¨
 0x10010d‡

	)

1919 
	#XK_Ge‹gün_øe
 0x10010e0

	)

1920 
	#XK_Ge‹gün_ßn
 0x10010e1

	)

1921 
	#XK_Ge‹gün_èr
 0x10010e2

	)

1922 
	#XK_Ge‹gün_un
 0x10010e3

	)

1923 
	#XK_Ge‹gün_ph¨
 0x10010e4

	)

1924 
	#XK_Ge‹gün_kh¨
 0x10010e5

	)

1925 
	#XK_Ge‹gün_gh™
 0x10010e6

	)

1926 
	#XK_Ge‹gün_q¨
 0x10010e7

	)

1927 
	#XK_Ge‹gün_shö
 0x10010e8

	)

1928 
	#XK_Ge‹gün_chö
 0x10010e9

	)

1929 
	#XK_Ge‹gün_ˇn
 0x10010ó

	)

1930 
	#XK_Ge‹gün_jû
 0x10010eb

	)

1931 
	#XK_Ge‹gün_cû
 0x10010e¯

	)

1932 
	#XK_Ge‹gün_ch¨
 0x10010ed

	)

1933 
	#XK_Ge‹gün_x™
 0x10010ì

	)

1934 
	#XK_Ge‹gün_jh™
 0x10010e‡

	)

1935 
	#XK_Ge‹gün_h´
 0x10010f0

	)

1936 
	#XK_Ge‹gün_he
 0x10010f1

	)

1937 
	#XK_Ge‹gün_hõ
 0x10010f2

	)

1938 
	#XK_Ge‹gün_we
 0x10010f3

	)

1939 
	#XK_Ge‹gün_h¨
 0x10010f4

	)

1940 
	#XK_Ge‹gün_h€
 0x10010f5

	)

1941 
	#XK_Ge‹gün_fi
 0x10010f6

	)

1948 #ifde‡
XK_CAUCASUS


1950 
	#XK_XabovedŸ
 0x1001e8®

	)

1951 
	#XK_Ibªve
 0x100012¯

	)

1952 
	#XK_Z°roke
 0x10001b5

	)

1953 
	#XK_Gˇr⁄
 0x10001e6

	)

1954 
	#XK_Oˇr⁄
 0x10001d1

	)

1955 
	#XK_Ob¨ªd
 0x100019‡

	)

1956 
	#XK_xabovedŸ
 0x1001e8b

	)

1957 
	#XK_ibªve
 0x100012d

	)

1958 
	#XK_z°roke
 0x10001b6

	)

1959 
	#XK_gˇr⁄
 0x10001e7

	)

1960 
	#XK_oˇr⁄
 0x10001d2

	)

1961 
	#XK_ob¨ªd
 0x1000275

	)

1962 
	#XK_SCHWA
 0x100018‡

	)

1963 
	#XK_schwa
 0x1000259

	)

1966 
	#XK_LbñowdŸ
 0x1001e36

	)

1967 
	#XK_lbñowdŸ
 0x1001e37

	)

1974 #ifde‡
XK_VIETNAMESE


1975 
	#XK_AbñowdŸ
 0x1001ó0

	)

1976 
	#XK_abñowdŸ
 0x1001ó1

	)

1977 
	#XK_Ahook
 0x1001ó2

	)

1978 
	#XK_ahook
 0x1001ó3

	)

1979 
	#XK_AcúcumÊexacuã
 0x1001ó4

	)

1980 
	#XK_acúcumÊexacuã
 0x1001ó5

	)

1981 
	#XK_AcúcumÊexgøve
 0x1001ó6

	)

1982 
	#XK_acúcumÊexgøve
 0x1001ó7

	)

1983 
	#XK_AcúcumÊexhook
 0x1001ó8

	)

1984 
	#XK_acúcumÊexhook
 0x1001ó9

	)

1985 
	#XK_AcúcumÊextûde
 0x1001ó®

	)

1986 
	#XK_acúcumÊextûde
 0x1001ób

	)

1987 
	#XK_AcúcumÊexbñowdŸ
 0x1001ó¯

	)

1988 
	#XK_acúcumÊexbñowdŸ
 0x1001ód

	)

1989 
	#XK_Abªvócuã
 0x1001óê

	)

1990 
	#XK_abªvócuã
 0x1001ó‡

	)

1991 
	#XK_Abªvegøve
 0x1001eb0

	)

1992 
	#XK_abªvegøve
 0x1001eb1

	)

1993 
	#XK_Abªvehook
 0x1001eb2

	)

1994 
	#XK_abªvehook
 0x1001eb3

	)

1995 
	#XK_Abªvëûde
 0x1001eb4

	)

1996 
	#XK_abªvëûde
 0x1001eb5

	)

1997 
	#XK_AbªvebñowdŸ
 0x1001eb6

	)

1998 
	#XK_abªvebñowdŸ
 0x1001eb7

	)

1999 
	#XK_EbñowdŸ
 0x1001eb8

	)

2000 
	#XK_ebñowdŸ
 0x1001eb9

	)

2001 
	#XK_Ehook
 0x1001eb®

	)

2002 
	#XK_ehook
 0x1001ebb

	)

2003 
	#XK_Etûde
 0x1001eb¯

	)

2004 
	#XK_ëûde
 0x1001ebd

	)

2005 
	#XK_EcúcumÊexacuã
 0x1001ebê

	)

2006 
	#XK_ecúcumÊexacuã
 0x1001eb‡

	)

2007 
	#XK_EcúcumÊexgøve
 0x1001ec0

	)

2008 
	#XK_ecúcumÊexgøve
 0x1001ec1

	)

2009 
	#XK_EcúcumÊexhook
 0x1001ec2

	)

2010 
	#XK_ecúcumÊexhook
 0x1001ec3

	)

2011 
	#XK_EcúcumÊextûde
 0x1001ec4

	)

2012 
	#XK_ecúcumÊextûde
 0x1001ec5

	)

2013 
	#XK_EcúcumÊexbñowdŸ
 0x1001ec6

	)

2014 
	#XK_ecúcumÊexbñowdŸ
 0x1001ec7

	)

2015 
	#XK_Ihook
 0x1001ec8

	)

2016 
	#XK_ihook
 0x1001ec9

	)

2017 
	#XK_IbñowdŸ
 0x1001eˇ

	)

2018 
	#XK_ibñowdŸ
 0x1001ecb

	)

2019 
	#XK_ObñowdŸ
 0x1001ec¯

	)

2020 
	#XK_obñowdŸ
 0x1001ecd

	)

2021 
	#XK_Ohook
 0x1001e˚

	)

2022 
	#XK_ohook
 0x1001ec‡

	)

2023 
	#XK_OcúcumÊexacuã
 0x1001ed0

	)

2024 
	#XK_ocúcumÊexacuã
 0x1001ed1

	)

2025 
	#XK_OcúcumÊexgøve
 0x1001ed2

	)

2026 
	#XK_ocúcumÊexgøve
 0x1001ed3

	)

2027 
	#XK_OcúcumÊexhook
 0x1001ed4

	)

2028 
	#XK_ocúcumÊexhook
 0x1001ed5

	)

2029 
	#XK_OcúcumÊextûde
 0x1001ed6

	)

2030 
	#XK_ocúcumÊextûde
 0x1001ed7

	)

2031 
	#XK_OcúcumÊexbñowdŸ
 0x1001ed8

	)

2032 
	#XK_ocúcumÊexbñowdŸ
 0x1001ed9

	)

2033 
	#XK_Oh‹«cuã
 0x1001ed®

	)

2034 
	#XK_oh‹«cuã
 0x1001edb

	)

2035 
	#XK_Oh‹ngøve
 0x1001ed¯

	)

2036 
	#XK_oh‹ngøve
 0x1001edd

	)

2037 
	#XK_Oh‹nhook
 0x1001edê

	)

2038 
	#XK_oh‹nhook
 0x1001ed‡

	)

2039 
	#XK_Oh‹¡ûde
 0x1001ì0

	)

2040 
	#XK_oh‹¡ûde
 0x1001ì1

	)

2041 
	#XK_Oh‹nbñowdŸ
 0x1001ì2

	)

2042 
	#XK_oh‹nbñowdŸ
 0x1001ì3

	)

2043 
	#XK_UbñowdŸ
 0x1001ì4

	)

2044 
	#XK_ubñowdŸ
 0x1001ì5

	)

2045 
	#XK_Uhook
 0x1001ì6

	)

2046 
	#XK_uhook
 0x1001ì7

	)

2047 
	#XK_Uh‹«cuã
 0x1001ì8

	)

2048 
	#XK_uh‹«cuã
 0x1001ì9

	)

2049 
	#XK_Uh‹ngøve
 0x1001ì®

	)

2050 
	#XK_uh‹ngøve
 0x1001ìb

	)

2051 
	#XK_Uh‹nhook
 0x1001ì¯

	)

2052 
	#XK_uh‹nhook
 0x1001ìd

	)

2053 
	#XK_Uh‹¡ûde
 0x1001ìê

	)

2054 
	#XK_uh‹¡ûde
 0x1001ì‡

	)

2055 
	#XK_Uh‹nbñowdŸ
 0x1001ef0

	)

2056 
	#XK_uh‹nbñowdŸ
 0x1001ef1

	)

2057 
	#XK_YbñowdŸ
 0x1001ef4

	)

2058 
	#XK_ybñowdŸ
 0x1001ef5

	)

2059 
	#XK_Yhook
 0x1001ef6

	)

2060 
	#XK_yhook
 0x1001ef7

	)

2061 
	#XK_Ytûde
 0x1001ef8

	)

2062 
	#XK_ytûde
 0x1001ef9

	)

2063 
	#XK_Oh‹n
 0x10001a0

	)

2064 
	#XK_oh‹n
 0x10001a1

	)

2065 
	#XK_Uh‹n
 0x10001a‡

	)

2066 
	#XK_uh‹n
 0x10001b0

	)

2070 #ifde‡
XK_CURRENCY


2071 
	#XK_EcuSign
 0x10020a0

	)

2072 
	#XK_Cﬁ⁄Sign
 0x10020a1

	)

2073 
	#XK_CruzeúoSign
 0x10020a2

	)

2074 
	#XK_FFøncSign
 0x10020a3

	)

2075 
	#XK_LúaSign
 0x10020a4

	)

2076 
	#XK_MûlSign
 0x10020a5

	)

2077 
	#XK_NaúaSign
 0x10020a6

	)

2078 
	#XK_Pe£èSign
 0x10020a7

	)

2079 
	#XK_Ru≥eSign
 0x10020a8

	)

2080 
	#XK_W⁄Sign
 0x10020a9

	)

2081 
	#XK_NewSheqñSign
 0x10020Ø

	)

2082 
	#XK_D⁄gSign
 0x10020ab

	)

2083 
	#XK_EuroSign
 0x20a¯

	)

2086 #ifde‡
XK_MATHEMATICAL


2088 
	#XK_zîosu≥ri‹
 0x1002070

	)

2089 
	#XK_foursu≥ri‹
 0x1002074

	)

2090 
	#XK_fivesu≥ri‹
 0x1002075

	)

2091 
	#XK_sixsu≥ri‹
 0x1002076

	)

2092 
	#XK_£vísu≥ri‹
 0x1002077

	)

2093 
	#XK_eightsu≥ri‹
 0x1002078

	)

2094 
	#XK_nöesu≥ri‹
 0x1002079

	)

2095 
	#XK_zîosubs¸ùt
 0x1002080

	)

2096 
	#XK_⁄esubs¸ùt
 0x1002081

	)

2097 
	#XK_twosubs¸ùt
 0x1002082

	)

2098 
	#XK_thªesubs¸ùt
 0x1002083

	)

2099 
	#XK_foursubs¸ùt
 0x1002084

	)

2100 
	#XK_fivesubs¸ùt
 0x1002085

	)

2101 
	#XK_sixsubs¸ùt
 0x1002086

	)

2102 
	#XK_£vísubs¸ùt
 0x1002087

	)

2103 
	#XK_eightsubs¸ùt
 0x1002088

	)

2104 
	#XK_nöesubs¸ùt
 0x1002089

	)

2105 
	#XK_∑πdif„ª¡ül
 0x1002202

	)

2106 
	#XK_em±y£t
 0x1002205

	)

2107 
	#XK_ñemítof
 0x1002208

	)

2108 
	#XK_nŸñemítof
 0x1002209

	)

2109 
	#XK_c⁄èößs
 0x100220B

	)

2110 
	#XK_squ¨îoŸ
 0x100221A

	)

2111 
	#XK_cubîoŸ
 0x100221B

	)

2112 
	#XK_fouπhroŸ
 0x100221C

	)

2113 
	#XK_döãgøl
 0x100222C

	)

2114 
	#XK_töãgøl
 0x100222D

	)

2115 
	#XK_beˇu£
 0x1002235

	)

2116 
	#XK_≠¥oxeq
 0x1002248

	)

2117 
	#XK_nŸ≠¥oxeq
 0x1002247

	)

2118 
	#XK_nŸidítiˇl
 0x1002262

	)

2119 
	#XK_°ri˘eq
 0x1002263

	)

2122 #ifde‡
XK_BRAILLE


2123 
	#XK_bøûÀ_dŸ_1
 0xfff1

	)

2124 
	#XK_bøûÀ_dŸ_2
 0xfff2

	)

2125 
	#XK_bøûÀ_dŸ_3
 0xfff3

	)

2126 
	#XK_bøûÀ_dŸ_4
 0xfff4

	)

2127 
	#XK_bøûÀ_dŸ_5
 0xfff5

	)

2128 
	#XK_bøûÀ_dŸ_6
 0xfff6

	)

2129 
	#XK_bøûÀ_dŸ_7
 0xfff7

	)

2130 
	#XK_bøûÀ_dŸ_8
 0xfff8

	)

2131 
	#XK_bøûÀ_dŸ_9
 0xfff9

	)

2132 
	#XK_bøûÀ_dŸ_10
 0xffÁ

	)

2133 
	#XK_bøûÀ_bœnk
 0x1002800

	)

2134 
	#XK_bøûÀ_dŸs_1
 0x1002801

	)

2135 
	#XK_bøûÀ_dŸs_2
 0x1002802

	)

2136 
	#XK_bøûÀ_dŸs_12
 0x1002803

	)

2137 
	#XK_bøûÀ_dŸs_3
 0x1002804

	)

2138 
	#XK_bøûÀ_dŸs_13
 0x1002805

	)

2139 
	#XK_bøûÀ_dŸs_23
 0x1002806

	)

2140 
	#XK_bøûÀ_dŸs_123
 0x1002807

	)

2141 
	#XK_bøûÀ_dŸs_4
 0x1002808

	)

2142 
	#XK_bøûÀ_dŸs_14
 0x1002809

	)

2143 
	#XK_bøûÀ_dŸs_24
 0x100280®

	)

2144 
	#XK_bøûÀ_dŸs_124
 0x100280b

	)

2145 
	#XK_bøûÀ_dŸs_34
 0x100280¯

	)

2146 
	#XK_bøûÀ_dŸs_134
 0x100280d

	)

2147 
	#XK_bøûÀ_dŸs_234
 0x100280ê

	)

2148 
	#XK_bøûÀ_dŸs_1234
 0x100280‡

	)

2149 
	#XK_bøûÀ_dŸs_5
 0x1002810

	)

2150 
	#XK_bøûÀ_dŸs_15
 0x1002811

	)

2151 
	#XK_bøûÀ_dŸs_25
 0x1002812

	)

2152 
	#XK_bøûÀ_dŸs_125
 0x1002813

	)

2153 
	#XK_bøûÀ_dŸs_35
 0x1002814

	)

2154 
	#XK_bøûÀ_dŸs_135
 0x1002815

	)

2155 
	#XK_bøûÀ_dŸs_235
 0x1002816

	)

2156 
	#XK_bøûÀ_dŸs_1235
 0x1002817

	)

2157 
	#XK_bøûÀ_dŸs_45
 0x1002818

	)

2158 
	#XK_bøûÀ_dŸs_145
 0x1002819

	)

2159 
	#XK_bøûÀ_dŸs_245
 0x100281®

	)

2160 
	#XK_bøûÀ_dŸs_1245
 0x100281b

	)

2161 
	#XK_bøûÀ_dŸs_345
 0x100281¯

	)

2162 
	#XK_bøûÀ_dŸs_1345
 0x100281d

	)

2163 
	#XK_bøûÀ_dŸs_2345
 0x100281ê

	)

2164 
	#XK_bøûÀ_dŸs_12345
 0x100281‡

	)

2165 
	#XK_bøûÀ_dŸs_6
 0x1002820

	)

2166 
	#XK_bøûÀ_dŸs_16
 0x1002821

	)

2167 
	#XK_bøûÀ_dŸs_26
 0x1002822

	)

2168 
	#XK_bøûÀ_dŸs_126
 0x1002823

	)

2169 
	#XK_bøûÀ_dŸs_36
 0x1002824

	)

2170 
	#XK_bøûÀ_dŸs_136
 0x1002825

	)

2171 
	#XK_bøûÀ_dŸs_236
 0x1002826

	)

2172 
	#XK_bøûÀ_dŸs_1236
 0x1002827

	)

2173 
	#XK_bøûÀ_dŸs_46
 0x1002828

	)

2174 
	#XK_bøûÀ_dŸs_146
 0x1002829

	)

2175 
	#XK_bøûÀ_dŸs_246
 0x100282®

	)

2176 
	#XK_bøûÀ_dŸs_1246
 0x100282b

	)

2177 
	#XK_bøûÀ_dŸs_346
 0x100282¯

	)

2178 
	#XK_bøûÀ_dŸs_1346
 0x100282d

	)

2179 
	#XK_bøûÀ_dŸs_2346
 0x100282ê

	)

2180 
	#XK_bøûÀ_dŸs_12346
 0x100282‡

	)

2181 
	#XK_bøûÀ_dŸs_56
 0x1002830

	)

2182 
	#XK_bøûÀ_dŸs_156
 0x1002831

	)

2183 
	#XK_bøûÀ_dŸs_256
 0x1002832

	)

2184 
	#XK_bøûÀ_dŸs_1256
 0x1002833

	)

2185 
	#XK_bøûÀ_dŸs_356
 0x1002834

	)

2186 
	#XK_bøûÀ_dŸs_1356
 0x1002835

	)

2187 
	#XK_bøûÀ_dŸs_2356
 0x1002836

	)

2188 
	#XK_bøûÀ_dŸs_12356
 0x1002837

	)

2189 
	#XK_bøûÀ_dŸs_456
 0x1002838

	)

2190 
	#XK_bøûÀ_dŸs_1456
 0x1002839

	)

2191 
	#XK_bøûÀ_dŸs_2456
 0x100283®

	)

2192 
	#XK_bøûÀ_dŸs_12456
 0x100283b

	)

2193 
	#XK_bøûÀ_dŸs_3456
 0x100283¯

	)

2194 
	#XK_bøûÀ_dŸs_13456
 0x100283d

	)

2195 
	#XK_bøûÀ_dŸs_23456
 0x100283ê

	)

2196 
	#XK_bøûÀ_dŸs_123456
 0x100283‡

	)

2197 
	#XK_bøûÀ_dŸs_7
 0x1002840

	)

2198 
	#XK_bøûÀ_dŸs_17
 0x1002841

	)

2199 
	#XK_bøûÀ_dŸs_27
 0x1002842

	)

2200 
	#XK_bøûÀ_dŸs_127
 0x1002843

	)

2201 
	#XK_bøûÀ_dŸs_37
 0x1002844

	)

2202 
	#XK_bøûÀ_dŸs_137
 0x1002845

	)

2203 
	#XK_bøûÀ_dŸs_237
 0x1002846

	)

2204 
	#XK_bøûÀ_dŸs_1237
 0x1002847

	)

2205 
	#XK_bøûÀ_dŸs_47
 0x1002848

	)

2206 
	#XK_bøûÀ_dŸs_147
 0x1002849

	)

2207 
	#XK_bøûÀ_dŸs_247
 0x100284®

	)

2208 
	#XK_bøûÀ_dŸs_1247
 0x100284b

	)

2209 
	#XK_bøûÀ_dŸs_347
 0x100284¯

	)

2210 
	#XK_bøûÀ_dŸs_1347
 0x100284d

	)

2211 
	#XK_bøûÀ_dŸs_2347
 0x100284ê

	)

2212 
	#XK_bøûÀ_dŸs_12347
 0x100284‡

	)

2213 
	#XK_bøûÀ_dŸs_57
 0x1002850

	)

2214 
	#XK_bøûÀ_dŸs_157
 0x1002851

	)

2215 
	#XK_bøûÀ_dŸs_257
 0x1002852

	)

2216 
	#XK_bøûÀ_dŸs_1257
 0x1002853

	)

2217 
	#XK_bøûÀ_dŸs_357
 0x1002854

	)

2218 
	#XK_bøûÀ_dŸs_1357
 0x1002855

	)

2219 
	#XK_bøûÀ_dŸs_2357
 0x1002856

	)

2220 
	#XK_bøûÀ_dŸs_12357
 0x1002857

	)

2221 
	#XK_bøûÀ_dŸs_457
 0x1002858

	)

2222 
	#XK_bøûÀ_dŸs_1457
 0x1002859

	)

2223 
	#XK_bøûÀ_dŸs_2457
 0x100285®

	)

2224 
	#XK_bøûÀ_dŸs_12457
 0x100285b

	)

2225 
	#XK_bøûÀ_dŸs_3457
 0x100285¯

	)

2226 
	#XK_bøûÀ_dŸs_13457
 0x100285d

	)

2227 
	#XK_bøûÀ_dŸs_23457
 0x100285ê

	)

2228 
	#XK_bøûÀ_dŸs_123457
 0x100285‡

	)

2229 
	#XK_bøûÀ_dŸs_67
 0x1002860

	)

2230 
	#XK_bøûÀ_dŸs_167
 0x1002861

	)

2231 
	#XK_bøûÀ_dŸs_267
 0x1002862

	)

2232 
	#XK_bøûÀ_dŸs_1267
 0x1002863

	)

2233 
	#XK_bøûÀ_dŸs_367
 0x1002864

	)

2234 
	#XK_bøûÀ_dŸs_1367
 0x1002865

	)

2235 
	#XK_bøûÀ_dŸs_2367
 0x1002866

	)

2236 
	#XK_bøûÀ_dŸs_12367
 0x1002867

	)

2237 
	#XK_bøûÀ_dŸs_467
 0x1002868

	)

2238 
	#XK_bøûÀ_dŸs_1467
 0x1002869

	)

2239 
	#XK_bøûÀ_dŸs_2467
 0x100286®

	)

2240 
	#XK_bøûÀ_dŸs_12467
 0x100286b

	)

2241 
	#XK_bøûÀ_dŸs_3467
 0x100286¯

	)

2242 
	#XK_bøûÀ_dŸs_13467
 0x100286d

	)

2243 
	#XK_bøûÀ_dŸs_23467
 0x100286ê

	)

2244 
	#XK_bøûÀ_dŸs_123467
 0x100286‡

	)

2245 
	#XK_bøûÀ_dŸs_567
 0x1002870

	)

2246 
	#XK_bøûÀ_dŸs_1567
 0x1002871

	)

2247 
	#XK_bøûÀ_dŸs_2567
 0x1002872

	)

2248 
	#XK_bøûÀ_dŸs_12567
 0x1002873

	)

2249 
	#XK_bøûÀ_dŸs_3567
 0x1002874

	)

2250 
	#XK_bøûÀ_dŸs_13567
 0x1002875

	)

2251 
	#XK_bøûÀ_dŸs_23567
 0x1002876

	)

2252 
	#XK_bøûÀ_dŸs_123567
 0x1002877

	)

2253 
	#XK_bøûÀ_dŸs_4567
 0x1002878

	)

2254 
	#XK_bøûÀ_dŸs_14567
 0x1002879

	)

2255 
	#XK_bøûÀ_dŸs_24567
 0x100287®

	)

2256 
	#XK_bøûÀ_dŸs_124567
 0x100287b

	)

2257 
	#XK_bøûÀ_dŸs_34567
 0x100287¯

	)

2258 
	#XK_bøûÀ_dŸs_134567
 0x100287d

	)

2259 
	#XK_bøûÀ_dŸs_234567
 0x100287ê

	)

2260 
	#XK_bøûÀ_dŸs_1234567
 0x100287‡

	)

2261 
	#XK_bøûÀ_dŸs_8
 0x1002880

	)

2262 
	#XK_bøûÀ_dŸs_18
 0x1002881

	)

2263 
	#XK_bøûÀ_dŸs_28
 0x1002882

	)

2264 
	#XK_bøûÀ_dŸs_128
 0x1002883

	)

2265 
	#XK_bøûÀ_dŸs_38
 0x1002884

	)

2266 
	#XK_bøûÀ_dŸs_138
 0x1002885

	)

2267 
	#XK_bøûÀ_dŸs_238
 0x1002886

	)

2268 
	#XK_bøûÀ_dŸs_1238
 0x1002887

	)

2269 
	#XK_bøûÀ_dŸs_48
 0x1002888

	)

2270 
	#XK_bøûÀ_dŸs_148
 0x1002889

	)

2271 
	#XK_bøûÀ_dŸs_248
 0x100288®

	)

2272 
	#XK_bøûÀ_dŸs_1248
 0x100288b

	)

2273 
	#XK_bøûÀ_dŸs_348
 0x100288¯

	)

2274 
	#XK_bøûÀ_dŸs_1348
 0x100288d

	)

2275 
	#XK_bøûÀ_dŸs_2348
 0x100288ê

	)

2276 
	#XK_bøûÀ_dŸs_12348
 0x100288‡

	)

2277 
	#XK_bøûÀ_dŸs_58
 0x1002890

	)

2278 
	#XK_bøûÀ_dŸs_158
 0x1002891

	)

2279 
	#XK_bøûÀ_dŸs_258
 0x1002892

	)

2280 
	#XK_bøûÀ_dŸs_1258
 0x1002893

	)

2281 
	#XK_bøûÀ_dŸs_358
 0x1002894

	)

2282 
	#XK_bøûÀ_dŸs_1358
 0x1002895

	)

2283 
	#XK_bøûÀ_dŸs_2358
 0x1002896

	)

2284 
	#XK_bøûÀ_dŸs_12358
 0x1002897

	)

2285 
	#XK_bøûÀ_dŸs_458
 0x1002898

	)

2286 
	#XK_bøûÀ_dŸs_1458
 0x1002899

	)

2287 
	#XK_bøûÀ_dŸs_2458
 0x100289®

	)

2288 
	#XK_bøûÀ_dŸs_12458
 0x100289b

	)

2289 
	#XK_bøûÀ_dŸs_3458
 0x100289¯

	)

2290 
	#XK_bøûÀ_dŸs_13458
 0x100289d

	)

2291 
	#XK_bøûÀ_dŸs_23458
 0x100289ê

	)

2292 
	#XK_bøûÀ_dŸs_123458
 0x100289‡

	)

2293 
	#XK_bøûÀ_dŸs_68
 0x10028a0

	)

2294 
	#XK_bøûÀ_dŸs_168
 0x10028a1

	)

2295 
	#XK_bøûÀ_dŸs_268
 0x10028a2

	)

2296 
	#XK_bøûÀ_dŸs_1268
 0x10028a3

	)

2297 
	#XK_bøûÀ_dŸs_368
 0x10028a4

	)

2298 
	#XK_bøûÀ_dŸs_1368
 0x10028a5

	)

2299 
	#XK_bøûÀ_dŸs_2368
 0x10028a6

	)

2300 
	#XK_bøûÀ_dŸs_12368
 0x10028a7

	)

2301 
	#XK_bøûÀ_dŸs_468
 0x10028a8

	)

2302 
	#XK_bøûÀ_dŸs_1468
 0x10028a9

	)

2303 
	#XK_bøûÀ_dŸs_2468
 0x10028Ø

	)

2304 
	#XK_bøûÀ_dŸs_12468
 0x10028ab

	)

2305 
	#XK_bøûÀ_dŸs_3468
 0x10028a¯

	)

2306 
	#XK_bøûÀ_dŸs_13468
 0x10028ad

	)

2307 
	#XK_bøûÀ_dŸs_23468
 0x10028´

	)

2308 
	#XK_bøûÀ_dŸs_123468
 0x10028a‡

	)

2309 
	#XK_bøûÀ_dŸs_568
 0x10028b0

	)

2310 
	#XK_bøûÀ_dŸs_1568
 0x10028b1

	)

2311 
	#XK_bøûÀ_dŸs_2568
 0x10028b2

	)

2312 
	#XK_bøûÀ_dŸs_12568
 0x10028b3

	)

2313 
	#XK_bøûÀ_dŸs_3568
 0x10028b4

	)

2314 
	#XK_bøûÀ_dŸs_13568
 0x10028b5

	)

2315 
	#XK_bøûÀ_dŸs_23568
 0x10028b6

	)

2316 
	#XK_bøûÀ_dŸs_123568
 0x10028b7

	)

2317 
	#XK_bøûÀ_dŸs_4568
 0x10028b8

	)

2318 
	#XK_bøûÀ_dŸs_14568
 0x10028b9

	)

2319 
	#XK_bøûÀ_dŸs_24568
 0x10028b®

	)

2320 
	#XK_bøûÀ_dŸs_124568
 0x10028bb

	)

2321 
	#XK_bøûÀ_dŸs_34568
 0x10028b¯

	)

2322 
	#XK_bøûÀ_dŸs_134568
 0x10028bd

	)

2323 
	#XK_bøûÀ_dŸs_234568
 0x10028bê

	)

2324 
	#XK_bøûÀ_dŸs_1234568
 0x10028b‡

	)

2325 
	#XK_bøûÀ_dŸs_78
 0x10028c0

	)

2326 
	#XK_bøûÀ_dŸs_178
 0x10028c1

	)

2327 
	#XK_bøûÀ_dŸs_278
 0x10028c2

	)

2328 
	#XK_bøûÀ_dŸs_1278
 0x10028c3

	)

2329 
	#XK_bøûÀ_dŸs_378
 0x10028c4

	)

2330 
	#XK_bøûÀ_dŸs_1378
 0x10028c5

	)

2331 
	#XK_bøûÀ_dŸs_2378
 0x10028c6

	)

2332 
	#XK_bøûÀ_dŸs_12378
 0x10028c7

	)

2333 
	#XK_bøûÀ_dŸs_478
 0x10028c8

	)

2334 
	#XK_bøûÀ_dŸs_1478
 0x10028c9

	)

2335 
	#XK_bøûÀ_dŸs_2478
 0x10028ˇ

	)

2336 
	#XK_bøûÀ_dŸs_12478
 0x10028cb

	)

2337 
	#XK_bøûÀ_dŸs_3478
 0x10028c¯

	)

2338 
	#XK_bøûÀ_dŸs_13478
 0x10028cd

	)

2339 
	#XK_bøûÀ_dŸs_23478
 0x10028˚

	)

2340 
	#XK_bøûÀ_dŸs_123478
 0x10028c‡

	)

2341 
	#XK_bøûÀ_dŸs_578
 0x10028d0

	)

2342 
	#XK_bøûÀ_dŸs_1578
 0x10028d1

	)

2343 
	#XK_bøûÀ_dŸs_2578
 0x10028d2

	)

2344 
	#XK_bøûÀ_dŸs_12578
 0x10028d3

	)

2345 
	#XK_bøûÀ_dŸs_3578
 0x10028d4

	)

2346 
	#XK_bøûÀ_dŸs_13578
 0x10028d5

	)

2347 
	#XK_bøûÀ_dŸs_23578
 0x10028d6

	)

2348 
	#XK_bøûÀ_dŸs_123578
 0x10028d7

	)

2349 
	#XK_bøûÀ_dŸs_4578
 0x10028d8

	)

2350 
	#XK_bøûÀ_dŸs_14578
 0x10028d9

	)

2351 
	#XK_bøûÀ_dŸs_24578
 0x10028d®

	)

2352 
	#XK_bøûÀ_dŸs_124578
 0x10028db

	)

2353 
	#XK_bøûÀ_dŸs_34578
 0x10028d¯

	)

2354 
	#XK_bøûÀ_dŸs_134578
 0x10028dd

	)

2355 
	#XK_bøûÀ_dŸs_234578
 0x10028dê

	)

2356 
	#XK_bøûÀ_dŸs_1234578
 0x10028d‡

	)

2357 
	#XK_bøûÀ_dŸs_678
 0x10028e0

	)

2358 
	#XK_bøûÀ_dŸs_1678
 0x10028e1

	)

2359 
	#XK_bøûÀ_dŸs_2678
 0x10028e2

	)

2360 
	#XK_bøûÀ_dŸs_12678
 0x10028e3

	)

2361 
	#XK_bøûÀ_dŸs_3678
 0x10028e4

	)

2362 
	#XK_bøûÀ_dŸs_13678
 0x10028e5

	)

2363 
	#XK_bøûÀ_dŸs_23678
 0x10028e6

	)

2364 
	#XK_bøûÀ_dŸs_123678
 0x10028e7

	)

2365 
	#XK_bøûÀ_dŸs_4678
 0x10028e8

	)

2366 
	#XK_bøûÀ_dŸs_14678
 0x10028e9

	)

2367 
	#XK_bøûÀ_dŸs_24678
 0x10028ó

	)

2368 
	#XK_bøûÀ_dŸs_124678
 0x10028eb

	)

2369 
	#XK_bøûÀ_dŸs_34678
 0x10028e¯

	)

2370 
	#XK_bøûÀ_dŸs_134678
 0x10028ed

	)

2371 
	#XK_bøûÀ_dŸs_234678
 0x10028ì

	)

2372 
	#XK_bøûÀ_dŸs_1234678
 0x10028e‡

	)

2373 
	#XK_bøûÀ_dŸs_5678
 0x10028f0

	)

2374 
	#XK_bøûÀ_dŸs_15678
 0x10028f1

	)

2375 
	#XK_bøûÀ_dŸs_25678
 0x10028f2

	)

2376 
	#XK_bøûÀ_dŸs_125678
 0x10028f3

	)

2377 
	#XK_bøûÀ_dŸs_35678
 0x10028f4

	)

2378 
	#XK_bøûÀ_dŸs_135678
 0x10028f5

	)

2379 
	#XK_bøûÀ_dŸs_235678
 0x10028f6

	)

2380 
	#XK_bøûÀ_dŸs_1235678
 0x10028f7

	)

2381 
	#XK_bøûÀ_dŸs_45678
 0x10028f8

	)

2382 
	#XK_bøûÀ_dŸs_145678
 0x10028f9

	)

2383 
	#XK_bøûÀ_dŸs_245678
 0x10028Á

	)

2384 
	#XK_bøûÀ_dŸs_1245678
 0x10028fb

	)

2385 
	#XK_bøûÀ_dŸs_345678
 0x10028f¯

	)

2386 
	#XK_bøûÀ_dŸs_1345678
 0x10028fd

	)

2387 
	#XK_bøûÀ_dŸs_2345678
 0x10028„

	)

2388 
	#XK_bøûÀ_dŸs_12345678
 0x10028f‡

	)

2396 #ifde‡
XK_SINHALA


2397 
	#XK_Söh_ng
 0x1000d82

	)

2398 
	#XK_Söh_h2
 0x1000d83

	)

2399 
	#XK_Söh_a
 0x1000d85

	)

2400 
	#XK_Söh_Ø
 0x1000d86

	)

2401 
	#XK_Söh_´
 0x1000d87

	)

2402 
	#XK_Söh_´e
 0x1000d88

	)

2403 
	#XK_Söh_i
 0x1000d89

	)

2404 
	#XK_Söh_ii
 0x1000d8®

	)

2405 
	#XK_Söh_u
 0x1000d8b

	)

2406 
	#XK_Söh_uu
 0x1000d8¯

	)

2407 
	#XK_Söh_ri
 0x1000d8d

	)

2408 
	#XK_Söh_rii
 0x1000d8ê

	)

2409 
	#XK_Söh_lu
 0x1000d8‡

	)

2410 
	#XK_Söh_luu
 0x1000d90

	)

2411 
	#XK_Söh_e
 0x1000d91

	)

2412 
	#XK_Söh_ì
 0x1000d92

	)

2413 
	#XK_Söh_ai
 0x1000d93

	)

2414 
	#XK_Söh_o
 0x1000d94

	)

2415 
	#XK_Söh_oo
 0x1000d95

	)

2416 
	#XK_Söh_au
 0x1000d96

	)

2417 
	#XK_Söh_ka
 0x1000d9®

	)

2418 
	#XK_Söh_kha
 0x1000d9b

	)

2419 
	#XK_Söh_ga
 0x1000d9¯

	)

2420 
	#XK_Söh_gha
 0x1000d9d

	)

2421 
	#XK_Söh_ng2
 0x1000d9ê

	)

2422 
	#XK_Söh_nga
 0x1000d9‡

	)

2423 
	#XK_Söh_ˇ
 0x1000da0

	)

2424 
	#XK_Söh_cha
 0x1000da1

	)

2425 
	#XK_Söh_ja
 0x1000da2

	)

2426 
	#XK_Söh_jha
 0x1000da3

	)

2427 
	#XK_Söh_nya
 0x1000da4

	)

2428 
	#XK_Söh_jnya
 0x1000da5

	)

2429 
	#XK_Söh_nja
 0x1000da6

	)

2430 
	#XK_Söh_âa
 0x1000da7

	)

2431 
	#XK_Söh_âha
 0x1000da8

	)

2432 
	#XK_Söh_dda
 0x1000da9

	)

2433 
	#XK_Söh_ddha
 0x1000dØ

	)

2434 
	#XK_Söh_¬a
 0x1000dab

	)

2435 
	#XK_Söh_ndda
 0x1000da¯

	)

2436 
	#XK_Söh_tha
 0x1000dad

	)

2437 
	#XK_Söh_thha
 0x1000d´

	)

2438 
	#XK_Söh_dha
 0x1000da‡

	)

2439 
	#XK_Söh_dhha
 0x1000db0

	)

2440 
	#XK_Söh_«
 0x1000db1

	)

2441 
	#XK_Söh_ndha
 0x1000db3

	)

2442 
	#XK_Söh_∑
 0x1000db4

	)

2443 
	#XK_Söh_pha
 0x1000db5

	)

2444 
	#XK_Söh_ba
 0x1000db6

	)

2445 
	#XK_Söh_bha
 0x1000db7

	)

2446 
	#XK_Söh_ma
 0x1000db8

	)

2447 
	#XK_Söh_mba
 0x1000db9

	)

2448 
	#XK_Söh_ya
 0x1000db®

	)

2449 
	#XK_Söh_ø
 0x1000dbb

	)

2450 
	#XK_Söh_œ
 0x1000dbd

	)

2451 
	#XK_Söh_va
 0x1000dc0

	)

2452 
	#XK_Söh_sha
 0x1000dc1

	)

2453 
	#XK_Söh_ssha
 0x1000dc2

	)

2454 
	#XK_Söh_ß
 0x1000dc3

	)

2455 
	#XK_Söh_ha
 0x1000dc4

	)

2456 
	#XK_Söh_Œa
 0x1000dc5

	)

2457 
	#XK_Söh_Á
 0x1000dc6

	)

2458 
	#XK_Söh_Æ
 0x1000dˇ

	)

2459 
	#XK_Söh_Ø2
 0x1000dc‡

	)

2460 
	#XK_Söh_´2
 0x1000dd0

	)

2461 
	#XK_Söh_´e2
 0x1000dd1

	)

2462 
	#XK_Söh_i2
 0x1000dd2

	)

2463 
	#XK_Söh_ii2
 0x1000dd3

	)

2464 
	#XK_Söh_u2
 0x1000dd4

	)

2465 
	#XK_Söh_uu2
 0x1000dd6

	)

2466 
	#XK_Söh_ru2
 0x1000dd8

	)

2467 
	#XK_Söh_e2
 0x1000dd9

	)

2468 
	#XK_Söh_ì2
 0x1000dd®

	)

2469 
	#XK_Söh_ai2
 0x1000ddb

	)

2470 
	#XK_Söh_o2
 0x1000dd¯

	)

2471 
	#XK_Söh_oo2
 0x1000ddd

	)

2472 
	#XK_Söh_au2
 0x1000ddê

	)

2473 
	#XK_Söh_lu2
 0x1000dd‡

	)

2474 
	#XK_Söh_ruu2
 0x1000df2

	)

2475 
	#XK_Söh_luu2
 0x1000df3

	)

2476 
	#XK_Söh_kunddÆiya
 0x1000df4

	)

	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/libzen/config.h

1 #i‚de‡
_DLIST_CONFIG_H


2 
	#_DLIST_CONFIG_H


	)

5 
	mZíTy≥I¡
,

6 
	mZíTy≥Såög
,

7 
	mZíTy≥Flﬂt
,

8 
	mZíTy≥NONE


9 } 
	tZíC⁄figTy≥
 ;

11 
zí_c⁄fig_öô
();

12 
zí_c⁄fig_∑r£
(c⁄° *
fûe
);

13 
zí_c⁄fig_∑r£_°rög
(*
löe
);

14 
zí_c⁄fig_add
(c⁄° * 
«me
, 
ZíC⁄figTy≥
 
ty≥
, *
addr
);

15 
zí_c⁄fig_£t
(c⁄° **
¨gs
, *);

	@/usr/include/libzen/events.h

1 #i‚de‡
_ZEN_EVENTS_H


2 
	#_ZEN_EVENTS_H


	)

4 
	~"bôs.h
"

6 (*
	tEFunc
)(
	tfd
, 
	tmode
, *
	td©a
);

8 
	#ZEN_EVT_READ
 
	`ZEN_BIT
(0)

	)

9 
	#ZEN_EVT_WRITE
 
	`ZEN_BIT
(1)

	)

10 
	#ZEN_EVT_ERROR
 
	`ZEN_BIT
(2)

	)

12 
	`zí_evíts_öô
();

13 
	`zí_evíts_add
(
fd
, 
md
, 
EFunc
 
hdÃ
, *
d©a
);

14 
	`zí_evíts_dñëe
(
fd
);

15 
	`zí_evíts_waô
();

	@/usr/include/libzen/list.h

2 #i‚de‡
__ZEN_LIST_H


3 
	#__ZEN_LIST_H


	)

5 
	~"as£π.h
"

6 
	~"off£t.h
"

8 #ifde‡
__˝lu•lus


16 
	sZíLi°Node


18 
ZíLi°Node
 *
√xt
;

19 
ZíLi°Node
 *
¥ev
;

20 } 
	tZíLi°Node
;

22 
	#ZEN_LIST_NODE_INITIALIZER
 {
NULL
,NULL}

	)

28 
ölöe
 
zí_li°_node_öô
 (
ZíLi°Node
 *
±r
)

30 
±r
->
√xt
 =Ötr;

31 
±r
->
¥ev
 =Ötr;

34 
ölöe
 
zí_li°_node_ö£π_a·î
 (
ZíLi°Node
 *
hód
,

35 
ZíLi°Node
 *
d©a
)

37 
hód
->
√xt
->
¥ev
 = 
d©a
;

38 
d©a
->
√xt
 = 
hód
->next;

39 
d©a
->
¥ev
 = 
hód
;

40 
hód
->
√xt
 = 
d©a
;

43 
ölöe
 
zí_li°_node_ö£π_bef‹e
(
ZíLi°Node
 *
hód
,

44 
ZíLi°Node
 *
d©a
)

46 
hód
->
¥ev
->
√xt
 = 
d©a
;

47 
d©a
->
¥ev
 = 
hód
->prev;

48 
d©a
->
√xt
 = 
hód
;

49 
hód
->
¥ev
 = 
d©a
;

52 
ölöe
 
zí_li°_node_ªmove
 (
ZíLi°Node
 *
node
)

54 
node
->
√xt
->
¥ev
 =Çode->prev;

55 
node
->
¥ev
->
√xt
 =Çode->next;

56 
zí_li°_node_öô
 (
node
);

59 
ölöe
 
zí_li°_node_em±y
 (
ZíLi°Node
 *
hód
)

61  (
hód
->
√xt
 == head);

64 
ölöe
 
ZíLi°Node
* 
zí_li°_node_√xt
 (ZíLi°Nodê*
node
)

66  
node
->
√xt
;

69 
ölöe
 
ZíLi°Node
* 
zí_li°_node_¥ev
 (ZíLi°Nodê*
node
)

71  
node
->
¥ev
;

74 
	#LIST_VALID_NODE
(
node
Ë(“ode->
√xt
 =nodeË=“ode->
¥ev
 =node))

	)

75 
	#LIST_FREE_NODE
(
node
Ë(“ode)->
√xt
 =“odeË&& (node)->
¥ev
 =“ode))

	)

77 
	#LIST_ASSERT_FREE_NODE
(
node
) \

79 
	`zí_as£π
(
	`LIST_VALID_NODE
((
node
))); \

80 
	`zí_as£π
(
	`LIST_FREE_NODE
((
node
))); \

81 }

	)

89 
ZíLi°Node
 
hód
;

90 
ZíLi°Node
 *
ôî
;

91 
size_t
 
off£t
;

92 
cou¡
;

93 } 
	tZíLi°
;

95 
	#ZEN_LIST_INITIALIZER
(
li°
,
of·
) \

97 .
hód
 = {.
√xt
&(
li°
.hód),.
¥ev
= &(list.head)}, \

98 .
ôî
 = (
NULL
), \

99 .
off£t
 = (
of·
), \

100 .
cou¡
 = (0) \

101 }

	)

103 
	#LIST_INITIALIZED
(
li°
Ë÷i°->
hód
.
√xt
 !
NULL
 &&Üi°->hód.
¥ev
 !NULL)

	)

109 
zí_li°_öô
 ( 
ZíLi°
 *
li°
, 
off£t
 );

110 
zí_li°_ö£π_a·î
–
ZíLi°
 *
li°
, *
¥ev
, *
d©a
);

111 
zí_li°_ö£π_bef‹e
–
ZíLi°
 *
li°
, *
¥ev
, *
d©a
);

112 
zí_li°_ö£π_hód
–
ZíLi°
 *
li°
, *
d©a
);

113 
zí_li°_ö£π_èû
–
ZíLi°
 *
li°
, *
d©a
);

114 
zí_li°_move_d©a
 ( 
ZíLi°
 *
li°
, ZíLi° * 
√wli°
, *
d©a
);

115 
zí_li°_ªmove
 ( 
ZíLi°
 *
li°
, *
d©a
);

116 * 
zí_li°_ªmove_èû
 ( 
ZíLi°
 *
li°
 );

117 * 
zí_li°_ªmove_hód
 ( 
ZíLi°
 *
li°
 );

118 * 
zí_li°_√xt
 ( 
ZíLi°
 *
li°
, *
d©a
);

119 * 
zí_li°_¥ev
 ( 
ZíLi°
 *
li°
, *
d©a
);

120 * 
zí_li°_hód
 ( 
ZíLi°
 *
li°
 );

121 * 
zí_li°_èû
 ( 
ZíLi°
 *
li°
 );

122 
ölöe
 
zí_li°_Àngth
 ( 
ZíLi°
 *
li°
 ){

123  
li°
->
cou¡
;

126 
ZíLi°
 * 
zí_li°_√w
 ( 
off£t
 );

127 
zí_li°_dñëe
 ( 
ZíLi°
 *
li°
, (*
Â
)(*));

128 
zí_li°_f‹óch
(
ZíLi°
 *
l
, (*
func
)(*,*), *
c⁄ãxt
);

134 
	#DECLARE_LIST_INIT
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

135 
modifõrs
 
«me
##
	`_öô
(
ZíLi°
 *
li°
) \

137 
	`zí_as£π
 (
li°
); \

138 
	`zí_li°_öô
 ( 
li°
, 
	`OFFSET_OF
(
membî
,
ty≥
) ); \

139 }

	)

141 
	#DECLARE_LIST_INSERT_AFTER
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

142 
modifõrs
 
«me
##
	`_ö£π_a·î
(
ZíLi°
 *
li°
, 
ty≥
 *
_node
,Åy≥ *
d©a
) \

144 
	`zí_as£π
 (
li°
); \

145 
	`zí_as£π
 (
d©a
); \

146 
	`zí_li°_ö£π_a·î
(
li°
, 
_node
 , 
d©a
 ); \

147 }

	)

149 
	#DECLARE_LIST_INSERT_BEFORE
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

150 
modifõrs
 
«me
##
	`_ö£π_bef‹e
(
ZíLi°
 *
li°
, 
ty≥
 *
_node
,Åy≥ *
d©a
)\

152 
	`zí_as£π
 (
li°
); \

153 
	`zí_as£π
 (
d©a
); \

154 
	`zí_li°_ö£π_bef‹e
(
li°
, 
_node
 , 
d©a
 ); \

155 }

	)

157 
	#DECLARE_LIST_HEAD
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

158 
modifõrs
 
ty≥
 * 
«me
##
	`_hód
(
ZíLi°
 *
li°
) \

160 
	`zí_as£π
 (
li°
); \

161  (
ty≥
*Ë
	`zí_li°_hód
(
li°
); \

162 }

	)

164 
	#DECLARE_LIST_TAIL
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

165 
modifõrs
 
ty≥
 * 
«me
##
	`_èû
(
ZíLi°
 *
li°
) \

167 
	`zí_as£π
 (
li°
); \

168  (
ty≥
*Ë
	`zí_li°_èû
(
li°
); \

169 }

	)

171 
	#DECLARE_LIST_NEXT
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

172 
modifõrs
 
ty≥
 * 
«me
##
	`_√xt
(
ZíLi°
 *
li°
,Åy≥ *
d©a
) \

174 
	`zí_as£π
 (
li°
); \

175 
	`zí_as£π
 (
d©a
); \

176  (
ty≥
*Ë
	`zí_li°_√xt
(
li°
, 
d©a
); \

177 }

	)

179 
	#DECLARE_LIST_PREV
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

180 
modifõrs
 
ty≥
 * 
«me
##
	`_¥ev
(
ZíLi°
 *
li°
,Åy≥ *
d©a
) \

182 
	`zí_as£π
 (
li°
); \

183 
	`zí_as£π
 (
d©a
); \

184  (
ty≥
*Ë
	`zí_li°_¥ev
(
li°
, 
d©a
); \

185 }

	)

187 
	#DECLARE_LIST_REMOVE
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

188 
modifõrs
 
«me
##
	`_ªmove
(
ZíLi°
 *
li°
,
ty≥
 *
d©a
){ \

189 
	`zí_as£π
 (
li°
); \

190 
	`zí_as£π
 (
d©a
); \

191 
	`zí_li°_ªmove
 (
li°
,
d©a
); \

192 }

	)

194 
	#DECLARE_LIST_PUSH
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

195 
modifõrs
 
«me
##
	`_push_hód
(
ZíLi°
 *
li°
,
ty≥
 *
d©a
) \

197 
	`zí_as£π
 (
li°
); \

198 
	`zí_as£π
 (
d©a
); \

199 
	`zí_li°_ö£π_hód
(
li°
,
d©a
); \

202 
modifõrs
 
«me
##
	`_push_èû
(
ZíLi°
 *
li°
,
ty≥
 *
d©a
) \

204 
	`zí_as£π
 (
li°
); \

205 
	`zí_as£π
 (
d©a
); \

206 
	`zí_li°_ö£π_èû
(
li°
,
d©a
); \

207 }

	)

209 
	#DECLARE_LIST_POP
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

210 
modifõrs
 
ty≥
* 
«me
##
	`_p›_hód
 (
ZíLi°
 *
li°
) \

212 *
d©a
 = 
NULL
; \

213 
	`zí_as£π
 (
li°
); \

214 
d©a
 = 
	`zí_li°_ªmove_hód
 (
li°
); \

215  
d©a
; \

217 
modifõrs
 
ty≥
* 
«me
##
	`_p›_èû
 (
ZíLi°
 *
li°
) \

219 *
d©a
 = 
NULL
; \

220 
	`zí_as£π
 (
li°
); \

221 
d©a
 = 
	`zí_li°_ªmove_èû
 (
li°
); \

222  
d©a
; \

224 

	)

226 
	#DECLARE_LIST_FOLDL
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

227 
modifõrs
 
«me
##
	`_fﬁdl
(
ZíLi°
 *
li°
,(*
func
)(
ty≥
*,*),* 
p
)\

229 
ty≥
 *
ñem
; \

230 
ty≥
 *
√xt
; \

231 
	`zí_as£π
 (
li°
); \

232 
	`zí_as£π
 (
func
); \

233  
ñem
 = 
«me
##
	`_èû
(
li°
) , \

234 
√xt
 = 
ñem
?
«me
##
	`_¥ev
((
li°
),ñem):
NULL
; \

235 
ñem
 !
NULL
; \

236 
ñem
 = 
√xt
, \

237 
√xt
 = 
ñem
?
«me
##
	`_¥ev
((
li°
),ñem):
NULL
) \

239 
	`func
(
ñem
,
p
); \

241 }

	)

243 
	#DECLARE_LIST_FOLDR
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

244 
modifõrs
 
«me
##
	`_fﬁdr
(
ZíLi°
 *
li°
,(*
func
)(
ty≥
*,*),* 
p
)\

246 
ty≥
 *
ñem
; \

247 
ty≥
 *
√xt
; \

248 
	`zí_as£π
 (
li°
); \

249 
	`zí_as£π
 (
func
); \

250  
ñem
 = 
«me
##
	`_hód
(
li°
) , \

251 
√xt
 = 
ñem
?
«me
##
	`_√xt
((
li°
),ñem):
NULL
; \

252 
ñem
 !
NULL
; \

253 
ñem
 = 
√xt
, \

254 
√xt
 = 
ñem
?
«me
##
	`_√xt
((
li°
),ñem):
NULL
) \

256 
	`func
(
ñem
,
p
); \

258 }

	)

261 
	#DECLARE_LIST_FILTER
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

262 
modifõrs
 
«me
##
	`_fûãr
(
ZíLi°
 *
li°
,(*
func
)(
ty≥
*,*),* 
p
)\

264 
ty≥
 *
ñem
; \

265 
ty≥
 *
√xt
; \

266 
	`zí_as£π
 (
li°
); \

267 
	`zí_as£π
 (
func
); \

268  
ñem
 = 
«me
##
	`_hód
(
li°
) , \

269 
√xt
 = 
ñem
?
«me
##
	`_√xt
((
li°
),ñem):
NULL
; \

270 
ñem
 !
NULL
; \

271 
ñem
 = 
√xt
, \

272 
√xt
 = 
ñem
?
«me
##
	`_√xt
((
li°
),ñem):
NULL
) \

274 if(!
	`func
(
ñem
,
p
)){
«me
##
	`_ªmove
(
li°
,elem);} \

276 }

	)

278 
	#DECLARE_LIST_ITERATOR
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

279 
modifõrs
 
«me
##
	`_f‹óch
(
ZíLi°
 *
li°
,(*
func
)(
ty≥
*,*)) \

281 
ty≥
 *
ñem
; \

282 
ty≥
 *
√xt
; \

283 
	`zí_as£π
 (
li°
); \

284 
	`zí_as£π
 (
func
); \

285  
ñem
 = 
«me
##
	`_hód
(
li°
) , \

286 
√xt
 = 
ñem
?
«me
##
	`_√xt
((
li°
),ñem):
NULL
; \

287 
ñem
 !
NULL
; \

288 
ñem
 = 
√xt
, \

289 
√xt
 = 
ñem
?
«me
##
	`_√xt
((
li°
),ñem):
NULL
) \

291 
	`func
(
ñem
,
NULL
); \

293 }

	)

295 
	#DECLARE_LIST_FIND32
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

296 
modifõrs
 
ty≥
* 
«me
##
_föd_
##
	`membî
(
ZíLi°
 *
li°
,
UTIL_U32
 
key
) \

298 
ty≥
 *
ñem
; \

299 
	`zí_as£π
 (
li°
); \

300  
ñem
 = 
«me
##
	`_hód
((
li°
)); \

301 
ñem
 !
NULL
; \

302 
ñem
 = 
«me
##
	`_√xt
((
li°
),elem)) \

304 if–
ñem
->
membî
 =
key
) \

307  
ñem
; \

308 }

	)

310 
	#DECLARE_LIST_FIND64
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

311 
modifõrs
 
ty≥
* 
«me
##
_föd_
##
	`membî
(
ZíLi°
 *
li°
,
UTIL_U64
 
key
) \

313 
ty≥
 *
ñem
; \

314 
	`zí_as£π
 (
li°
); \

315  
ñem
 = 
«me
##
	`_hód
((
li°
)); \

316 
ñem
 !
NULL
; \

317 
ñem
 = 
«me
##
	`_√xt
((
li°
),elem)) \

319 if–
ñem
->
membî
 =
key
) \

322  
ñem
; \

323 }

	)

325 
	#DECLARE_LIST_FIND_STRING
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

326 
modifõrs
 
ty≥
* 
«me
##
_föd_
##
	`membî
(
ZíLi°
 *
li°
,c⁄° *
key
) \

328 
ty≥
 *
ñem
; \

329 
	`zí_as£π
 (
li°
); \

330 
	`zí_as£π
 (
key
); \

331  
ñem
 = 
«me
##
	`_hód
((
li°
)); \

332 
ñem
 !
NULL
; \

333 
ñem
 = 
«me
##
	`_√xt
((
li°
),elem)) \

335 if–
	`°rcmp
(
ñem
->
membî
,
key
) == 0 ) \

338  
ñem
; \

339 }

	)

341 
	#DECLARE_LIST_FIND_MEMBER
(
«me
,
ty≥
,
mty≥
,
membî
,
modifõrs
...) \

342 
modifõrs
 
ty≥
* 
«me
##
_föd_
##
	`membî
(
ZíLi°
 *
li°
,
mty≥
 
key
) \

344 
ty≥
 *
ñem
; \

345 
	`zí_as£π
 (
li°
); \

346  
ñem
 = 
«me
##
	`_hód
((
li°
)); \

347 
ñem
 !
NULL
; \

348 
ñem
 = 
«me
##
	`_√xt
((
li°
),elem)) \

350 if–
ñem
->
membî
 =
key
) \

353  
ñem
; \

354 }

	)

356 
	#DECLARE_LIST_FIND_FUNC
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

357 
modifõrs
 
ty≥
* 
«me
##
	`_föd
(
ZíLi°
 *
li°
,(*
func
)(type*)) \

359 
ty≥
 *
ñem
; \

360 
	`zí_as£π
 (
li°
); \

361 
	`zí_as£π
 (
func
); \

362  
ñem
 = 
«me
##
	`_hód
((
li°
)); \

363 
ñem
 !
NULL
; \

364 
ñem
 = 
«me
##
	`_√xt
((
li°
),elem)) \

366 if–
	`func
(
ñem
) == 0) \

369  
ñem
; \

370 }

	)

372 
	#ZEN_LIST_FOREACH
(
«me
,
li°
,
ñem
) \

373  
ñem
 = 
«me
##
	`_hód
((
li°
)); \

374 
ñem
 !
NULL
; \

375 
ñem
 = 
«me
##
	`_√xt
((
li°
),elem)) \

376 

	)

378 
	#DECLARE_LIST_FUNCTIONS
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

379 
	`DECLARE_LIST_INIT
(
«me
,
ty≥
,
membî
,
modifõrs
) \

380 
	`DECLARE_LIST_HEAD
(
«me
,
ty≥
,
membî
,
modifõrs
) \

381 
	`DECLARE_LIST_TAIL
(
«me
,
ty≥
,
membî
,
modifõrs
) \

382 
	`DECLARE_LIST_NEXT
(
«me
,
ty≥
,
membî
,
modifõrs
) \

383 
	`DECLARE_LIST_PREV
(
«me
,
ty≥
,
membî
,
modifõrs
) \

384 
	`DECLARE_LIST_INSERT_AFTER
(
«me
,
ty≥
,
membî
,
modifõrs
) \

385 
	`DECLARE_LIST_INSERT_BEFORE
(
«me
,
ty≥
,
membî
,
modifõrs
) \

386 
	`DECLARE_LIST_PUSH
(
«me
,
ty≥
,
membî
,
modifõrs
) \

387 
	`DECLARE_LIST_POP
(
«me
,
ty≥
,
membî
,
modifõrs
) \

388 
	`DECLARE_LIST_REMOVE
(
«me
,
ty≥
,
membî
,
modifõrs
)

	)

391 
	#LIST_INITIALIZER
(
li°
, 
ty≥
,
membî
) \

393 .
hód
 = {.
√xt
&(
li°
.hód),.
¥ev
= &(list.head)}, \

394 .
off£t
 = (
	`OFFSET_OF
(
membî
,
ty≥
)), \

395 .
cou¡
 = (0) \

396 }

	)

399 
	#DEFINE_GLOBAL_LIST_INIT
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

400 
modifõrs
 
«me
##
	`_öô
() \

402 
	`zí_li°_öô
 ( 
«me
, 
	`OFFSET_OF
(
membî
,
ty≥
) ); \

403 }

	)

406 
	#DEFINE_GLOBAL_LIST_INSERT_AFTER
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

407 
modifõrs
 
«me
##
	`_ö£π_a·î
–
ty≥
 *
_node
,Åy≥ *
d©a
) \

409 
	`zí_as£π
 (
d©a
); \

410 
	`zí_li°_ö£π_a·î
(
«me
, 
_node
 , 
d©a
 ); \

411 }

	)

414 
	#DEFINE_GLOBAL_LIST_INSERT_BEFORE
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

415 
modifõrs
 
«me
##
	`_ö£π_bef‹e
–
ty≥
 *
_node
,Åy≥ *
d©a
)\

417 
	`zí_as£π
 (
d©a
); \

418 
	`zí_li°_ö£π_bef‹e
(
«me
, 
_node
 , 
d©a
 ); \

419 }

	)

421 
	#DEFINE_GLOBAL_LIST_HEAD
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

422 
modifõrs
 
ty≥
 * 
«me
##
	`_hód
() \

424  (
ty≥
*Ë
	`zí_li°_hód
(
«me
); \

425 }

	)

427 
	#DEFINE_GLOBAL_LIST_TAIL
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

428 
modifõrs
 
ty≥
 * 
«me
##
	`_èû
() \

430  (
ty≥
*Ë
	`zí_li°_èû
(
«me
); \

431 }

	)

433 
	#DEFINE_GLOBAL_LIST_NEXT
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

434 
modifõrs
 
ty≥
 * 
«me
##
	`_√xt
–ty≥ *
d©a
) \

436 
	`zí_as£π
 (
d©a
); \

437  (
ty≥
*Ë
	`zí_li°_√xt
(
«me
, 
d©a
); \

438 }

	)

440 
	#DEFINE_GLOBAL_LIST_PREV
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

441 
modifõrs
 
ty≥
 * 
«me
##
	`_¥ev
–ty≥ *
d©a
) \

443 
	`zí_as£π
 (
d©a
); \

444  (
ty≥
*Ë
	`zí_li°_¥ev
(
«me
, 
d©a
); \

445 }

	)

447 
	#DEFINE_GLOBAL_LIST_REMOVE
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

448 
modifõrs
 
«me
##
	`_ªmove
(
ty≥
 *
d©a
){ \

449 
	`zí_as£π
 (
d©a
); \

450 
	`zí_li°_ªmove
 (
«me
,
d©a
); \

451 }

	)

453 
	#DEFINE_GLOBAL_LIST_PUSH_HEAD
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

454 
modifõrs
 
«me
##
	`_push_hód
(
ty≥
 *
d©a
) \

456 
	`zí_as£π
 (
d©a
); \

457 
	`zí_li°_ö£π_hód
(
«me
,
d©a
); \

459 

	)

460 
	#DEFINE_GLOBAL_LIST_PUSH_TAIL
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

461 
modifõrs
 
«me
##
	`_push_èû
(
ty≥
 *
d©a
) \

463 
	`zí_as£π
 (
d©a
); \

464 
	`zí_li°_ö£π_èû
(
«me
,
d©a
); \

465 }

	)

467 
	#DEFINE_GLOBAL_LIST_POP_HEAD
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

468 
modifõrs
 
ty≥
* 
«me
##
	`_p›_hód
 () \

470 *
d©a
 = 
NULL
; \

471 
d©a
 = 
	`zí_li°_ªmove_hód
 (
«me
); \

472  
d©a
; \

474 

	)

475 
	#DEFINE_GLOBAL_LIST_POP_TAIL
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

476 
modifõrs
 
ty≥
* 
«me
##
	`_p›_èû
 () \

478 *
d©a
 = 
NULL
; \

479 
d©a
 = 
	`zí_li°_ªmove_èû
 (
«me
); \

480  
d©a
; \

482 

	)

484 
	#DEFINE_GLOBAL_LIST_FOLDL
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

485 
modifõrs
 
«me
##
	`_fﬁdl
((*
func
)(
ty≥
*,*),* 
p
)\

487 
ty≥
 *
ñem
; \

488 
ty≥
 *
√xt
; \

489 
	`zí_as£π
 (
func
); \

490  
ñem
 = 
«me
##
	`_èû
(name) , \

491 
√xt
 = 
ñem
?
«me
##
	`_¥ev
(“ame),ñem):
NULL
; \

492 
ñem
 !
NULL
; \

493 
ñem
 = 
√xt
, \

494 
√xt
 = 
ñem
?
«me
##
	`_¥ev
(“ame),ñem):
NULL
) \

496 
	`func
(
ñem
,
p
); \

498 }

	)

500 
	#DEFINE_GLOBAL_LIST_FOLDR
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

501 
modifõrs
 
«me
##
	`_fﬁdr
((*
func
)(
ty≥
*,*),* 
p
)\

503 
ty≥
 *
ñem
; \

504 
ty≥
 *
√xt
; \

505 
	`zí_as£π
 (
func
); \

506  
ñem
 = 
«me
##
	`_hód
(name) , \

507 
√xt
 = 
ñem
?
«me
##
	`_√xt
(“ame),ñem):
NULL
; \

508 
ñem
 !
NULL
; \

509 
ñem
 = 
√xt
, \

510 
√xt
 = 
ñem
?
«me
##
	`_√xt
(“ame),ñem):
NULL
) \

512 
	`func
(
ñem
,
p
); \

514 }

	)

517 
	#DEFINE_GLOBAL_LIST_FILTER
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

518 
modifõrs
 
«me
##
	`_fûãr
((*
func
)(
ty≥
*,*),* 
p
)\

520 
ty≥
 *
ñem
; \

521 
ty≥
 *
√xt
; \

522 
	`zí_as£π
 (
func
); \

523  
ñem
 = 
«me
##
	`_hód
(name) , \

524 
√xt
 = 
ñem
?
«me
##
	`_√xt
(“ame),ñem):
NULL
; \

525 
ñem
 !
NULL
; \

526 
ñem
 = 
√xt
, \

527 
√xt
 = 
ñem
?
«me
##
	`_√xt
(“ame),ñem):
NULL
) \

529 if(!
	`func
(
ñem
,
p
)){
«me
##
	`_ªmove
(name,elem);} \

531 }

	)

533 
	#DEFINE_GLOBAL_LIST_ITERATOR
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

534 
modifõrs
 
«me
##
	`_f‹óch
((*
func
)(
ty≥
*,*)) \

536 
ty≥
 *
ñem
; \

537 
ty≥
 *
√xt
; \

538 
	`zí_as£π
 (
«me
); \

539 
	`zí_as£π
 (
func
); \

540  
ñem
 = 
«me
##
	`_hód
(name) , \

541 
√xt
 = 
ñem
?
«me
##
	`_√xt
(“ame),ñem):
NULL
; \

542 
ñem
 !
NULL
; \

543 
ñem
 = 
√xt
, \

544 
√xt
 = 
ñem
?
«me
##
	`_√xt
(“ame),ñem):
NULL
) \

546 
	`func
(
ñem
,
NULL
); \

548 }

	)

550 
	#DEFINE_GLOBAL_LIST_FIND32
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

551 
modifõrs
 
ty≥
* 
«me
##
_föd_
##
	`membî
(
UTIL_U32
 
key
) \

553 
ty≥
 *
ñem
; \

554 
	`zí_as£π
 (
«me
); \

555  
ñem
 = 
«me
##
	`_hód
((name)); \

556 
ñem
 !
NULL
; \

557 
ñem
 = 
«me
##
	`_√xt
((name),elem)) \

559 if–
ñem
->
membî
 =
key
) \

562  
ñem
; \

563 }

	)

565 
	#DEFINE_GLOBAL_LIST_FIND64
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

566 
modifõrs
 
ty≥
* 
«me
##
_föd_
##
	`membî
(
UTIL_U64
 
key
) \

568 
ty≥
 *
ñem
; \

569 
	`zí_as£π
 (
«me
); \

570  
ñem
 = 
«me
##
	`_hód
((name)); \

571 
ñem
 !
NULL
; \

572 
ñem
 = 
«me
##
	`_√xt
((name),elem)) \

574 if–
ñem
->
membî
 =
key
) \

577  
ñem
; \

578 }

	)

580 
	#DEFINE_GLOBAL_LIST_FIND_STRING
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

581 
modifõrs
 
ty≥
* 
«me
##
_föd_
##
	`membî
(c⁄° *
key
) \

583 
ty≥
 *
ñem
; \

584 
	`zí_as£π
 (
«me
); \

585 
	`zí_as£π
 (
key
); \

586  
ñem
 = 
«me
##
	`_hód
((name)); \

587 
ñem
 !
NULL
; \

588 
ñem
 = 
«me
##
	`_√xt
((name),elem)) \

590 if–
	`°rcmp
(
ñem
->
membî
,
key
) == 0 ) \

593  
ñem
; \

594 }

	)

596 
	#DEFINE_GLOBAL_LIST_FIND_MEMBER
(
«me
,
ty≥
,
mty≥
,
membî
,
modifõrs
...) \

597 
modifõrs
 
ty≥
* 
«me
##
_föd_
##
	`membî
(
mty≥
 
key
) \

599 
ty≥
 *
ñem
; \

600 
	`zí_as£π
 (
«me
); \

601  
ñem
 = 
«me
##
	`_hód
((name)); \

602 
ñem
 !
NULL
; \

603 
ñem
 = 
«me
##
	`_√xt
((name),elem)) \

605 if–
ñem
->
membî
 =
key
) \

608  
ñem
; \

609 }

	)

611 
	#DEFINE_GLOBAL_LIST_FIND_FUNC
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

612 
modifõrs
 
ty≥
* 
«me
##
	`_föd
((*
func
)(type*)) \

614 
ty≥
 *
ñem
; \

615 
	`zí_as£π
 (
«me
); \

616 
	`zí_as£π
 (
func
); \

617  
ñem
 = 
«me
##
	`_hód
((name)); \

618 
ñem
 !
NULL
; \

619 
ñem
 = 
«me
##
	`_√xt
((name),elem)) \

621 if–
	`func
(
ñem
) == 0) \

624  
ñem
; \

625 }

	)

627 
	#ZEN_GLOBAL_LIST_FOREACH
(
«me
,
ñem
) \

628  
ñem
 = 
«me
##
	`_hód
((name)); \

629 
ñem
 !
NULL
; \

630 
ñem
 = 
«me
##
	`_√xt
((name),elem)) \

631 

	)

632 
	#DEFINE_GLOBAL_LIST_DEFINE
(
«me
,
ty≥
,
membî
,
modifõrs
...)\

633 
ZíLi°
 
«me
##
_li°
 = 
	`LIST_INITIALIZER
“ame##_li°,
ty≥
,
membî
); \

634 
ZíLi°
 *
«me
 = &«me##
_li°
;

	)

636 
	#DEFINE_GLOBAL_LIST_FUNCTIONS
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

637 
	`DEFINE_GLOBAL_LIST_DEFINE
(
«me
,
ty≥
,
membî
,
modifõrs
) \

638 
	`DEFINE_GLOBAL_LIST_INIT
(
«me
,
ty≥
,
membî
,
modifõrs
) \

639 
	`DEFINE_GLOBAL_LIST_HEAD
(
«me
,
ty≥
,
membî
,
modifõrs
) \

640 
	`DEFINE_GLOBAL_LIST_TAIL
(
«me
,
ty≥
,
membî
,
modifõrs
) \

641 
	`DEFINE_GLOBAL_LIST_NEXT
(
«me
,
ty≥
,
membî
,
modifõrs
) \

642 
	`DEFINE_GLOBAL_LIST_PREV
(
«me
,
ty≥
,
membî
,
modifõrs
) \

643 
	`DEFINE_GLOBAL_LIST_INSERT_AFTER
(
«me
,
ty≥
,
membî
,
modifõrs
) \

644 
	`DEFINE_GLOBAL_LIST_INSERT_BEFORE
(
«me
,
ty≥
,
membî
,
modifõrs
) \

645 
	`DEFINE_GLOBAL_LIST_PUSH_HEAD
(
«me
,
ty≥
,
membî
,
modifõrs
) \

646 
	`DEFINE_GLOBAL_LIST_PUSH_TAIL
(
«me
,
ty≥
,
membî
,
modifõrs
) \

647 
	`DEFINE_GLOBAL_LIST_POP_HEAD
(
«me
,
ty≥
,
membî
,
modifõrs
) \

648 
	`DEFINE_GLOBAL_LIST_POP_TAIL
(
«me
,
ty≥
,
membî
,
modifõrs
) \

649 
	`DEFINE_GLOBAL_LIST_REMOVE
(
«me
,
ty≥
,
membî
,
modifõrs
)

	)

651 
	#DECLARE_GLOBAL_LIST_INIT
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

652 
modifõrs
 
«me
##
	`_öô
();

	)

654 
	#DECLARE_GLOBAL_LIST_INSERT_AFTER
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

655 
modifõrs
 
«me
##
	`_ö£π_a·î
–
ty≥
 *
_node
,Åy≥ *
d©a
);

	)

657 
	#DECLARE_GLOBAL_LIST_INSERT_BEFORE
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

658 
modifõrs
 
«me
##
	`_ö£π_bef‹e
–
ty≥
 *
_node
,Åy≥ *
d©a
);

	)

660 
	#DECLARE_GLOBAL_LIST_HEAD
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

661 
modifõrs
 
ty≥
 * 
«me
##
	`_hód
();

	)

663 
	#DECLARE_GLOBAL_LIST_TAIL
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

664 
modifõrs
 
ty≥
 * 
«me
##
	`_èû
();

	)

666 
	#DECLARE_GLOBAL_LIST_NEXT
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

667 
modifõrs
 
ty≥
 * 
«me
##
	`_√xt
–ty≥ *
d©a
);

	)

669 
	#DECLARE_GLOBAL_LIST_PREV
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

670 
modifõrs
 
ty≥
 * 
«me
##
	`_¥ev
–ty≥ *
d©a
Ë;

	)

672 
	#DECLARE_GLOBAL_LIST_REMOVE
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

673 
modifõrs
 
«me
##
	`_ªmove
(
ty≥
 *
d©a
);

	)

675 
	#DECLARE_GLOBAL_LIST_PUSH
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

676 
modifõrs
 
«me
##
	`_push_hód
(
ty≥
 *
d©a
); \

677 
modifõrs
 
«me
##
	`_push_èû
(
ty≥
 *
d©a
);

	)

679 
	#DECLARE_GLOBAL_LIST_POP
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

680 
modifõrs
 
ty≥
* 
«me
##
	`_p›_hód
 ();\

681 
modifõrs
 
ty≥
* 
«me
##
	`_p›_èû
 ();

	)

684 
	#DECLARE_GLOBAL_LIST_FOLDL
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

685 
modifõrs
 
«me
##
	`_fﬁdl
((*
func
)(
ty≥
*,*),* 
p
);

	)

687 
	#DECLARE_GLOBAL_LIST_FOLDR
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

688 
modifõrs
 
«me
##
	`_fﬁdr
((*
func
)(
ty≥
*,*),* 
p
);

	)

690 
	#DECLARE_GLOBAL_LIST_FILTER
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

691 
modifõrs
 
«me
##
	`_fûãr
((*
func
)(
ty≥
*,*),* 
p
);

	)

692 
	#DECLARE_GLOBAL_LIST_ITERATOR
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

693 
modifõrs
 
«me
##
	`_f‹óch
((*
func
)(
ty≥
*,*));

	)

694 
	#DECLARE_GLOBAL_LIST_FIND32
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

695 
modifõrs
 
ty≥
* 
«me
##
_föd_
##
	`membî
(
UTIL_U32
 
key
);

	)

696 
	#DECLARE_GLOBAL_LIST_FIND64
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

697 
modifõrs
 
ty≥
* 
«me
##
_föd_
##
	`membî
(
UTIL_U64
 
key
);

	)

698 
	#DECLARE_GLOBAL_LIST_FIND_STRING
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

699 
modifõrs
 
ty≥
* 
«me
##
_föd_
##
	`membî
(c⁄° *
key
);

	)

701 
	#DECLARE_GLOBAL_LIST_FIND_MEMBER
(
«me
,
ty≥
,
mty≥
,
membî
,
modifõrs
...) \

702 
modifõrs
 
ty≥
* 
«me
##
_föd_
##
	`membî
(
mty≥
 
key
);

	)

703 
	#DECLARE_GLOBAL_LIST_FIND_FUNC
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

704 
modifõrs
 
ty≥
* 
«me
##
	`_föd
((*
func
)—y≥*));

	)

706 
	#DECLARE_GLOBAL_LIST_FUNCTIONS
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

707 
	`DECLARE_GLOBAL_LIST_INIT
(
«me
,
ty≥
,
membî
,
modifõrs
) \

708 
	`DECLARE_GLOBAL_LIST_HEAD
(
«me
,
ty≥
,
membî
,
modifõrs
) \

709 
	`DECLARE_GLOBAL_LIST_TAIL
(
«me
,
ty≥
,
membî
,
modifõrs
) \

710 
	`DECLARE_GLOBAL_LIST_NEXT
(
«me
,
ty≥
,
membî
,
modifõrs
) \

711 
	`DECLARE_GLOBAL_LIST_PREV
(
«me
,
ty≥
,
membî
,
modifõrs
) \

712 
	`DECLARE_GLOBAL_LIST_INSERT_AFTER
(
«me
,
ty≥
,
membî
,
modifõrs
) \

713 
	`DECLARE_GLOBAL_LIST_INSERT_BEFORE
(
«me
,
ty≥
,
membî
,
modifõrs
) \

714 
	`DECLARE_GLOBAL_LIST_PUSH
(
«me
,
ty≥
,
membî
,
modifõrs
) \

715 
	`DECLARE_GLOBAL_LIST_POP
(
«me
,
ty≥
,
membî
,
modifõrs
) \

716 
	`DECLARE_GLOBAL_LIST_REMOVE
(
«me
,
ty≥
,
membî
,
modifõrs
)

	)

718 
	#DEFINE_SIMPLE_GLOBAL_LIST_FUNCTIONS
(
«me
,
ty≥
,
membî
,
modifõrs
...) \

719 
	`DEFINE_GLOBAL_LIST_DEFINE
(
«me
,
ty≥
,
membî
,
modifõrs
) \

720 
	`DEFINE_GLOBAL_LIST_HEAD
(
«me
,
ty≥
,
membî
,
modifõrs
) \

721 
	`DEFINE_GLOBAL_LIST_NEXT
(
«me
,
ty≥
,
membî
,
modifõrs
) \

722 
	`DEFINE_GLOBAL_LIST_PUSH_HEAD
(
«me
,
ty≥
,
membî
,
modifõrs
) \

723 
	`DEFINE_GLOBAL_LIST_REMOVE
(
«me
,
ty≥
,
membî
,
modifõrs
)

	)

725 #ifde‡
__˝lu•lus


	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/locale.h

23 #i‚def 
_LOCALE_H


24 
	#_LOCALE_H
 1

	)

26 
	~<„©uªs.h
>

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

30 
	~<bôs/loˇÀ.h
>

32 
	g__BEGIN_DECLS


36 
	#LC_CTYPE
 
__LC_CTYPE


	)

37 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

38 
	#LC_TIME
 
__LC_TIME


	)

39 
	#LC_COLLATE
 
__LC_COLLATE


	)

40 
	#LC_MONETARY
 
__LC_MONETARY


	)

41 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

42 
	#LC_ALL
 
__LC_ALL


	)

43 
	#LC_PAPER
 
__LC_PAPER


	)

44 
	#LC_NAME
 
__LC_NAME


	)

45 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

46 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

47 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

48 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

51 
__BEGIN_NAMESPACE_STD


54 
	slc⁄v


58 *
	mdecimÆ_poöt
;

59 *
	mthoußnds_£p
;

65 *
	mgroupög
;

71 *
	möt_cuº_symbﬁ
;

72 *
	mcuºícy_symbﬁ
;

73 *
	mm⁄_decimÆ_poöt
;

74 *
	mm⁄_thoußnds_£p
;

75 *
	mm⁄_groupög
;

76 *
	mposôive_sign
;

77 *
	m√g©ive_sign
;

78 
	möt_‰ac_digôs
;

79 
	m‰ac_digôs
;

81 
	mp_cs_¥e˚des
;

83 
	mp_£p_by_•a˚
;

85 
	mn_cs_¥e˚des
;

87 
	mn_£p_by_•a˚
;

94 
	mp_sign_po¢
;

95 
	mn_sign_po¢
;

96 #ifde‡
__USE_ISOC99


98 
	möt_p_cs_¥e˚des
;

100 
	möt_p_£p_by_•a˚
;

102 
	möt_n_cs_¥e˚des
;

104 
	möt_n_£p_by_•a˚
;

111 
	möt_p_sign_po¢
;

112 
	möt_n_sign_po¢
;

114 
	m__öt_p_cs_¥e˚des
;

115 
	m__öt_p_£p_by_•a˚
;

116 
	m__öt_n_cs_¥e˚des
;

117 
	m__öt_n_£p_by_•a˚
;

118 
	m__öt_p_sign_po¢
;

119 
	m__öt_n_sign_po¢
;

125 *
	$£éoˇÀ
 (
__ˇãg‹y
, 
__c⁄°
 *
__loˇÀ
Ë
__THROW
;

128 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

130 
__END_NAMESPACE_STD


133 #ifdef 
__USE_XOPEN2K8


146 
	~<xloˇÀ.h
>

152 
__loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, 
__c⁄°
 *
__loˇÀ
,

153 
__loˇÀ_t
 
__ba£
Ë
__THROW
;

159 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

160 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

161 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

162 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

163 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

164 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

165 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

166 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

167 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

168 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

169 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

170 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

171 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

172 | 
LC_NUMERIC_MASK
 \

173 | 
LC_TIME_MASK
 \

174 | 
LC_COLLATE_MASK
 \

175 | 
LC_MONETARY_MASK
 \

176 | 
LC_MESSAGES_MASK
 \

177 | 
LC_PAPER_MASK
 \

178 | 
LC_NAME_MASK
 \

179 | 
LC_ADDRESS_MASK
 \

180 | 
LC_TELEPHONE_MASK
 \

181 | 
LC_MEASUREMENT_MASK
 \

182 | 
LC_IDENTIFICATION_MASK
 \

183 )

	)

187 
__loˇÀ_t
 
	$du∂oˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

191 
	$‰ìloˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

198 
__loˇÀ_t
 
	$u£loˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

202 
	#LC_GLOBAL_LOCALE
 ((
__loˇÀ_t
Ë-1L)

	)

206 
__END_DECLS


	@/usr/include/regex.h

22 #i‚de‡
_REGEX_H


23 
	#_REGEX_H
 1

	)

25 
	~<sys/ty≥s.h
>

26 
	~<gnu/›ti⁄-groups.h
>

29 #ifde‡
__˝lu•lus


37 
	ts_ªg_t
;

38 
	ta˘ive_ªg_t
;

45 
	tªg_sy¡ax_t
;

47 #ifde‡
__USE_GNU


50 
	#RE_BACKSLASH_ESCAPE_IN_LISTS
 ((Ë1)

	)

55 
	#RE_BK_PLUS_QM
 (
RE_BACKSLASH_ESCAPE_IN_LISTS
 << 1)

	)

61 
	#RE_CHAR_CLASSES
 (
RE_BK_PLUS_QM
 << 1)

	)

75 
	#RE_CONTEXT_INDEP_ANCHORS
 (
RE_CHAR_CLASSES
 << 1)

	)

83 
	#RE_CONTEXT_INDEP_OPS
 (
RE_CONTEXT_INDEP_ANCHORS
 << 1)

	)

87 
	#RE_CONTEXT_INVALID_OPS
 (
RE_CONTEXT_INDEP_OPS
 << 1)

	)

91 
	#RE_DOT_NEWLINE
 (
RE_CONTEXT_INVALID_OPS
 << 1)

	)

95 
	#RE_DOT_NOT_NULL
 (
RE_DOT_NEWLINE
 << 1)

	)

99 
	#RE_HAT_LISTS_NOT_NEWLINE
 (
RE_DOT_NOT_NULL
 << 1)

	)

104 
	#RE_INTERVALS
 (
RE_HAT_LISTS_NOT_NEWLINE
 << 1)

	)

108 
	#RE_LIMITED_OPS
 (
RE_INTERVALS
 << 1)

	)

112 
	#RE_NEWLINE_ALT
 (
RE_LIMITED_OPS
 << 1)

	)

117 
	#RE_NO_BK_BRACES
 (
RE_NEWLINE_ALT
 << 1)

	)

121 
	#RE_NO_BK_PARENS
 (
RE_NO_BK_BRACES
 << 1)

	)

125 
	#RE_NO_BK_REFS
 (
RE_NO_BK_PARENS
 << 1)

	)

129 
	#RE_NO_BK_VBAR
 (
RE_NO_BK_REFS
 << 1)

	)

135 
	#RE_NO_EMPTY_RANGES
 (
RE_NO_BK_VBAR
 << 1)

	)

139 
	#RE_UNMATCHED_RIGHT_PAREN_ORD
 (
RE_NO_EMPTY_RANGES
 << 1)

	)

143 
	#RE_NO_POSIX_BACKTRACKING
 (
RE_UNMATCHED_RIGHT_PAREN_ORD
 << 1)

	)

147 
	#RE_NO_GNU_OPS
 (
RE_NO_POSIX_BACKTRACKING
 << 1)

	)

155 
	#RE_DEBUG
 (
RE_NO_GNU_OPS
 << 1)

	)

160 
	#RE_INVALID_INTERVAL_ORD
 (
RE_DEBUG
 << 1)

	)

163 #ifde‡
__OPTION_POSIX_REGEXP_GLIBC


166 
	#RE_ICASE
 (
RE_INVALID_INTERVAL_ORD
 << 1)

	)

171 
	#RE_CARET_ANCHORS_HERE
 (
RE_ICASE
 << 1)

	)

175 
	#RE_CONTEXT_INVALID_DUP
 (
RE_CARET_ANCHORS_HERE
 << 1)

	)

179 
	#RE_NO_SUB
 (
RE_CONTEXT_INVALID_DUP
 << 1)

	)

187 
ªg_sy¡ax_t
 
ª_sy¡ax_›ti⁄s
;

189 #ifde‡
__USE_GNU


194 
	#RE_SYNTAX_EMACS
 0

	)

196 
	#RE_SYNTAX_AWK
 \

197 (
RE_BACKSLASH_ESCAPE_IN_LISTS
 | 
RE_DOT_NOT_NULL
 \

198 | 
RE_NO_BK_PARENS
 | 
RE_NO_BK_REFS
 \

199 | 
RE_NO_BK_VBAR
 | 
RE_NO_EMPTY_RANGES
 \

200 | 
RE_DOT_NEWLINE
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

201 | 
RE_UNMATCHED_RIGHT_PAREN_ORD
 | 
RE_NO_GNU_OPS
)

	)

203 
	#RE_SYNTAX_GNU_AWK
 \

204 ((
RE_SYNTAX_POSIX_EXTENDED
 | 
RE_BACKSLASH_ESCAPE_IN_LISTS
 | 
RE_DEBUG
) \

205 & ~(
RE_DOT_NOT_NULL
 | 
RE_INTERVALS
 | 
RE_CONTEXT_INDEP_OPS
 \

206 | 
RE_CONTEXT_INVALID_OPS
 ))

	)

208 
	#RE_SYNTAX_POSIX_AWK
 \

209 (
RE_SYNTAX_POSIX_EXTENDED
 | 
RE_BACKSLASH_ESCAPE_IN_LISTS
 \

210 | 
RE_INTERVALS
 | 
RE_NO_GNU_OPS
)

	)

212 
	#RE_SYNTAX_GREP
 \

213 (
RE_BK_PLUS_QM
 | 
RE_CHAR_CLASSES
 \

214 | 
RE_HAT_LISTS_NOT_NEWLINE
 | 
RE_INTERVALS
 \

215 | 
RE_NEWLINE_ALT
)

	)

217 
	#RE_SYNTAX_EGREP
 \

218 (
RE_CHAR_CLASSES
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

219 | 
RE_CONTEXT_INDEP_OPS
 | 
RE_HAT_LISTS_NOT_NEWLINE
 \

220 | 
RE_NEWLINE_ALT
 | 
RE_NO_BK_PARENS
 \

221 | 
RE_NO_BK_VBAR
)

	)

223 
	#RE_SYNTAX_POSIX_EGREP
 \

224 (
RE_SYNTAX_EGREP
 | 
RE_INTERVALS
 | 
RE_NO_BK_BRACES
 \

225 | 
RE_INVALID_INTERVAL_ORD
)

	)

228 
	#RE_SYNTAX_ED
 
RE_SYNTAX_POSIX_BASIC


	)

230 
	#RE_SYNTAX_SED
 
RE_SYNTAX_POSIX_BASIC


	)

233 
	#_RE_SYNTAX_POSIX_COMMON
 \

234 (
RE_CHAR_CLASSES
 | 
RE_DOT_NEWLINE
 | 
RE_DOT_NOT_NULL
 \

235 | 
RE_INTERVALS
 | 
RE_NO_EMPTY_RANGES
)

	)

237 #ifde‡
__OPTION_POSIX_REGEXP_GLIBC


238 
	#RE_SYNTAX_POSIX_BASIC
 \

239 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_BK_PLUS_QM
 | 
RE_CONTEXT_INVALID_DUP
)

	)

241 
	#RE_SYNTAX_POSIX_BASIC
 \

242 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_BK_PLUS_QM
)

	)

248 
	#RE_SYNTAX_POSIX_MINIMAL_BASIC
 \

249 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_LIMITED_OPS
)

	)

251 
	#RE_SYNTAX_POSIX_EXTENDED
 \

252 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

253 | 
RE_CONTEXT_INDEP_OPS
 | 
RE_NO_BK_BRACES
 \

254 | 
RE_NO_BK_PARENS
 | 
RE_NO_BK_VBAR
 \

255 | 
RE_CONTEXT_INVALID_OPS
 | 
RE_UNMATCHED_RIGHT_PAREN_ORD
)

	)

259 
	#RE_SYNTAX_POSIX_MINIMAL_EXTENDED
 \

260 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

261 | 
RE_CONTEXT_INVALID_OPS
 | 
RE_NO_BK_BRACES
 \

262 | 
RE_NO_BK_PARENS
 | 
RE_NO_BK_REFS
 \

263 | 
RE_NO_BK_VBAR
 | 
RE_UNMATCHED_RIGHT_PAREN_ORD
)

	)

269 #ifde‡
RE_DUP_MAX


270 #unde‡
RE_DUP_MAX


273 
	#RE_DUP_MAX
 (0x7fff)

	)

281 
	#REG_EXTENDED
 1

	)

285 
	#REG_ICASE
 (
REG_EXTENDED
 << 1)

	)

290 
	#REG_NEWLINE
 (
REG_ICASE
 << 1)

	)

294 
	#REG_NOSUB
 (
REG_NEWLINE
 << 1)

	)

304 
	#REG_NOTBOL
 1

	)

307 
	#REG_NOTEOL
 (1 << 1)

	)

309 #ifde‡
__OPTION_POSIX_REGEXP_GLIBC


312 
	#REG_STARTEND
 (1 << 2)

	)

320 #i‡
deföed
 
_XOPEN_SOURCE
 || deföed 
__USE_XOPEN2K


321 
	gREG_ENOSYS
 = -1,

324 
	gREG_NOERROR
 = 0,

325 
	gREG_NOMATCH
,

329 
	gREG_BADPAT
,

330 
	gREG_ECOLLATE
,

331 
	gREG_ECTYPE
,

332 
	gREG_EESCAPE
,

333 
	gREG_ESUBREG
,

334 
	gREG_EBRACK
,

335 
	gREG_EPAREN
,

336 
	gREG_EBRACE
,

337 
	gREG_BADBR
,

338 
	gREG_ERANGE
,

339 
	gREG_ESPACE
,

340 
	gREG_BADRPT
,

343 
	gREG_EEND
,

344 
	gREG_ESIZE
,

345 
	gREG_ERPAREN


346 } 
	tªg_îrcode_t
;

354 #i‚de‡
RE_TRANSLATE_TYPE


355 
	#__RE_TRANSLATE_TYPE
 *

	)

356 #ifde‡
__USE_GNU


357 
	#RE_TRANSLATE_TYPE
 
__RE_TRANSLATE_TYPE


	)

361 #ifde‡
__USE_GNU


362 
	#__REPB_PREFIX
(
«me
Ë
	)
name

364 
	#__REPB_PREFIX
(
«me
Ë
__
##
	)
name

367 
	sª_∑âîn_buf„r


372 *
__REPB_PREFIX
(
buf„r
);

375 
__REPB_PREFIX
(
Æloˇãd
);

378 
__REPB_PREFIX
(
u£d
);

381 
ªg_sy¡ax_t
 
__REPB_PREFIX
(
sy¡ax
);

386 *
__REPB_PREFIX
(
Á°m≠
);

392 
__RE_TRANSLATE_TYPE
 
__REPB_PREFIX
(
å™¶©e
);

395 
size_t
 
	gª_nsub
;

401 
__REPB_PREFIX
(
ˇn_be_nuŒ
) : 1;

407 #ifde‡
__USE_GNU


408 
	#REGS_UNALLOCATED
 0

	)

409 
	#REGS_REALLOCATE
 1

	)

410 
	#REGS_FIXED
 2

	)

412 
__REPB_PREFIX
(
ªgs_Æloˇãd
) : 2;

416 
__REPB_PREFIX
(
Á°m≠_accuøã
) : 1;

420 
__REPB_PREFIX
(
no_sub
) : 1;

424 
__REPB_PREFIX
(
nŸ_bﬁ
) : 1;

427 
__REPB_PREFIX
(
nŸ_eﬁ
) : 1;

430 
__REPB_PREFIX
(
√wlöe_™ch‹
) : 1;

433 
ª_∑âîn_buf„r
 
	tªgex_t
;

436 
	tªgoff_t
;

439 #ifde‡
__USE_GNU


442 
	sª_ªgi°îs


444 
	gnum_ªgs
;

445 
ªgoff_t
 *
	g°¨t
;

446 
ªgoff_t
 *
	gíd
;

453 #i‚de‡
RE_NREGS


454 
	#RE_NREGS
 30

	)

464 
ªgoff_t
 
	grm_so
;

465 
ªgoff_t
 
	grm_eo
;

466 } 
	tªgm©ch_t
;

470 #ifde‡
__USE_GNU


473 
ªg_sy¡ax_t
 
ª_£t_sy¡ax
 (ªg_sy¡ax_à
__sy¡ax
);

478 c⁄° *
ª_compûe_∑âîn
 (c⁄° *
__∑âîn
, 
size_t
 
__Àngth
,

479 
ª_∑âîn_buf„r
 *
__buf„r
);

485 
ª_compûe_Á°m≠
 (
ª_∑âîn_buf„r
 *
__buf„r
);

493 
ª_£¨ch
 (
ª_∑âîn_buf„r
 *
__buf„r
, c⁄° *
__°rög
,

494 
__Àngth
, 
__°¨t
, 
__ønge
,

495 
ª_ªgi°îs
 *
__ªgs
);

500 
ª_£¨ch_2
 (
ª_∑âîn_buf„r
 *
__buf„r
,

501 c⁄° *
__°rög1
, 
__Àngth1
,

502 c⁄° *
__°rög2
, 
__Àngth2
, 
__°¨t
,

503 
__ønge
, 
ª_ªgi°îs
 *
__ªgs
, 
__°›
);

508 
ª_m©ch
 (
ª_∑âîn_buf„r
 *
__buf„r
, c⁄° *
__°rög
,

509 
__Àngth
, 
__°¨t
, 
ª_ªgi°îs
 *
__ªgs
);

513 
ª_m©ch_2
 (
ª_∑âîn_buf„r
 *
__buf„r
,

514 c⁄° *
__°rög1
, 
__Àngth1
,

515 c⁄° *
__°rög2
, 
__Àngth2
, 
__°¨t
,

516 
ª_ªgi°îs
 *
__ªgs
, 
__°›
);

531 
ª_£t_ªgi°îs
 (
ª_∑âîn_buf„r
 *
__buf„r
,

532 
ª_ªgi°îs
 *
__ªgs
,

533 
__num_ªgs
,

534 
ªgoff_t
 *
__°¨ts
,Ñegoff_à*
__íds
);

537 #i‡
deföed
 
_REGEX_RE_COMP
 || (deföed 
_LIBC
 && deföed 
__USE_BSD
)

538 #i‚de‡
_CRAY


540 *
ª_comp
 (const *);

541 
ª_exec
 (const *);

547 #i‚de‡
__ª°ri˘


548 #i‡! (2 < 
__GNUC__
 || (2 =__GNUC__ && 95 <
__GNUC_MINOR__
))

549 #i‡
deföed
 
ª°ri˘
 || 199901L <
__STDC_VERSION__


550 
	#__ª°ri˘
 
ª°ri˘


	)

552 
	#__ª°ri˘


	)

557 #i‚de‡
__ª°ri˘_¨r


558 #i‡(
__GNUC__
 > 3 || (__GNUC__ =3 && 
__GNUC_MINOR__
 >= 1)) \

559 && !
deföed
 
	g__GNUG__


560 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

562 
	#__ª°ri˘_¨r


	)

567 
ªgcomp
 (
ªgex_t
 *
__ª°ri˘
 
__¥eg
,

568 c⁄° *
__ª°ri˘
 
__∑âîn
,

569 
__cÊags
);

571 
ªgexec
 (c⁄° 
ªgex_t
 *
__ª°ri˘
 
__¥eg
,

572 c⁄° *
__ª°ri˘
 
__°rög
, 
size_t
 
__nm©ch
,

573 
ªgm©ch_t
 
__pm©ch
[
__ª°ri˘_¨r
],

574 
__eÊags
);

576 
size_t
 
ªgîr‹
 (
__îrcode
, c⁄° 
ªgex_t
 *
__ª°ri˘
 
__¥eg
,

577 *
__ª°ri˘
 
__îrbuf
, 
size_t
 
__îrbuf_size
);

579 
ªg‰ì
 (
ªgex_t
 *
__¥eg
);

582 #ifde‡
__˝lu•lus


	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


148 
	#P_tmpdú
 "/tmp"

	)

161 
	~<bôs/°dio_lim.h
>

165 
_IO_FILE
 *
°dö
;

166 
_IO_FILE
 *
°dout
;

167 
_IO_FILE
 *
°dîr
;

169 
	#°dö
 
°dö


	)

170 
	#°dout
 
°dout


	)

171 
	#°dîr
 
°dîr


	)

173 
__BEGIN_NAMESPACE_STD


175 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

177 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

178 
__END_NAMESPACE_STD


180 #ifde‡
__USE_ATFILE


182 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

183 
__c⁄°
 *
__√w
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


191 #i‚de‡
__USE_FILE_OFFSET64


192 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

194 #ifde‡
__REDIRECT


195 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

197 
	#tmpfûe
 
tmpfûe64


	)

201 #ifde‡
__USE_LARGEFILE64


202 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

206 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

207 
__END_NAMESPACE_STD


209 #ifde‡
__USE_MISC


212 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

216 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


224 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

225 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

229 
__BEGIN_NAMESPACE_STD


234 
	`f˛o£
 (
FILE
 *
__°ªam
);

239 
	`fÊush
 (
FILE
 *
__°ªam
);

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_MISC


249 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

252 #ifde‡
__USE_GNU


259 
	`f˛o£Æl
 ();

263 
__BEGIN_NAMESPACE_STD


264 #i‚de‡
__USE_FILE_OFFSET64


269 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

270 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

275 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

276 
__c⁄°
 *
__ª°ri˘
 
__modes
,

277 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

279 #ifde‡
__REDIRECT


280 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

281 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

282 
__wur
;

283 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

284 
__c⁄°
 *
__ª°ri˘
 
__modes
,

285 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

286 
__wur
;

288 
	#f›í
 
f›í64


	)

289 
	#‰e›í
 
‰e›í64


	)

292 
__END_NAMESPACE_STD


293 #ifde‡
__USE_LARGEFILE64


294 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

295 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

296 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

297 
__c⁄°
 *
__ª°ri˘
 
__modes
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 #ifdef 
__USE_POSIX


303 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

306 #ifdef 
__USE_GNU


309 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

310 
__c⁄°
 *
__ª°ri˘
 
__modes
,

311 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

314 #ifde‡
__USE_XOPEN2K8


316 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

317 
__THROW
 
__wur
;

322 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

326 
__BEGIN_NAMESPACE_STD


329 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

333 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

334 
__modes
, 
size_t
 
__n
Ë
__THROW
;

335 
__END_NAMESPACE_STD


337 #ifdef 
__USE_BSD


340 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

341 
size_t
 
__size
Ë
__THROW
;

344 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

348 
__BEGIN_NAMESPACE_STD


353 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

354 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

359 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

361 
	$•rötf
 (*
__ª°ri˘
 
__s
,

362 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

368 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

369 
_G_va_li°
 
__¨g
);

374 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

376 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

377 
_G_va_li°
 
__¨g
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


381 
__BEGIN_NAMESPACE_C99


383 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

384 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

385 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

387 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

388 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

389 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

390 
__END_NAMESPACE_C99


393 #ifde‡
__USE_GNU


396 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

397 
_G_va_li°
 
__¨g
)

398 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

399 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

400 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

401 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

402 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

403 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

404 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

407 #ifde‡
__USE_XOPEN2K8


414 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

415 
_G_va_li°
 
__¨g
)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

417 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

418 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

422 
__BEGIN_NAMESPACE_STD


427 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

428 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

435 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

436 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

438 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

439 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

440 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

441 #ifde‡
__REDIRECT


445 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

446 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_fsˇnf
Ë
__wur
;

448 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

449 
__isoc99_sˇnf
Ë
__wur
;

450 
	`__REDIRECT_NTH
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

451 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

452 
__isoc99_ssˇnf
);

454 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

455 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

456 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

457 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

458 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

459 
	#fsˇnf
 
__isoc99_fsˇnf


	)

460 
	#sˇnf
 
__isoc99_sˇnf


	)

461 
	#ssˇnf
 
__isoc99_ssˇnf


	)

465 
__END_NAMESPACE_STD


467 #ifdef 
__USE_ISOC99


468 
__BEGIN_NAMESPACE_C99


473 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

474 
_G_va_li°
 
__¨g
)

475 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

481 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

482 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

485 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

486 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

487 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

489 #i‡!
deföed
 
__USE_GNU
 \

490 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

491 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

492 #ifde‡
__REDIRECT


496 
	`__REDIRECT
 (
vfsˇnf
,

497 (
FILE
 *
__ª°ri˘
 
__s
,

498 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

499 
__isoc99_vfsˇnf
)

500 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

501 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

502 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

503 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

504 
	`__REDIRECT_NTH
 (
vssˇnf
,

505 (
__c⁄°
 *
__ª°ri˘
 
__s
,

506 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

507 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

508 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

510 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

511 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

514 
_G_va_li°
 
__¨g
Ë
__wur
;

515 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

516 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

517 
_G_va_li°
 
__¨g
Ë
__THROW
;

518 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

519 
	#vsˇnf
 
__isoc99_vsˇnf


	)

520 
	#vssˇnf
 
__isoc99_vssˇnf


	)

524 
__END_NAMESPACE_C99


528 
__BEGIN_NAMESPACE_STD


533 
	`fgëc
 (
FILE
 *
__°ªam
);

534 
	`gëc
 (
FILE
 *
__°ªam
);

540 
	`gëch¨
 ();

541 
__END_NAMESPACE_STD


545 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

547 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


552 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

553 
	`gëch¨_u∆ocked
 ();

556 #ifde‡
__USE_MISC


563 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

567 
__BEGIN_NAMESPACE_STD


575 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

576 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

582 
	`putch¨
 (
__c
);

583 
__END_NAMESPACE_STD


587 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

589 #ifde‡
__USE_MISC


596 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

599 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


604 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

605 
	`putch¨_u∆ocked
 (
__c
);

609 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

610 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

612 
	`gëw
 (
FILE
 *
__°ªam
);

615 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

619 
__BEGIN_NAMESPACE_STD


624 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

625 
__wur
;

632 *
	$gës
 (*
__s
Ë
__wur
;

633 
__END_NAMESPACE_STD


635 #ifde‡
__USE_GNU


642 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

643 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

647 #ifdef 
__USE_XOPEN2K8


658 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

659 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

660 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

661 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

662 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

663 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

671 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

672 
size_t
 *
__ª°ri˘
 
__n
,

673 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

677 
__BEGIN_NAMESPACE_STD


682 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

688 
	`puts
 (
__c⁄°
 *
__s
);

695 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

702 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

703 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

708 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

709 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

710 
__END_NAMESPACE_STD


712 #ifde‡
__USE_GNU


719 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

720 
FILE
 *
__ª°ri˘
 
__°ªam
);

723 #ifde‡
__USE_MISC


730 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

731 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

732 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

733 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

737 
__BEGIN_NAMESPACE_STD


742 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

747 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

752 
	`ªwöd
 (
FILE
 *
__°ªam
);

753 
__END_NAMESPACE_STD


760 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


761 #i‚de‡
__USE_FILE_OFFSET64


766 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

771 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

773 #ifde‡
__REDIRECT


774 
	`__REDIRECT
 (
f£eko
,

775 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

776 
f£eko64
);

777 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

779 
	#f£eko
 
f£eko64


	)

780 
	#·ñlo
 
·ñlo64


	)

785 
__BEGIN_NAMESPACE_STD


786 #i‚de‡
__USE_FILE_OFFSET64


791 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

796 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

798 #ifde‡
__REDIRECT


799 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

800 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

801 
	`__REDIRECT
 (
f£ços
,

802 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

804 
	#fgëpos
 
fgëpos64


	)

805 
	#f£ços
 
f£ços64


	)

808 
__END_NAMESPACE_STD


810 #ifde‡
__USE_LARGEFILE64


811 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

812 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

813 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

814 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

817 
__BEGIN_NAMESPACE_STD


819 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

821 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

823 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

824 
__END_NAMESPACE_STD


826 #ifde‡
__USE_MISC


828 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

829 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 
__BEGIN_NAMESPACE_STD


839 
	`≥º‹
 (
__c⁄°
 *
__s
);

840 
__END_NAMESPACE_STD


846 
	~<bôs/sys_îæi°.h
>

849 #ifdef 
__USE_POSIX


851 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

854 #ifde‡
__USE_MISC


856 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

860 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

861 
deföed
 
__USE_MISC
)

866 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

872 
	`p˛o£
 (
FILE
 *
__°ªam
);

876 #ifdef 
__USE_POSIX


878 *
	$˘îmid
 (*
__s
Ë
__THROW
;

882 #ifde‡
__USE_XOPEN


884 *
	`cu£rid
 (*
__s
);

888 #ifdef 
__USE_GNU


889 
ob°ack
;

892 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

893 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

894 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

895 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

896 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

897 
_G_va_li°
 
__¨gs
)

898 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

902 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


906 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

910 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

913 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


920 
	#__√ed_gë›t


	)

921 
	~<gë›t.h
>

926 #ifde‡
__USE_EXTERN_INLINES


927 
	~<bôs/°dio.h
>

929 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


930 
	~<bôs/°dio2.h
>

932 #ifde‡
__LDBL_COMPAT


933 
	~<bôs/°dio-ldbl.h
>

936 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

317 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


319 
	#L_SET
 
SEEK_SET


	)

320 
	#L_INCR
 
SEEK_CUR


	)

321 
	#L_XTND
 
SEEK_END


	)

330 #i‚de‡
__USE_FILE_OFFSET64


331 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

333 #ifde‡
__REDIRECT_NTH


334 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

335 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

336 
l£ek64
);

338 
	#l£ek
 
l£ek64


	)

341 #ifde‡
__USE_LARGEFILE64


342 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

343 
__THROW
;

350 
	`˛o£
 (
__fd
);

357 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

363 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

365 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


366 #i‚de‡
__USE_FILE_OFFSET64


373 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

374 
__off_t
 
__off£t
Ë
__wur
;

381 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

382 
__off_t
 
__off£t
Ë
__wur
;

384 #ifde‡
__REDIRECT


385 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

386 
__off64_t
 
__off£t
),

387 
¥ód64
Ë
__wur
;

388 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

389 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

390 
pwrôe64
Ë
__wur
;

392 
	#¥ód
 
¥ód64


	)

393 
	#pwrôe
 
pwrôe64


	)

397 #ifde‡
__USE_LARGEFILE64


401 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

402 
__off64_t
 
__off£t
Ë
__wur
;

405 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

406 
__off64_t
 
__off£t
Ë
__wur
;

414 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

416 #ifde‡
__USE_GNU


419 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

429 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

441 
	`¶ìp
 (
__£c⁄ds
);

443 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

444 || 
deföed
 
__USE_BSD


449 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

450 
__THROW
;

457 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

466 
	`∑u£
 ();

470 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

471 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

473 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


475 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

480 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

481 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

485 #ifde‡
__USE_ATFILE


488 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

489 
__gid_t
 
__group
, 
__Êag
)

490 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

494 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

496 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


498 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

508 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

510 #ifdef 
__USE_GNU


514 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

517 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

518 || 
deföed
 
__USE_BSD


522 *
	$gëwd
 (*
__buf
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

528 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

531 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

533 #ifde‡
__USE_GNU


536 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

540 **
__ívú⁄
;

541 #ifde‡
__USE_GNU


542 **
ívú⁄
;

548 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

549 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

551 #ifde‡
__USE_XOPEN2K8


554 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

555 
__THROW
 
	`__n⁄nuŒ
 ((2));

560 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

565 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

566 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

570 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

575 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifde‡
__USE_GNU


587 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

588 *
__c⁄°
 
__ívp
[])

589 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

593 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


595 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

600 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

606 
	~<bôs/c⁄‚ame.h
>

609 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

610 
__THROW
 
	`__n⁄nuŒ
 ((1));

613 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

616 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

618 #ifdef 
__USE_POSIX2


620 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

625 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

628 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

632 #i‚de‡
__FAVOR_BSD


633 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

635 #ifde‡
__REDIRECT_NTH


636 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

638 
	#gëpgΩ
 
__gëpgid


	)

643 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

644 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


645 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

652 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

654 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


665 #i‚de‡
__FAVOR_BSD


669 
	$£çgΩ
 (Ë
__THROW
;

674 #ifde‡
__REDIRECT_NTH


675 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

677 
	#£çgΩ
 
£çgid


	)

686 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

688 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


690 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

694 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

697 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

700 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

703 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

708 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

710 #ifdef 
__USE_GNU


712 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

719 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

721 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


724 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

727 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


729 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

736 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

738 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


741 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

744 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


746 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

749 #ifde‡
__USE_GNU


752 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

753 
__THROW
;

757 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

758 
__THROW
;

762 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

763 
__THROW
;

767 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

768 
__THROW
;

775 
__pid_t
 
	$f‹k
 (Ë
__THROW
;

777 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

778 || 
deföed
 
__USE_BSD


783 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

789 *
	$ây«me
 (
__fd
Ë
__THROW
;

793 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

794 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

798 
	$ißây
 (
__fd
Ë
__THROW
;

800 #i‡
deföed
 
__USE_BSD
 \

801 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

804 
	$ây¶Ÿ
 (Ë
__THROW
;

809 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 #ifde‡
__USE_ATFILE


815 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

816 
__c⁄°
 *
__to
, 
__Êags
)

817 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

820 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


822 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

823 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

828 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

829 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

830 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

833 #ifde‡
__USE_ATFILE


835 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

836 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

839 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

840 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

841 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

845 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

847 #ifde‡
__USE_ATFILE


849 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

850 
__THROW
 
	`__n⁄nuŒ
 ((2));

854 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

858 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

861 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

868 *
	`gëlogö
 ();

869 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


876 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

879 #ifdef 
__USE_BSD


881 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

885 #ifdef 
__USE_POSIX2


889 
	#__√ed_gë›t


	)

890 
	~<gë›t.h
>

894 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


898 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

902 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

905 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

906 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

910 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

916 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

917 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

918 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

925 
	$vh™gup
 (Ë
__THROW
;

928 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

936 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

937 
size_t
 
__off£t
, 
__sˇÀ
)

938 
__THROW
 
	`__n⁄nuŒ
 ((1));

944 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

948 *
	$gëu£rshñl
 (Ë
__THROW
;

949 
	$ídu£rshñl
 (Ë
__THROW
;

950 
	$£tu£rshñl
 (Ë
__THROW
;

956 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

960 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

963 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

967 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

971 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


976 
	`fsync
 (
__fd
);

980 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


983 
	`gëho°id
 ();

986 
	$sync
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


992 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

997 
	$gëdèbÀsize
 (Ë
__THROW
;

1003 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1006 #i‚de‡
__USE_FILE_OFFSET64


1007 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

1008 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1010 #ifde‡
__REDIRECT_NTH


1011 
	`__REDIRECT_NTH
 (
åunˇã
,

1012 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1013 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1015 
	#åunˇã
 
åunˇã64


	)

1018 #ifde‡
__USE_LARGEFILE64


1019 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1025 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1028 #i‚de‡
__USE_FILE_OFFSET64


1029 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1031 #ifde‡
__REDIRECT_NTH


1032 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1033 
·runˇã64
Ë
__wur
;

1035 
	#·runˇã
 
·runˇã64


	)

1038 #ifde‡
__USE_LARGEFILE64


1039 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1045 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1046 || 
deföed
 
__USE_MISC


1050 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1056 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1060 #ifde‡
__USE_MISC


1071 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1076 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1088 
	#F_ULOCK
 0

	)

1089 
	#F_LOCK
 1

	)

1090 
	#F_TLOCK
 2

	)

1091 
	#F_TEST
 3

	)

1093 #i‚de‡
__USE_FILE_OFFSET64


1094 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1096 #ifde‡
__REDIRECT


1097 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1098 
lockf64
Ë
__wur
;

1100 
	#lockf
 
lockf64


	)

1103 #ifde‡
__USE_LARGEFILE64


1104 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1109 #ifde‡
__USE_GNU


1114 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1115 (
__exãnsi⁄__
 \

1116 ({ 
__ªsu…
; \

1117 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1118 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1119 
__ªsu…
; 
	}
}))

	)

1122 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1125 
fd©async
 (
__fûdes
);

1131 #ifdef 
__USE_XOPEN


1133 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1138 
	$í¸y±
 (*
__libc_block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1145 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1146 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1152 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


1154 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1159 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1160 
	~<bôs/uni°d.h
>

1163 
__END_DECLS


	@/usr/include/X11/Xfuncproto.h

30 #i‚de‡
_XFUNCPROTO_H_


31 
	#_XFUNCPROTO_H_


	)

33 #i‚de‡
NìdFun˘i⁄PrŸŸy≥s


34 
	#NìdFun˘i⁄PrŸŸy≥s
 1

	)

37 #i‚de‡
NìdV¨¨gsPrŸŸy≥s


38 
	#NìdV¨¨gsPrŸŸy≥s
 1

	)

41 #i‡
NìdFun˘i⁄PrŸŸy≥s


43 #i‚de‡
NìdNe°edPrŸŸy≥s


44 
	#NìdNe°edPrŸŸy≥s
 1

	)

47 #i‚de‡
_Xc⁄°


48 
	#_Xc⁄°
 c⁄°

	)

52 #i‚de‡
NARROWPROTO


53 
	#NARROWPROTO


	)

55 #i‚de‡
FUNCPROTO


56 
	#FUNCPROTO
 15

	)

59 #i‚de‡
NìdWidePrŸŸy≥s


60 #ifde‡
NARROWPROTO


61 
	#NìdWidePrŸŸy≥s
 0

	)

63 
	#NìdWidePrŸŸy≥s
 1

	)

69 #i‚de‡
_XFUNCPROTOBEGIN


70 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

71 
	#_XFUNCPROTOBEGIN
 "C" {

	)

72 
	#_XFUNCPROTOEND
 }

	)

74 
	#_XFUNCPROTOBEGIN


	)

75 
	#_XFUNCPROTOEND


	)

80 #i‡
deföed
(
__GNUC__
) && (__GNUC__ >= 4)

81 
	#_X_SENTINEL
(
x
Ë
	`__©åibuã__
 ((
	`__£¡öñ__
(x)))

	)

83 
	#_X_SENTINEL
(
x
)

	)

87 #i‡
deföed
(
__GNUC__
Ë&& (__GNUC__ >4Ë&& !deföed(
__CYGWIN__
)

88 
	#_X_EXPORT
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

89 
	#_X_HIDDEN
 
	`__©åibuã__
((
	`visibûôy
("hiddí")))

	)

90 
	#_X_INTERNAL
 
	`__©åibuã__
((
	`visibûôy
("öã∫Æ")))

	)

91 #ñi‡
deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x550)

92 
	#_X_EXPORT
 
__globÆ


	)

93 
	#_X_HIDDEN
 
__hiddí


	)

94 
	#_X_INTERNAL
 
__hiddí


	)

96 
	#_X_EXPORT


	)

97 
	#_X_HIDDEN


	)

98 
	#_X_INTERNAL


	)

102 #i‡
deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 303)

103 
	#_X_LIKELY
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 1)

	)

104 
	#_X_UNLIKELY
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

106 
	#_X_LIKELY
(
x
Ë(x)

	)

107 
	#_X_UNLIKELY
(
x
Ë(x)

	)

111 #i‡
deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 301)

112 
	#_X_DEPRECATED
 
	`__©åibuã__
((
dïªˇãd
))

	)

114 
	#_X_DEPRECATED


	)

118 #i‡(
deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 205)) \

119 || (
deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x590))

120 
	#_X_NORETURN
 
	`__©åibuã
((
n‹ëu∫
))

	)

122 
	#_X_NORETURN


	)

126 #i‡
deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 203)

127 
	#_X_ATTRIBUTE_PRINTF
(
x
,
y
Ë
	`__©åibuã__
((
	`__f‹m©__
(
__¥ötf__
,x,y)))

	)

129 
	#_X_ATTRIBUTE_PRINTF
(
x
,
y
)

	)

133 #i‡
deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 303)

134 
	#_X_NONNULL
(
¨gs
...Ë
	`__©åibuã__
((
	`n⁄nuŒ
◊rgs)))

	)

136 
	#_X_NONNULL
(...Ë

	)

140 #i‡
deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 205)

141 
	#_X_UNUSED
 
	`__©åibuã__
((
__unu£d__
))

	)

143 
	#_X_UNUSED


	)

149 #i‡
deföed
(
ölöe
) || \

150 (
deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ - 0 >= 199901L)) || \

151 (
deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x550))

152 
	#_X_INLINE
 
ölöe


	)

153 #ñi‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

154 
	#_X_INLINE
 
__ölöe__


	)

156 
	#_X_INLINE


	)

161 #i‚de‡
_X_RESTRICT_KYWD


162 #i‡
deföed
(
ª°ri˘
) || \

163 (
deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ - 0 >= 199901L))

164 
	#_X_RESTRICT_KYWD
 
ª°ri˘


	)

165 #ñi‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

166 
	#_X_RESTRICT_KYWD
 
__ª°ri˘__


	)

168 
	#_X_RESTRICT_KYWD


	)

	@/usr/include/X11/Xmd.h

47 #i‚de‡
XMD_H


48 
	#XMD_H
 1

	)

56 #i‡
deföed
(
__sun
Ë&& deföed(
__SVR4
)

57 
	~<sys/iß_defs.h
>

60 #i‡
deföed
 (
_LP64
Ë|| deföed(
__LP64__
) || \

61 
deföed
(
__Æpha
Ë|| deföed(
__Æpha__
) || \

62 
deföed
(
__ü64__
Ë|| deföed(
ü64
) || \

63 
deföed
(
__•¨c64__
) || \

64 
deföed
(
__s390x__
) || \

65 
deföed
(
__amd64__
Ë|| deföed(
amd64
) || \

66 
	$deföed
(
__powîpc64__
)

67 
	#LONG64


	)

74 #ifde‡
WORD64


75 
	#MUSTCOPY


	)

93 
	#_SIZEOF
(
x
Ë
sz_
##
	)
x

94 
	#SIZEOF
(
x
Ë
	`_SIZEOF
(x)

	)

101 #ifde‡
WORD64


102 
	tINT64
;

103 
	tCARD64
;

104 
	#B32
 :32

	)

105 
	#B16
 :16

	)

106 #ifde‡
UNSIGNEDBITFIELDS


107 
	tINT32
;

108 
	tINT16
;

110 sig√d 
	tINT32
;

111 sig√d 
	tINT16
;

114 
	#B32


	)

115 
	#B16


	)

116 #ifde‡
LONG64


117 
	tINT64
;

118 
	tINT32
;

120 
	tINT32
;

122 
	tINT16
;

125 sig√d 
	tINT8
;

127 #ifde‡
LONG64


128 
	tCARD64
;

129 
	tCARD32
;

131 
	tCARD32
;

133 #i‡!
	`deföed
(
WORD64
Ë&& !deföed(
LONG64
)

134 
	tCARD64
;

136 
	tCARD16
;

137 
	tCARD8
;

139 
CARD32
 
	tBITS32
;

140 
CARD16
 
	tBITS16
;

142 
CARD8
 
	tBYTE
;

143 
CARD8
 
	tBOOL
;

148 #i‡
	`deföed
(
WORD64
Ë&& deföed(
UNSIGNEDBITFIELDS
)

149 
	#cvtINT8toI¡
(
vÆ
Ë(((vÆË& 0x00000080Ë? ((vÆË| 0xffffffffffffff00Ë: (vÆ))

	)

150 
	#cvtINT16toI¡
(
vÆ
Ë(((vÆË& 0x00008000Ë? ((vÆË| 0xffffffffffff0000Ë: (vÆ))

	)

151 
	#cvtINT32toI¡
(
vÆ
Ë(((vÆË& 0x80000000Ë? ((vÆË| 0xffffffff00000000Ë: (vÆ))

	)

152 
	#cvtINT8toSh‹t
(
vÆ
Ë
	`cvtINT8toI¡
(vÆ)

	)

153 
	#cvtINT16toSh‹t
(
vÆ
Ë
	`cvtINT16toI¡
(vÆ)

	)

154 
	#cvtINT32toSh‹t
(
vÆ
Ë
	`cvtINT32toI¡
(vÆ)

	)

155 
	#cvtINT8toL⁄g
(
vÆ
Ë
	`cvtINT8toI¡
(vÆ)

	)

156 
	#cvtINT16toL⁄g
(
vÆ
Ë
	`cvtINT16toI¡
(vÆ)

	)

157 
	#cvtINT32toL⁄g
(
vÆ
Ë
	`cvtINT32toI¡
(vÆ)

	)

159 
	#cvtINT8toI¡
(
vÆ
Ë(vÆ)

	)

160 
	#cvtINT16toI¡
(
vÆ
Ë(vÆ)

	)

161 
	#cvtINT32toI¡
(
vÆ
Ë(vÆ)

	)

162 
	#cvtINT8toSh‹t
(
vÆ
Ë(vÆ)

	)

163 
	#cvtINT16toSh‹t
(
vÆ
Ë(vÆ)

	)

164 
	#cvtINT32toSh‹t
(
vÆ
Ë(vÆ)

	)

165 
	#cvtINT8toL⁄g
(
vÆ
Ë(vÆ)

	)

166 
	#cvtINT16toL⁄g
(
vÆ
Ë(vÆ)

	)

167 
	#cvtINT32toL⁄g
(
vÆ
Ë(vÆ)

	)

172 #ifde‡
MUSTCOPY


176 
	#NEXTPTR
(
p
,
t
Ë(((*ËpË+ 
	`SIZEOF
—))

	)

182 
	#NEXTPTR
(
p
,
t
Ë((— *)’)Ë+ 1)

	)

	@/usr/include/X11/Xosdefs.h

27 #i‚de‡
_XOSDEFS_H_


28 
	#_XOSDEFS_H_


	)

37 #ifde‡
_SCO_DS


38 #i‚de‡
__SCO__


39 
	#__SCO__


	)

43 #ifde‡
__i386__


44 #ifde‡
SYSV


45 #i‡!
deföed
(
__SCO__
) && \

46 !
deföed
(
__UNIXWARE__
Ë&& !
	$deföed
(
__sun
)

47 #i‡!
	`deföed
(
_POSIX_SOURCE
)

48 
	#X_NOT_POSIX


	)

54 #ifde‡
__sun


58 #i‡
	`deföed
(
__SVR4
Ë&& !deföed(
SVR4
)

59 
	#SVR4
 1

	)

61 #ifde‡
SVR4


63 
	#X_POSIX_C_SOURCE
 199300L

	)

67 #ifde‡
WIN32


68 #i‚de‡
_POSIX_


69 
	#X_NOT_POSIX


	)

74 #ifde‡
__APPLE__


75 
	#NULL_NOT_ZERO


	)

82 #i‡
	`deföed
(
_XOPEN_SOURCE
Ë|| deföed(
_POSIX_SOURCE
Ë|| deföed(
_POSIX_C_SOURCE
)

83 #i‚de‡
_DARWIN_C_SOURCE


84 
	#_DARWIN_C_SOURCE


	)

90 #ifde‡
__GNU__


91 #i‚de‡
PATH_MAX


92 
	#PATH_MAX
 4096

	)

94 #i‚de‡
MAXPATHLEN


95 
	#MAXPATHLEN
 4096

	)

99 #i‡
	`deföed
(
__SCO__
Ë|| deföed(
__UNIXWARE__
)

100 #i‚de‡
PATH_MAX


101 
	#PATH_MAX
 1024

	)

103 #i‚de‡
MAXPATHLEN


104 
	#MAXPATHLEN
 1024

	)

108 #i‡
	`deföed
(
__O≥nBSD__
Ë|| deföed(
__NëBSD__
Ë|| deföed(
__FªeBSD__
) \

109 || 
	`deföed
(
__APPLE__
Ë|| 
	$deföed
(
__Døg⁄Fly__
)

110 #i‚de‡
CSRG_BASED


111 
	#CSRG_BASED


	)

	@/usr/include/X11/Xprotostr.h

1 #i‚de‡
XPROTOSTRUCTS_H


2 
	#XPROTOSTRUCTS_H


	)

50 
	~<X11/Xmd.h
>

54 
	s_xSegmít
 {

55 
INT16
 
x1
 
	mB16
, 
y1
 B16, 
x2
 B16, 
y2
 B16;

56 } 
	txSegmít
;

60 
	s_xPoöt
 {

61 
INT16
 
x
 
	mB16
, 
y
 B16;

62 } 
	txPoöt
;

64 
	s_xRe˘™gÀ
 {

65 
INT16
 
x
 
	mB16
, 
y
 B16;

66 
CARD16
 
width
 
	mB16
, 
height
 B16;

67 } 
	txRe˘™gÀ
;

71 
	s_xArc
 {

72 
INT16
 
x
 
	mB16
, 
y
 B16;

73 
CARD16
 
width
 
	mB16
, 
height
 B16;

74 
INT16
 
™gÀ1
 
	mB16
, 
™gÀ2
 B16;

75 } 
	txArc
;

	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #unde‡
_ASSERT_H


27 #unde‡
as£π


28 #unde‡
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #unde‡
as£π_≥º‹


36 
	#_ASSERT_H
 1

	)

37 
	~<„©uªs.h
>

39 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

66 #i‚de‡
_ASSERT_H_DECLS


67 
	#_ASSERT_H_DECLS


	)

68 
__BEGIN_DECLS


71 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

72 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

73 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

76 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

77 
__löe
,

78 
__c⁄°
 *
__fun˘i⁄
)

79 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

84 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

85 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 
__END_DECLS


91 
	#as£π
(
ex¥
) \

92 ((
ex¥
) \

93 ? 
	`__ASSERT_VOID_CAST
 (0) \

94 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ifdef 
__USE_GNU


97 
	#as£π_≥º‹
(
î∫um
) \

98 (!(
î∫um
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

108 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

109 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

111 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

112 
	#__ASSERT_FUNCTION
 
__func__


	)

114 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC99


98 #unde‡
__USE_ISOC95


99 #unde‡
__USE_POSIX


100 #unde‡
__USE_POSIX2


101 #unde‡
__USE_POSIX199309


102 #unde‡
__USE_POSIX199506


103 #unde‡
__USE_XOPEN


104 #unde‡
__USE_XOPEN_EXTENDED


105 #unde‡
__USE_UNIX98


106 #unde‡
__USE_XOPEN2K


107 #unde‡
__USE_XOPEN2KXSI


108 #unde‡
__USE_XOPEN2K8


109 #unde‡
__USE_XOPEN2K8XSI


110 #unde‡
__USE_LARGEFILE


111 #unde‡
__USE_LARGEFILE64


112 #unde‡
__USE_FILE_OFFSET64


113 #unde‡
__USE_BSD


114 #unde‡
__USE_SVID


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__FAVOR_BSD


121 #unde‡
__KERNEL_STRICT_NAMES


125 #i‚de‡
_LOOSE_KERNEL_NAMES


126 
	#__KERNEL_STRICT_NAMES


	)

130 
	#__USE_ANSI
 1

	)

139 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


140 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

141 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

143 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

148 #i‡
deföed
 
_BSD_SOURCE
 && \

149 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

150 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

151 
	#__FAVOR_BSD
 1

	)

155 #ifde‡
_GNU_SOURCE


156 #unde‡
_ISOC95_SOURCE


157 
	#_ISOC95_SOURCE
 1

	)

158 #unde‡
_ISOC99_SOURCE


159 
	#_ISOC99_SOURCE
 1

	)

160 #unde‡
_POSIX_SOURCE


161 
	#_POSIX_SOURCE
 1

	)

162 #unde‡
_POSIX_C_SOURCE


163 
	#_POSIX_C_SOURCE
 200809L

	)

164 #unde‡
_XOPEN_SOURCE


165 
	#_XOPEN_SOURCE
 700

	)

166 #unde‡
_XOPEN_SOURCE_EXTENDED


167 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

168 #unde‡
_LARGEFILE64_SOURCE


169 
	#_LARGEFILE64_SOURCE
 1

	)

170 #unde‡
_BSD_SOURCE


171 
	#_BSD_SOURCE
 1

	)

172 #unde‡
_SVID_SOURCE


173 
	#_SVID_SOURCE
 1

	)

174 #unde‡
_ATFILE_SOURCE


175 
	#_ATFILE_SOURCE
 1

	)

180 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

181 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

182 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

183 
	#_BSD_SOURCE
 1

	)

184 
	#_SVID_SOURCE
 1

	)

191 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

192 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

193 
	#__USE_ISOC99
 1

	)

197 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

198 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

199 
	#__USE_ISOC95
 1

	)

204 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

205 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

206 
	#_POSIX_SOURCE
 1

	)

207 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

208 
	#_POSIX_C_SOURCE
 2

	)

209 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

210 
	#_POSIX_C_SOURCE
 199506L

	)

211 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

212 
	#_POSIX_C_SOURCE
 200112L

	)

214 
	#_POSIX_C_SOURCE
 200809L

	)

216 
	#__USE_POSIX_IMPLICITLY
 1

	)

219 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


220 
	#__USE_POSIX
 1

	)

223 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


224 
	#__USE_POSIX2
 1

	)

227 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

228 
	#__USE_POSIX199309
 1

	)

231 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

232 
	#__USE_POSIX199506
 1

	)

235 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

236 
	#__USE_XOPEN2K
 1

	)

237 #unde‡
__USE_ISOC95


238 
	#__USE_ISOC95
 1

	)

239 #unde‡
__USE_ISOC99


240 
	#__USE_ISOC99
 1

	)

243 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

244 
	#__USE_XOPEN2K8
 1

	)

245 #unde‡
_ATFILE_SOURCE


246 
	#_ATFILE_SOURCE
 1

	)

249 #ifdef 
_XOPEN_SOURCE


250 
	#__USE_XOPEN
 1

	)

251 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

252 
	#__USE_XOPEN_EXTENDED
 1

	)

253 
	#__USE_UNIX98
 1

	)

254 #unde‡
_LARGEFILE_SOURCE


255 
	#_LARGEFILE_SOURCE
 1

	)

256 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

258 
	#__USE_XOPEN2K8
 1

	)

259 
	#__USE_XOPEN2K8XSI
 1

	)

261 
	#__USE_XOPEN2K
 1

	)

262 
	#__USE_XOPEN2KXSI
 1

	)

263 #unde‡
__USE_ISOC95


264 
	#__USE_ISOC95
 1

	)

265 #unde‡
__USE_ISOC99


266 
	#__USE_ISOC99
 1

	)

269 #ifde‡
_XOPEN_SOURCE_EXTENDED


270 
	#__USE_XOPEN_EXTENDED
 1

	)

275 #ifde‡
_LARGEFILE_SOURCE


276 
	#__USE_LARGEFILE
 1

	)

279 #ifde‡
_LARGEFILE64_SOURCE


280 
	#__USE_LARGEFILE64
 1

	)

283 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

284 
	#__USE_FILE_OFFSET64
 1

	)

287 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


288 
	#__USE_MISC
 1

	)

291 #ifdef 
_BSD_SOURCE


292 
	#__USE_BSD
 1

	)

295 #ifdef 
_SVID_SOURCE


296 
	#__USE_SVID
 1

	)

299 #ifdef 
_ATFILE_SOURCE


300 
	#__USE_ATFILE
 1

	)

303 #ifdef 
_GNU_SOURCE


304 
	#__USE_GNU
 1

	)

307 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


308 
	#__USE_REENTRANT
 1

	)

311 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

312 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

313 #i‡
_FORTIFY_SOURCE
 > 1

314 
	#__USE_FORTIFY_LEVEL
 2

	)

316 
	#__USE_FORTIFY_LEVEL
 1

	)

319 
	#__USE_FORTIFY_LEVEL
 0

	)

323 
	~<bôs/¥edefs.h
>

326 
	#__STDC_ISO_10646__
 200009L

	)

334 #unde‡
__GNU_LIBRARY__


335 
	#__GNU_LIBRARY__
 6

	)

339 
	#__GLIBC__
 2

	)

340 
	#__GLIBC_MINOR__
 13

	)

342 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

343 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

346 #i‡
deföed
 
__GNUC__
 \

347 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

348 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

349 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

350 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

354 #i‚de‡
__ASSEMBLER__


355 #i‚de‡
_SYS_CDEFS_H


356 
	~<sys/cdefs.h
>

361 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


362 
	#__USE_LARGEFILE
 1

	)

363 
	#__USE_LARGEFILE64
 1

	)

369 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

370 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

371 && 
deföed
 
	g__exã∫_ölöe


372 
	#__USE_EXTERN_INLINES
 1

	)

377 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

378 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

379 && 
deföed
 
	g__exã∫_ölöe


380 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

388 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
);

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

446 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

447 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

448 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

449 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

450 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

451 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

452 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

453 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

454 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

457 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

458 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

460 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

461 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

462 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

468 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

469 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

471 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

472 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 #ifde‡
_IO_MTSAFE_IO


476 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

477 
	#_IO_Êockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

479 
	#_IO_fu∆ockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

482 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

483 
	#_IO_Êockfûe
(
_Â
Ë

	)

484 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

485 
	#_IO_·rylockfûe
(
_Â
Ë

	)

486 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

487 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

490 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

491 
_IO_va_li°
, *
__ª°ri˘
);

492 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

493 
_IO_va_li°
);

494 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

495 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

497 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

498 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

500 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

502 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


503 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

504 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

505 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

506 #i‡
__GNUC__
 >= 2

509 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


510 
	~<shlib-com∑t.h
>

511 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

512 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

513 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

514 c⁄° 
_IO_°dö_u£d
;

515 
wók_exã∫
 (
_IO_°dö_u£d
);

518 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


519 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

523 
	#_IO_fwide
(
__Â
, 
__mode
) \

524 ({ 
__ªsu…
 = (
__mode
); \

525 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

527 i‡((
__Â
)->
_mode
 == 0) \

529 (
__Â
)->
_mode
 = -1; \

530 
__ªsu…
 = (
__Â
)->
_mode
; \

532 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

533 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

535 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

536 
__ªsu…
; })

	)

539 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

540 
_IO_va_li°
, *
__ª°ri˘
);

541 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

542 
_IO_va_li°
);

543 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

544 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

547 #ifde‡
__LDBL_COMPAT


548 
	~<bôs/libio-ldbl.h
>

551 #ifde‡
__˝lu•lus


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_XOPEN2K8


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

323 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

327 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

328 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

332 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

333 
__THROW
;

336 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifde‡
__USE_GNU


342 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

343 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

344 
__THROW
;

348 
__BEGIN_NAMESPACE_STD


351 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

355 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

359 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

363 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

364 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

365 
mb°©e_t
 *
__p
Ë
__THROW
;

368 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

369 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

372 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

373 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
__END_NAMESPACE_STD


378 #ifde‡
__USE_EXTERN_INLINES


384 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

385 
__exã∫_ölöe
 
wöt_t


386 
	`__NTH
 (
	$btowc
 (
__c
))

387 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

388 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

390 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

391 
__exã∫_ölöe
 

392 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

393 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

394 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

396 
__exã∫_ölöe
 
size_t


397 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

398 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

399 {  (
__ps
 !
NULL


400 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

403 
__BEGIN_NAMESPACE_STD


406 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

407 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

408 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

412 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

413 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

414 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

415 
__END_NAMESPACE_STD


418 #ifdef 
__USE_XOPEN2K8


421 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

422 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

423 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

427 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

428 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

429 
size_t
 
__nwc
, size_à
__Àn
,

430 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

435 #ifde‡
__USE_XOPEN


437 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

441 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

445 
__BEGIN_NAMESPACE_STD


448 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

449 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

450 
__END_NAMESPACE_STD


452 #ifde‡
__USE_ISOC99


453 
__BEGIN_NAMESPACE_C99


455 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

456 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

457 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
__END_NAMESPACE_C99


463 
__BEGIN_NAMESPACE_STD


466 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

467 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

471 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

473 
__THROW
;

474 
__END_NAMESPACE_STD


476 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

477 
__BEGIN_NAMESPACE_C99


480 
__exãnsi⁄__


481 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

483 
__THROW
;

487 
__exãnsi⁄__


488 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

489 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

490 
__ba£
Ë
__THROW
;

491 
__END_NAMESPACE_C99


494 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


497 
__exãnsi⁄__


498 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

499 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

500 
__THROW
;

504 
__exãnsi⁄__


505 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

507 
__ba£
Ë
__THROW
;

510 #ifde‡
__USE_GNU


524 
	~<xloˇÀ.h
>

528 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

529 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

530 
__loˇÀ_t
 
__loc
Ë
__THROW
;

532 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

533 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

534 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

536 
__exãnsi⁄__


537 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
)

545 
__THROW
;

547 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
;

551 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

552 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
;

555 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

556 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

557 
__loˇÀ_t
 
__loc
Ë
__THROW
;

562 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

563 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

567 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

568 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

569 
__THROW
;

575 #ifdef 
__USE_XOPEN2K8


578 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

581 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_STD


585 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

592 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

603 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
__THROW
 ;

610 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

612 
__gnuc_va_li°
 
__¨g
)

618 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

619 
__gnuc_va_li°
 
__¨g
)

623 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

624 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

625 
__gnuc_va_li°
 
__¨g
)

626 
__THROW
 ;

633 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

634 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

644 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
__THROW
 ;

647 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

648 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

649 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

650 #ifde‡
__REDIRECT


654 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

655 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

656 
__isoc99_fwsˇnf
)

658 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

659 
__isoc99_wsˇnf
)

661 
	`__REDIRECT_NTH
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

662 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

663 ...), 
__isoc99_swsˇnf
)

666 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

667 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

669 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

671 
__THROW
;

672 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

673 
	#wsˇnf
 
__isoc99_wsˇnf


	)

674 
	#swsˇnf
 
__isoc99_swsˇnf


	)

678 
__END_NAMESPACE_STD


681 #ifde‡
__USE_ISOC99


682 
__BEGIN_NAMESPACE_C99


687 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

688 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

689 
__gnuc_va_li°
 
__¨g
)

695 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

696 
__gnuc_va_li°
 
__¨g
)

699 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

700 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

702 
__THROW
 ;

704 #i‡!
deföed
 
__USE_GNU
 \

705 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

706 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

707 #ifde‡
__REDIRECT


708 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

709 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

710 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

712 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

713 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

715 
	`__REDIRECT_NTH
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

716 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

717 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

720 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

721 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
);

723 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

726 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

728 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

729 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

730 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

734 
__END_NAMESPACE_C99


738 
__BEGIN_NAMESPACE_STD


743 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

744 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

750 
wöt_t
 
	`gëwch¨
 ();

757 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

758 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

764 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

772 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

773 
__FILE
 *
__ª°ri˘
 
__°ªam
);

779 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

780 
__FILE
 *
__ª°ri˘
 
__°ªam
);

787 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

788 
__END_NAMESPACE_STD


791 #ifde‡
__USE_GNU


799 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

800 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

808 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

816 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

826 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

835 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

836 
__FILE
 *
__ª°ri˘
 
__°ªam
);

844 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

845 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
__BEGIN_NAMESPACE_C99


853 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

854 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

855 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

856 
__END_NAMESPACE_C99


858 #ifde‡
__USE_GNU


859 
	~<xloˇÀ.h
>

863 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

864 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

865 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

866 
__loˇÀ_t
 
__loc
Ë
__THROW
;

875 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


876 
	#__√ed_iswxxx


	)

877 
	~<w˘y≥.h
>

881 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


882 
	~<bôs/wch¨2.h
>

885 #ifde‡
__LDBL_COMPAT


886 
	~<bôs/wch¨-ldbl.h
>

889 
__END_DECLS


897 #unde‡
__√ed_mb°©e_t


898 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@
1
.
1
/usr/include
49
998
atoms.c
atoms.h
client.c
cursor.c
events.c
ewmh.c
keypress.c
layouts.c
panel.c
user.c
zwm.c
zwm.h
/usr/include/X11/X.h
/usr/include/X11/Xatom.h
/usr/include/X11/Xlib.h
/usr/include/X11/Xproto.h
/usr/include/X11/Xutil.h
/usr/include/X11/cursorfont.h
/usr/include/X11/extensions/Xinerama.h
/usr/include/X11/keysym.h
/usr/include/X11/keysymdef.h
/usr/include/errno.h
/usr/include/libzen/config.h
/usr/include/libzen/events.h
/usr/include/libzen/list.h
/usr/include/limits.h
/usr/include/locale.h
/usr/include/regex.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/unistd.h
/usr/include/X11/Xfuncproto.h
/usr/include/X11/Xmd.h
/usr/include/X11/Xosdefs.h
/usr/include/X11/Xprotostr.h
/usr/include/alloca.h
/usr/include/assert.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/stdint.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/ctype.h
/usr/include/endian.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
